
/tmp/arduino/sketches/516C1C931CA76763B5C74B1BFC2CB13E/hardware.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__dtors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_16>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_18>
      4c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_19>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      70:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      74:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      78:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      7c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      80:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      84:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	00 0a       	sbc	r0, r16
      90:	0b 0c       	add	r0, r11
      92:	00 00       	nop
      94:	00 00       	nop
      96:	00 00       	nop
      98:	01 04       	cpc	r0, r1
      9a:	05 06       	cpc	r0, r21
	...

000000c1 <port_to_output_PGM>:
      c1:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

000000d1 <port_to_mode_PGM>:
      d1:	00 00 3a 00 37 00 34 00 31 00 22 00 61 00 64 00     ..:.7.4.1.".a.d.

000000e1 <digital_pin_to_port_PGM>:
      e1:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
      f1:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     101:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
     111:	06 06 06 06 06                                      .....

00000116 <digital_pin_to_bit_mask_PGM>:
     116:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     126:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     136:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     146:	08 10 20 40 80 00                                   .. @..

0000014c <__ctors_start>:
__ctors_start():
     14c:	eb 06       	cpc	r14, r27

0000014e <__ctors_end>:
__dtors_start():
     14e:	59 0d       	add	r21, r9

00000150 <__dtors_end>:
__dtors_end():
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf ef       	ldi	r28, 0xFF	; 255
     156:	d0 e1       	ldi	r29, 0x10	; 16
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     15c:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     15e:	aa e1       	ldi	r26, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     160:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     166:	af 34       	cpi	r26, 0x4F	; 79
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     168:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     16c:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     16e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     170:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     172:	ea e4       	ldi	r30, 0x4A	; 74
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     174:	f4 e2       	ldi	r31, 0x24	; 36
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     176:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     178:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     17c:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     17e:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     180:	aa 31       	cpi	r26, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     182:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>

00000186 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     186:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     188:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     18a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     18c:	04 c0       	rjmp	.+8      	; 0x196 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     18e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     190:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     192:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     196:	c6 3a       	cpi	r28, 0xA6	; 166
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     198:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     19a:	c9 f7       	brne	.-14     	; 0x18e <__do_global_ctors+0x8>
     19c:	0e 94 9b 07 	call	0xf36	; 0xf36 <main>
     1a0:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__do_global_dtors>

000001a4 <__bad_interrupt>:
__vector_22():
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <pinMode.constprop.85>:
pinMode():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	fc 01       	movw	r30, r24
     1ac:	ea 5e       	subi	r30, 0xEA	; 234
     1ae:	fe 4f       	sbci	r31, 0xFE	; 254
     1b0:	24 91       	lpm	r18, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     1b2:	8f 51       	subi	r24, 0x1F	; 31
     1b4:	9f 4f       	sbci	r25, 0xFF	; 255
     1b6:	fc 01       	movw	r30, r24
     1b8:	84 91       	lpm	r24, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     1ba:	88 23       	and	r24, r24
     1bc:	99 f0       	breq	.+38     	; 0x1e4 <pinMode.constprop.85+0x3c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	fc 01       	movw	r30, r24
     1c6:	ef 52       	subi	r30, 0x2F	; 47
     1c8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ca:	a5 91       	lpm	r26, Z+
     1cc:	b4 91       	lpm	r27, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     1ce:	fc 01       	movw	r30, r24
     1d0:	ef 53       	subi	r30, 0x3F	; 63
     1d2:	ff 4f       	sbci	r31, 0xFF	; 255
     1d4:	85 91       	lpm	r24, Z+
     1d6:	94 91       	lpm	r25, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     1d8:	8f b7       	in	r24, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     1da:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     1dc:	ec 91       	ld	r30, X
     1de:	e2 2b       	or	r30, r18
     1e0:	ec 93       	st	X, r30
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     1e2:	8f bf       	out	0x3f, r24	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:59
  }
}
     1e4:	08 95       	ret

000001e6 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]>:
dataForThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:226
    OCR1A = intencity;
}

const stend::warmer_data_t& warmerData::dataForThermalDelta(uint8_t thermalDelta) {

  if(thermalDelta == 0) {
     1e6:	81 11       	cpse	r24, r1
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x2c>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:228
    
    m_warmerData.pwm = 0;
     1ea:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <pid+0x39>
     1ee:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <pid+0x38>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:229
    m_warmerData.adc = 0;
     1f2:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <pid+0x3b>
     1f6:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:307
      case 100:
        m_warmerData.pwm = 411;  
        break;
  }

  m_warmerData.resolution = ADC_RESOLUTION_x1;
     1fa:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <pid+0x3c>
keepThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:75
  }
}

void pidRegulator::keepThermalDelta(uint8_t thermalDelta) {

  m_warmerData = m_pidParams.dataForThermalDelta(thermalDelta);
     1fe:	87 e0       	ldi	r24, 0x07	; 7
     200:	ee e3       	ldi	r30, 0x3E	; 62
     202:	f3 e0       	ldi	r31, 0x03	; 3
     204:	a6 e0       	ldi	r26, 0x06	; 6
     206:	b3 e0       	ldi	r27, 0x03	; 3
     208:	01 90       	ld	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	8a 95       	dec	r24
     20e:	e1 f7       	brne	.-8      	; 0x208 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x22>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:76
}
     210:	08 95       	ret
dataForThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:234
    m_warmerData.adc = 0;
    m_warmerData.resolution = ADC_RESOLUTION_x1;
    return m_warmerData;   
  }

  if(thermalDelta == m_warmerData.prevDelta) {
     212:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <pid+0x3d>
     216:	82 17       	cp	r24, r18
     218:	91 f3       	breq	.-28     	; 0x1fe <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x18>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:238
    return m_warmerData;
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	28 17       	cp	r18, r24
     21e:	08 f0       	brcs	.+2      	; 0x222 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x3c>
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <pid+0x3e>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:239
  m_warmerData.prevDelta = thermalDelta;
     226:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pid+0x3d>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241

  switch(thermalDelta) {
     22a:	82 33       	cpi	r24, 0x32	; 50
     22c:	09 f4       	brne	.+2      	; 0x230 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x4a>
     22e:	61 c0       	rjmp	.+194    	; 0x2f2 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x10c>
     230:	08 f5       	brcc	.+66     	; 0x274 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x8e>
     232:	84 31       	cpi	r24, 0x14	; 20
     234:	09 f4       	brne	.+2      	; 0x238 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x52>
     236:	4b c0       	rjmp	.+150    	; 0x2ce <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xe8>
     238:	78 f4       	brcc	.+30     	; 0x258 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x72>
     23a:	8a 30       	cpi	r24, 0x0A	; 10
     23c:	d9 f1       	breq	.+118    	; 0x2b4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xce>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:274
      case 100:
        m_warmerData.adc = 161;
        break;
  }

  switch(thermalDelta) {
     23e:	8c 33       	cpi	r24, 0x3C	; 60
     240:	09 f4       	brne	.+2      	; 0x244 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x5e>
     242:	66 c0       	rjmp	.+204    	; 0x310 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x12a>
     244:	08 f0       	brcs	.+2      	; 0x248 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x62>
     246:	80 c0       	rjmp	.+256    	; 0x348 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x162>
     248:	8e 31       	cpi	r24, 0x1E	; 30
     24a:	09 f4       	brne	.+2      	; 0x24e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x68>
     24c:	4f c0       	rjmp	.+158    	; 0x2ec <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x106>
     24e:	08 f0       	brcs	.+2      	; 0x252 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x6c>
     250:	74 c0       	rjmp	.+232    	; 0x33a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x154>
     252:	84 31       	cpi	r24, 0x14	; 20
     254:	91 f6       	brne	.-92     	; 0x1fa <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x14>
     256:	41 c0       	rjmp	.+130    	; 0x2da <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xf4>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
     258:	8e 31       	cpi	r24, 0x1E	; 30
     25a:	09 f4       	brne	.+2      	; 0x25e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x78>
     25c:	41 c0       	rjmp	.+130    	; 0x2e0 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xfa>
     25e:	88 32       	cpi	r24, 0x28	; 40
     260:	71 f7       	brne	.-36     	; 0x23e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x58>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:252
        break;
      case 30:
        m_warmerData.adc = 112;
        break;
      case 40:
        m_warmerData.adc = 121;
     262:	89 e7       	ldi	r24, 0x79	; 121
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     26a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:285
        break;
      case 30:
        m_warmerData.pwm = 183;  
        break;
      case 40:
        m_warmerData.pwm = 212;  
     26e:	84 ed       	ldi	r24, 0xD4	; 212
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	28 c0       	rjmp	.+80     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
     274:	80 35       	cpi	r24, 0x50	; 80
     276:	09 f4       	brne	.+2      	; 0x27a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x94>
     278:	4e c0       	rjmp	.+156    	; 0x316 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x130>
     27a:	70 f4       	brcc	.+28     	; 0x298 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xb2>
     27c:	8c 33       	cpi	r24, 0x3C	; 60
     27e:	09 f4       	brne	.+2      	; 0x282 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x9c>
     280:	41 c0       	rjmp	.+130    	; 0x304 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x11e>
     282:	86 34       	cpi	r24, 0x46	; 70
     284:	e1 f6       	brne	.-72     	; 0x23e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x58>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:261
        break;
      case 60:
        m_warmerData.adc = 127;
        break;
      case 70:
        m_warmerData.adc = 133;
     286:	85 e8       	ldi	r24, 0x85	; 133
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     28e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:294
        break;
      case 60:
        m_warmerData.pwm = 246;  
        break;
      case 70:
        m_warmerData.pwm = 270;  
     292:	8e e0       	ldi	r24, 0x0E	; 14
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	16 c0       	rjmp	.+44     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
     298:	8a 35       	cpi	r24, 0x5A	; 90
     29a:	09 f4       	brne	.+2      	; 0x29e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xb8>
     29c:	45 c0       	rjmp	.+138    	; 0x328 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x142>
     29e:	84 36       	cpi	r24, 0x64	; 100
     2a0:	71 f6       	brne	.-100    	; 0x23e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x58>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:270
        break;
      case 90:
        m_warmerData.adc = 151;
        break;
      case 100:
        m_warmerData.adc = 161;
     2a2:	81 ea       	ldi	r24, 0xA1	; 161
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2aa:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:303
        break;
      case 90:
        m_warmerData.pwm = 350;  
        break;
      case 100:
        m_warmerData.pwm = 411;  
     2ae:	8b e9       	ldi	r24, 0x9B	; 155
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:243
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
      case 10:
        m_warmerData.adc = 63;
     2b4:	8f e3       	ldi	r24, 0x3F	; 63
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2bc:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:276
        break;
  }

  switch(thermalDelta) {
      case 10:
        m_warmerData.pwm = 100;  
     2c0:	84 e6       	ldi	r24, 0x64	; 100
     2c2:	90 e0       	ldi	r25, 0x00	; 0
/home/stend/Документы/stend/hardware/pid_regulator.cpp:303
        break;
      case 90:
        m_warmerData.pwm = 350;  
        break;
      case 100:
        m_warmerData.pwm = 411;  
     2c4:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <pid+0x39>
     2c8:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <pid+0x38>
     2cc:	96 cf       	rjmp	.-212    	; 0x1fa <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x14>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:246
  switch(thermalDelta) {
      case 10:
        m_warmerData.adc = 63;
        break;
      case 20:
        m_warmerData.adc = 87;
     2ce:	87 e5       	ldi	r24, 0x57	; 87
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2d6:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:279
  switch(thermalDelta) {
      case 10:
        m_warmerData.pwm = 100;  
        break;
      case 20:
        m_warmerData.pwm = 135;  
     2da:	87 e8       	ldi	r24, 0x87	; 135
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	f2 cf       	rjmp	.-28     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:249
        break;
      case 20:
        m_warmerData.adc = 87;
        break;
      case 30:
        m_warmerData.adc = 112;
     2e0:	80 e7       	ldi	r24, 0x70	; 112
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2e8:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:282
        break;
      case 20:
        m_warmerData.pwm = 135;  
        break;
      case 30:
        m_warmerData.pwm = 183;  
     2ec:	87 eb       	ldi	r24, 0xB7	; 183
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	e9 cf       	rjmp	.-46     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:255
        break;
      case 40:
        m_warmerData.adc = 121;
        break;
      case 50:
        m_warmerData.adc = 124;
     2f2:	8c e7       	ldi	r24, 0x7C	; 124
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2fa:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:288
        break;
      case 40:
        m_warmerData.pwm = 212;  
        break;
      case 50:
        m_warmerData.pwm = 229;  
     2fe:	85 ee       	ldi	r24, 0xE5	; 229
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	e0 cf       	rjmp	.-64     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:258
        break;
      case 50:
        m_warmerData.adc = 124;
        break;
      case 60:
        m_warmerData.adc = 127;
     304:	8f e7       	ldi	r24, 0x7F	; 127
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     30c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:291
        break;
      case 50:
        m_warmerData.pwm = 229;  
        break;
      case 60:
        m_warmerData.pwm = 246;  
     310:	86 ef       	ldi	r24, 0xF6	; 246
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	d7 cf       	rjmp	.-82     	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:264
        break;
      case 70:
        m_warmerData.adc = 133;
        break;
      case 80:
        m_warmerData.adc = 141;
     316:	8d e8       	ldi	r24, 0x8D	; 141
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     31e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:297
        break;
      case 70:
        m_warmerData.pwm = 270;  
        break;
      case 80:
        m_warmerData.pwm = 295;  
     322:	87 e2       	ldi	r24, 0x27	; 39
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	ce cf       	rjmp	.-100    	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:267
        break;
      case 80:
        m_warmerData.adc = 141;
        break;
      case 90:
        m_warmerData.adc = 151;
     328:	87 e9       	ldi	r24, 0x97	; 151
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     330:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:300
        break;
      case 80:
        m_warmerData.pwm = 295;  
        break;
      case 90:
        m_warmerData.pwm = 350;  
     334:	8e e5       	ldi	r24, 0x5E	; 94
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	c5 cf       	rjmp	.-118    	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:274
      case 100:
        m_warmerData.adc = 161;
        break;
  }

  switch(thermalDelta) {
     33a:	88 32       	cpi	r24, 0x28	; 40
     33c:	09 f4       	brne	.+2      	; 0x340 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x15a>
     33e:	97 cf       	rjmp	.-210    	; 0x26e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x88>
     340:	82 33       	cpi	r24, 0x32	; 50
     342:	09 f0       	breq	.+2      	; 0x346 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x160>
     344:	5a cf       	rjmp	.-332    	; 0x1fa <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x14>
     346:	db cf       	rjmp	.-74     	; 0x2fe <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x118>
     348:	80 35       	cpi	r24, 0x50	; 80
     34a:	59 f3       	breq	.-42     	; 0x322 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x13c>
     34c:	20 f4       	brcc	.+8      	; 0x356 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x170>
     34e:	86 34       	cpi	r24, 0x46	; 70
     350:	09 f0       	breq	.+2      	; 0x354 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x16e>
     352:	53 cf       	rjmp	.-346    	; 0x1fa <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x14>
     354:	9e cf       	rjmp	.-196    	; 0x292 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xac>
     356:	8a 35       	cpi	r24, 0x5A	; 90
     358:	69 f3       	breq	.-38     	; 0x334 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x14e>
     35a:	84 36       	cpi	r24, 0x64	; 100
     35c:	09 f0       	breq	.+2      	; 0x360 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x17a>
     35e:	4d cf       	rjmp	.-358    	; 0x1fa <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0x14>
     360:	a6 cf       	rjmp	.-180    	; 0x2ae <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]+0xc8>

00000362 <digitalWrite>:
digitalWrite():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	fc 01       	movw	r30, r24
     366:	e4 57       	subi	r30, 0x74	; 116
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	24 91       	lpm	r18, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     36c:	fc 01       	movw	r30, r24
     36e:	ea 5e       	subi	r30, 0xEA	; 234
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	34 91       	lpm	r19, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     374:	8f 51       	subi	r24, 0x1F	; 31
     376:	9f 4f       	sbci	r25, 0xFF	; 255
     378:	fc 01       	movw	r30, r24
     37a:	84 91       	lpm	r24, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     37c:	88 23       	and	r24, r24
     37e:	59 f1       	breq	.+86     	; 0x3d6 <digitalWrite+0x74>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     380:	22 23       	and	r18, r18
     382:	c1 f0       	breq	.+48     	; 0x3b4 <digitalWrite+0x52>
turnOffPWM():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     384:	21 50       	subi	r18, 0x01	; 1
     386:	2c 30       	cpi	r18, 0x0C	; 12
     388:	a8 f4       	brcc	.+42     	; 0x3b4 <digitalWrite+0x52>
     38a:	e2 2f       	mov	r30, r18
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	e5 53       	subi	r30, 0x35	; 53
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__tablejump2__>
     396:	04 02       	muls	r16, r20
     398:	04 02       	muls	r16, r20
     39a:	da 01       	movw	r26, r20
     39c:	d7 01       	movw	r26, r14
     39e:	ec 01       	movw	r28, r24
     3a0:	ef 01       	movw	r28, r30
     3a2:	f2 01       	movw	r30, r4
     3a4:	da 01       	movw	r26, r20
     3a6:	da 01       	movw	r26, r20
     3a8:	f6 01       	movw	r30, r12
     3aa:	fc 01       	movw	r30, r24
     3ac:	00 02       	muls	r16, r16
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     3ae:	9f b5       	in	r25, 0x2f	; 47
     3b0:	9f 77       	andi	r25, 0x7F	; 127
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:92
        TCCR1A &= ~_BV(COM1B1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     3b2:	9f bd       	out	0x2f, r25	; 47
digitalWrite():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     3b4:	e8 2f       	mov	r30, r24
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	ef 53       	subi	r30, 0x3F	; 63
     3be:	ff 4f       	sbci	r31, 0xFF	; 255
     3c0:	a5 91       	lpm	r26, Z+
     3c2:	b4 91       	lpm	r27, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     3c4:	8f b7       	in	r24, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     3c6:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     3c8:	ec 91       	ld	r30, X
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     3ca:	61 11       	cpse	r22, r1
     3cc:	21 c0       	rjmp	.+66     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     3ce:	30 95       	com	r19
     3d0:	3e 23       	and	r19, r30
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     3d2:	3c 93       	st	X, r19
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     3d4:	8f bf       	out	0x3f, r24	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
     3d6:	08 95       	ret
turnOffPWM():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     3d8:	9f b5       	in	r25, 0x2f	; 47
     3da:	9f 7d       	andi	r25, 0xDF	; 223
     3dc:	ea cf       	rjmp	.-44     	; 0x3b2 <digitalWrite+0x50>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     3de:	9f b5       	in	r25, 0x2f	; 47
     3e0:	97 7f       	andi	r25, 0xF7	; 247
     3e2:	e7 cf       	rjmp	.-50     	; 0x3b2 <digitalWrite+0x50>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     3e4:	95 b5       	in	r25, 0x25	; 37
     3e6:	9f 7d       	andi	r25, 0xDF	; 223
     3e8:	95 bd       	out	0x25, r25	; 37
     3ea:	e4 cf       	rjmp	.-56     	; 0x3b4 <digitalWrite+0x52>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     3ec:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3f0:	9f 77       	andi	r25, 0x7F	; 127
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     3f2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3f6:	de cf       	rjmp	.-68     	; 0x3b4 <digitalWrite+0x52>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     3f8:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3fc:	9f 7d       	andi	r25, 0xDF	; 223
     3fe:	f9 cf       	rjmp	.-14     	; 0x3f2 <digitalWrite+0x90>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     400:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     404:	97 7f       	andi	r25, 0xF7	; 247
     406:	f5 cf       	rjmp	.-22     	; 0x3f2 <digitalWrite+0x90>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     408:	93 b7       	in	r25, 0x33	; 51
     40a:	9f 7d       	andi	r25, 0xDF	; 223
     40c:	93 bf       	out	0x33, r25	; 51
     40e:	d2 cf       	rjmp	.-92     	; 0x3b4 <digitalWrite+0x52>
digitalWrite():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     410:	3e 2b       	or	r19, r30
     412:	df cf       	rjmp	.-66     	; 0x3d2 <digitalWrite+0x70>

00000414 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.77]>:
swSPI_transfer():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:261
  digitalWrite(_select, HIGH);
}


//  MSBFIRST
uint8_t MCP_DAC::swSPI_transfer(uint8_t val)
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	e8 2e       	mov	r14, r24
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:263
{
  uint8_t clk = _clock;
     422:	00 91 d4 02 	lds	r16, 0x02D4	; 0x8002d4 <light+0x1>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:264
  uint8_t dao = _dataOut;
     426:	f0 90 d3 02 	lds	r15, 0x02D3	; 0x8002d3 <light>
     42a:	c8 e0       	ldi	r28, 0x08	; 8
     42c:	d0 e0       	ldi	r29, 0x00	; 0
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:265
  for (uint8_t mask = 0x80; mask; mask >>= 1)
     42e:	10 e8       	ldi	r17, 0x80	; 128
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:267
  {
    digitalWrite(dao, (val & mask));
     430:	6e 2d       	mov	r22, r14
     432:	61 23       	and	r22, r17
     434:	8f 2d       	mov	r24, r15
     436:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:268
    digitalWrite(clk, HIGH);
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	80 2f       	mov	r24, r16
     43e:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:269
    digitalWrite(clk, LOW);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	80 2f       	mov	r24, r16
     446:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:265
//  MSBFIRST
uint8_t MCP_DAC::swSPI_transfer(uint8_t val)
{
  uint8_t clk = _clock;
  uint8_t dao = _dataOut;
  for (uint8_t mask = 0x80; mask; mask >>= 1)
     44a:	16 95       	lsr	r17
     44c:	21 97       	sbiw	r28, 0x01	; 1
     44e:	81 f7       	brne	.-32     	; 0x430 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.77]+0x1c>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:272
    digitalWrite(dao, (val & mask));
    digitalWrite(clk, HIGH);
    digitalWrite(clk, LOW);
  }
  return 0;
}
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	08 95       	ret

00000460 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]>:
transfer():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:240

//////////////////////////////////////////////////////////////////
//
//  PROTECTED
//
void MCP_DAC::transfer(uint16_t data)
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ec 01       	movw	r28, r24
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:243
{
  //  DATA TRANSFER
  digitalWrite(_select, LOW);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <light+0x2>
     46c:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:244
  if (_hwSPI)
     470:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <light+0x4>
     474:	88 23       	and	r24, r24
     476:	b9 f0       	breq	.+46     	; 0x4a6 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]+0x46>
     478:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <light+0x15>
     47c:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <light+0x16>
beginTransaction():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     480:	9d b9       	out	0x0d, r25	; 13
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
     482:	8e b9       	out	0x0e, r24	; 14
transfer():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:212
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     484:	df b9       	out	0x0f, r29	; 15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     486:	00 00       	nop
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     488:	77 9b       	sbis	0x0e, 7	; 14
     48a:	fe cf       	rjmp	.-4      	; 0x488 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]+0x28>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:221
    return SPDR;
     48c:	8f b1       	in	r24, 0x0f	; 15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     48e:	cf b9       	out	0x0f, r28	; 15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     490:	00 00       	nop
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     492:	77 9b       	sbis	0x0e, 7	; 14
     494:	fe cf       	rjmp	.-4      	; 0x492 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]+0x32>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:221
    return SPDR;
     496:	8f b1       	in	r24, 0x0f	; 15
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:256
  else      //  Software SPI
  {
    swSPI_transfer((uint8_t)(data >> 8));
    swSPI_transfer((uint8_t)(data & 0xFF));
  }
  digitalWrite(_select, HIGH);
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <light+0x2>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:257
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:256
  else      //  Software SPI
  {
    swSPI_transfer((uint8_t)(data >> 8));
    swSPI_transfer((uint8_t)(data & 0xFF));
  }
  digitalWrite(_select, HIGH);
     4a2:	0c 94 b1 01 	jmp	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:253
    mySPI->transfer((uint8_t)(data & 0xFF));
    mySPI->endTransaction();
  }
  else      //  Software SPI
  {
    swSPI_transfer((uint8_t)(data >> 8));
     4a6:	8d 2f       	mov	r24, r29
     4a8:	0e 94 0a 02 	call	0x414	; 0x414 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.77]>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:254
    swSPI_transfer((uint8_t)(data & 0xFF));
     4ac:	8c 2f       	mov	r24, r28
     4ae:	0e 94 0a 02 	call	0x414	; 0x414 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.77]>
     4b2:	f2 cf       	rjmp	.-28     	; 0x498 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]+0x38>

000004b4 <lightregulator::setintencity(unsigned char) [clone .part.1] [clone .constprop.72]>:
_ZN14lightregulator12setintencityEh.part.1():
/home/stend/Документы/stend/hardware/light_regulator.h:42
lightregulator::lightregulator() {};

void lightregulator::setintencity(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
     4b4:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <light+0x17>
     4b8:	0e 2e       	mov	r0, r30
     4ba:	00 0c       	add	r0, r0
     4bc:	ff 0b       	sbc	r31, r31
     4be:	ed 52       	subi	r30, 0x2D	; 45
     4c0:	fd 4f       	sbci	r31, 0xFD	; 253
     4c2:	81 8d       	ldd	r24, Z+25	; 0x19
     4c4:	90 e0       	ldi	r25, 0x00	; 0
fastWriteA():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:131
}


void MCP_DAC::fastWriteA(uint16_t value)
{
  transfer(0x3000 | value);
     4c6:	90 63       	ori	r25, 0x30	; 48
     4c8:	0c 94 30 02 	jmp	0x460	; 0x460 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]>

000004cc <micros>:
micros():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     4cc:	3f b7       	in	r19, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     4ce:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     4d0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timer0_overflow_count>
     4d4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timer0_overflow_count+0x1>
     4d8:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timer0_overflow_count+0x2>
     4dc:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timer0_overflow_count+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     4e0:	22 b7       	in	r18, 0x32	; 50
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     4e2:	06 b6       	in	r0, 0x36	; 54
     4e4:	00 fe       	sbrs	r0, 0
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <micros+0x26>
     4e8:	2f 3f       	cpi	r18, 0xFF	; 255
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <micros+0x26>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	a1 1d       	adc	r26, r1
     4f0:	b1 1d       	adc	r27, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     4f2:	3f bf       	out	0x3f, r19	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     4f4:	ba 2f       	mov	r27, r26
     4f6:	a9 2f       	mov	r26, r25
     4f8:	98 2f       	mov	r25, r24
     4fa:	88 27       	eor	r24, r24
     4fc:	bc 01       	movw	r22, r24
     4fe:	cd 01       	movw	r24, r26
     500:	62 0f       	add	r22, r18
     502:	71 1d       	adc	r23, r1
     504:	81 1d       	adc	r24, r1
     506:	91 1d       	adc	r25, r1
     508:	42 e0       	ldi	r20, 0x02	; 2
     50a:	66 0f       	add	r22, r22
     50c:	77 1f       	adc	r23, r23
     50e:	88 1f       	adc	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	4a 95       	dec	r20
     514:	d1 f7       	brne	.-12     	; 0x50a <micros+0x3e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     516:	08 95       	ret

00000518 <delay>:
delay():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	4b 01       	movw	r8, r22
     52a:	5c 01       	movw	r10, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     52c:	0e 94 66 02 	call	0x4cc	; 0x4cc <micros>
     530:	6b 01       	movw	r12, r22
     532:	7c 01       	movw	r14, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     534:	0e 94 66 02 	call	0x4cc	; 0x4cc <micros>
     538:	6c 19       	sub	r22, r12
     53a:	7d 09       	sbc	r23, r13
     53c:	8e 09       	sbc	r24, r14
     53e:	9f 09       	sbc	r25, r15
     540:	68 3e       	cpi	r22, 0xE8	; 232
     542:	73 40       	sbci	r23, 0x03	; 3
     544:	81 05       	cpc	r24, r1
     546:	91 05       	cpc	r25, r1
     548:	a8 f3       	brcs	.-22     	; 0x534 <delay+0x1c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	82 1a       	sub	r8, r18
     54e:	91 08       	sbc	r9, r1
     550:	a1 08       	sbc	r10, r1
     552:	b1 08       	sbc	r11, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     554:	88 ee       	ldi	r24, 0xE8	; 232
     556:	c8 0e       	add	r12, r24
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	d8 1e       	adc	r13, r24
     55c:	e1 1c       	adc	r14, r1
     55e:	f1 1c       	adc	r15, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     560:	81 14       	cp	r8, r1
     562:	91 04       	cpc	r9, r1
     564:	a1 04       	cpc	r10, r1
     566:	b1 04       	cpc	r11, r1
     568:	29 f7       	brne	.-54     	; 0x534 <delay+0x1c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	08 95       	ret

0000057c <millis>:
millis():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     57c:	2f b7       	in	r18, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     57e:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     580:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <timer0_millis>
     584:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <timer0_millis+0x1>
     588:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <timer0_millis+0x2>
     58c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <timer0_millis+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     590:	2f bf       	out	0x3f, r18	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
     592:	08 95       	ret

00000594 <String::StringIfHelper() const>:
StringIfHelper():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     594:	08 95       	ret

00000596 <Print::write(unsigned char const*, unsigned int)>:
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     596:	af 92       	push	r10
     598:	bf 92       	push	r11
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	6c 01       	movw	r12, r24
     5ac:	7b 01       	movw	r14, r22
     5ae:	8b 01       	movw	r16, r22
     5b0:	04 0f       	add	r16, r20
     5b2:	15 1f       	adc	r17, r21
     5b4:	eb 01       	movw	r28, r22
     5b6:	5e 01       	movw	r10, r28
     5b8:	ae 18       	sub	r10, r14
     5ba:	bf 08       	sbc	r11, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     5bc:	c0 17       	cp	r28, r16
     5be:	d1 07       	cpc	r29, r17
     5c0:	59 f0       	breq	.+22     	; 0x5d8 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     5c2:	69 91       	ld	r22, Y+
     5c4:	d6 01       	movw	r26, r12
     5c6:	ed 91       	ld	r30, X+
     5c8:	fc 91       	ld	r31, X
     5ca:	01 90       	ld	r0, Z+
     5cc:	f0 81       	ld	r31, Z
     5ce:	e0 2d       	mov	r30, r0
     5d0:	c6 01       	movw	r24, r12
     5d2:	09 95       	icall
     5d4:	89 2b       	or	r24, r25
     5d6:	79 f7       	brne	.-34     	; 0x5b6 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5d8:	c5 01       	movw	r24, r10
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	08 95       	ret

000005f0 <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     5f0:	fc 01       	movw	r30, r24
     5f2:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     5f4:	44 8d       	ldd	r20, Z+28	; 0x1c
     5f6:	25 2f       	mov	r18, r21
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	84 2f       	mov	r24, r20
     5fc:	90 e0       	ldi	r25, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     5fe:	82 1b       	sub	r24, r18
     600:	93 0b       	sbc	r25, r19
     602:	54 17       	cp	r21, r20
     604:	10 f0       	brcs	.+4      	; 0x60a <HardwareSerial::availableForWrite()+0x1a>
     606:	cf 96       	adiw	r24, 0x3f	; 63
     608:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     60a:	01 97       	sbiw	r24, 0x01	; 1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     60c:	08 95       	ret

0000060e <HardwareSerial::read()>:
read():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     60e:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     610:	91 8d       	ldd	r25, Z+25	; 0x19
     612:	82 8d       	ldd	r24, Z+26	; 0x1a
     614:	98 17       	cp	r25, r24
     616:	61 f0       	breq	.+24     	; 0x630 <HardwareSerial::read()+0x22>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     618:	a2 8d       	ldd	r26, Z+26	; 0x1a
     61a:	ae 0f       	add	r26, r30
     61c:	bf 2f       	mov	r27, r31
     61e:	b1 1d       	adc	r27, r1
     620:	5d 96       	adiw	r26, 0x1d	; 29
     622:	8c 91       	ld	r24, X
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     624:	92 8d       	ldd	r25, Z+26	; 0x1a
     626:	9f 5f       	subi	r25, 0xFF	; 255
     628:	9f 73       	andi	r25, 0x3F	; 63
     62a:	92 8f       	std	Z+26, r25	; 0x1a
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	9f ef       	ldi	r25, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     634:	08 95       	ret

00000636 <Stream::timedRead() [clone .constprop.18]>:
timedRead():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:31
#include "Stream.h"

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:34
{
  int c;
  _startMillis = millis();
     63a:	0e 94 be 02 	call	0x57c	; 0x57c <millis>
     63e:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <Serial+0x8>
     642:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <Serial+0x9>
     646:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Serial+0xa>
     64a:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Serial+0xb>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:36
  do {
    c = read();
     64e:	86 e2       	ldi	r24, 0x26	; 38
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 07 03 	call	0x60e	; 0x60e <HardwareSerial::read()>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:37
    if (c >= 0) return c;
     656:	97 ff       	sbrs	r25, 7
     658:	1d c0       	rjmp	.+58     	; 0x694 <Stream::timedRead() [clone .constprop.18]+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:38
  } while(millis() - _startMillis < _timeout);
     65a:	0e 94 be 02 	call	0x57c	; 0x57c <millis>
     65e:	00 91 2e 02 	lds	r16, 0x022E	; 0x80022e <Serial+0x8>
     662:	10 91 2f 02 	lds	r17, 0x022F	; 0x80022f <Serial+0x9>
     666:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <Serial+0xa>
     66a:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <Serial+0xb>
     66e:	60 1b       	sub	r22, r16
     670:	71 0b       	sbc	r23, r17
     672:	82 0b       	sbc	r24, r18
     674:	93 0b       	sbc	r25, r19
     676:	00 91 2a 02 	lds	r16, 0x022A	; 0x80022a <Serial+0x4>
     67a:	10 91 2b 02 	lds	r17, 0x022B	; 0x80022b <Serial+0x5>
     67e:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <Serial+0x6>
     682:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <Serial+0x7>
     686:	60 17       	cp	r22, r16
     688:	71 07       	cpc	r23, r17
     68a:	82 07       	cpc	r24, r18
     68c:	93 07       	cpc	r25, r19
     68e:	f8 f2       	brcs	.-66     	; 0x64e <Stream::timedRead() [clone .constprop.18]+0x18>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:39
  return -1;     // -1 indicates timeout
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	9f ef       	ldi	r25, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:40
}
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <HardwareSerial::peek()>:
peek():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     69a:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     69c:	91 8d       	ldd	r25, Z+25	; 0x19
     69e:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a0:	98 17       	cp	r25, r24
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <HardwareSerial::peek()+0x16>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     6a4:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a6:	e8 0f       	add	r30, r24
     6a8:	f1 1d       	adc	r31, r1
     6aa:	85 8d       	ldd	r24, Z+29	; 0x1d
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	9f ef       	ldi	r25, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     6b4:	08 95       	ret

000006b6 <HardwareSerial::available()>:
available():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     6b6:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     6b8:	91 8d       	ldd	r25, Z+25	; 0x19
     6ba:	22 8d       	ldd	r18, Z+26	; 0x1a
     6bc:	89 2f       	mov	r24, r25
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	80 5c       	subi	r24, 0xC0	; 192
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	82 1b       	sub	r24, r18
     6c6:	91 09       	sbc	r25, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     6c8:	8f 73       	andi	r24, 0x3F	; 63
     6ca:	99 27       	eor	r25, r25
     6cc:	08 95       	ret

000006ce <Serial0_available()>:
Serial0_available():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     6ce:	86 e2       	ldi	r24, 0x26	; 38
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <HardwareSerial::available()>
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	89 2b       	or	r24, r25
     6da:	09 f4       	brne	.+2      	; 0x6de <Serial0_available()+0x10>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     6de:	82 2f       	mov	r24, r18
     6e0:	08 95       	ret

000006e2 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     6e2:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     6e4:	a4 8d       	ldd	r26, Z+28	; 0x1c
     6e6:	a8 0f       	add	r26, r24
     6e8:	b9 2f       	mov	r27, r25
     6ea:	b1 1d       	adc	r27, r1
     6ec:	a3 5a       	subi	r26, 0xA3	; 163
     6ee:	bf 4f       	sbci	r27, 0xFF	; 255
     6f0:	2c 91       	ld	r18, X
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     6f2:	84 8d       	ldd	r24, Z+28	; 0x1c
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	8f 73       	andi	r24, 0x3F	; 63
     6fa:	99 27       	eor	r25, r25
     6fc:	84 8f       	std	Z+28, r24	; 0x1c
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     6fe:	a6 89       	ldd	r26, Z+22	; 0x16
     700:	b7 89       	ldd	r27, Z+23	; 0x17
     702:	2c 93       	st	X, r18
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     704:	a0 89       	ldd	r26, Z+16	; 0x10
     706:	b1 89       	ldd	r27, Z+17	; 0x11
     708:	8c 91       	ld	r24, X
     70a:	83 70       	andi	r24, 0x03	; 3
     70c:	80 64       	ori	r24, 0x40	; 64
     70e:	8c 93       	st	X, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     710:	93 8d       	ldd	r25, Z+27	; 0x1b
     712:	84 8d       	ldd	r24, Z+28	; 0x1c
     714:	98 13       	cpse	r25, r24
     716:	06 c0       	rjmp	.+12     	; 0x724 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     718:	02 88       	ldd	r0, Z+18	; 0x12
     71a:	f3 89       	ldd	r31, Z+19	; 0x13
     71c:	e0 2d       	mov	r30, r0
     71e:	80 81       	ld	r24, Z
     720:	8f 7d       	andi	r24, 0xDF	; 223
     722:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     724:	08 95       	ret

00000726 <HardwareSerial::write(unsigned char)>:
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	88 8f       	std	Y+24, r24	; 0x18
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     738:	9b 8d       	ldd	r25, Y+27	; 0x1b
     73a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     73c:	98 13       	cpse	r25, r24
     73e:	1a c0       	rjmp	.+52     	; 0x774 <HardwareSerial::write(unsigned char)+0x4e>
     740:	e8 89       	ldd	r30, Y+16	; 0x10
     742:	f9 89       	ldd	r31, Y+17	; 0x11
     744:	80 81       	ld	r24, Z
     746:	85 ff       	sbrs	r24, 5
     748:	15 c0       	rjmp	.+42     	; 0x774 <HardwareSerial::write(unsigned char)+0x4e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     74a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     74c:	f8 94       	cli
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     74e:	ee 89       	ldd	r30, Y+22	; 0x16
     750:	ff 89       	ldd	r31, Y+23	; 0x17
     752:	60 83       	st	Z, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     754:	e8 89       	ldd	r30, Y+16	; 0x10
     756:	f9 89       	ldd	r31, Y+17	; 0x11
     758:	80 81       	ld	r24, Z
     75a:	83 70       	andi	r24, 0x03	; 3
     75c:	80 64       	ori	r24, 0x40	; 64
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     75e:	80 83       	st	Z, r24
__iRestore():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     760:	9f bf       	out	0x3f, r25	; 63
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret
     774:	f6 2e       	mov	r15, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     776:	0b 8d       	ldd	r16, Y+27	; 0x1b
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	0f 5f       	subi	r16, 0xFF	; 255
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	0f 73       	andi	r16, 0x3F	; 63
     780:	11 27       	eor	r17, r17
     782:	e0 2e       	mov	r14, r16
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     784:	8c 8d       	ldd	r24, Y+28	; 0x1c
     786:	8e 11       	cpse	r24, r14
     788:	0c c0       	rjmp	.+24     	; 0x7a2 <HardwareSerial::write(unsigned char)+0x7c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	07 fc       	sbrc	r0, 7
     78e:	fa cf       	rjmp	.-12     	; 0x784 <HardwareSerial::write(unsigned char)+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     790:	e8 89       	ldd	r30, Y+16	; 0x10
     792:	f9 89       	ldd	r31, Y+17	; 0x11
     794:	80 81       	ld	r24, Z
     796:	85 ff       	sbrs	r24, 5
     798:	f5 cf       	rjmp	.-22     	; 0x784 <HardwareSerial::write(unsigned char)+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     79a:	ce 01       	movw	r24, r28
     79c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <HardwareSerial::_tx_udr_empty_irq()>
     7a0:	f1 cf       	rjmp	.-30     	; 0x784 <HardwareSerial::write(unsigned char)+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7a2:	eb 8d       	ldd	r30, Y+27	; 0x1b
     7a4:	ec 0f       	add	r30, r28
     7a6:	fd 2f       	mov	r31, r29
     7a8:	f1 1d       	adc	r31, r1
     7aa:	e3 5a       	subi	r30, 0xA3	; 163
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	f0 82       	st	Z, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7b0:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7b2:	f8 94       	cli
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     7b4:	0b 8f       	std	Y+27, r16	; 0x1b
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     7b6:	ea 89       	ldd	r30, Y+18	; 0x12
     7b8:	fb 89       	ldd	r31, Y+19	; 0x13
     7ba:	80 81       	ld	r24, Z
     7bc:	80 62       	ori	r24, 0x20	; 32
     7be:	cf cf       	rjmp	.-98     	; 0x75e <HardwareSerial::write(unsigned char)+0x38>

000007c0 <HardwareSerial::flush()>:
flush():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7c6:	88 8d       	ldd	r24, Y+24	; 0x18
     7c8:	88 23       	and	r24, r24
     7ca:	b9 f0       	breq	.+46     	; 0x7fa <HardwareSerial::flush()+0x3a>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7cc:	aa 89       	ldd	r26, Y+18	; 0x12
     7ce:	bb 89       	ldd	r27, Y+19	; 0x13
     7d0:	e8 89       	ldd	r30, Y+16	; 0x10
     7d2:	f9 89       	ldd	r31, Y+17	; 0x11
     7d4:	8c 91       	ld	r24, X
     7d6:	85 fd       	sbrc	r24, 5
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <HardwareSerial::flush()+0x20>
     7da:	80 81       	ld	r24, Z
     7dc:	86 fd       	sbrc	r24, 6
     7de:	0d c0       	rjmp	.+26     	; 0x7fa <HardwareSerial::flush()+0x3a>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	07 fc       	sbrc	r0, 7
     7e4:	f7 cf       	rjmp	.-18     	; 0x7d4 <HardwareSerial::flush()+0x14>
     7e6:	8c 91       	ld	r24, X
     7e8:	85 ff       	sbrs	r24, 5
     7ea:	f2 cf       	rjmp	.-28     	; 0x7d0 <HardwareSerial::flush()+0x10>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     7ec:	80 81       	ld	r24, Z
     7ee:	85 ff       	sbrs	r24, 5
     7f0:	ed cf       	rjmp	.-38     	; 0x7cc <HardwareSerial::flush()+0xc>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     7f2:	ce 01       	movw	r24, r28
     7f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <HardwareSerial::_tx_udr_empty_irq()>
     7f8:	e9 cf       	rjmp	.-46     	; 0x7cc <HardwareSerial::flush()+0xc>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <serialEventRun()>:
serialEventRun():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	89 2b       	or	r24, r25
     806:	29 f0       	breq	.+10     	; 0x812 <serialEventRun()+0x12>
     808:	0e 94 67 03 	call	0x6ce	; 0x6ce <Serial0_available()>
     80c:	81 11       	cpse	r24, r1
     80e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	89 2b       	or	r24, r25
     818:	49 f0       	breq	.+18     	; 0x82c <serialEventRun()+0x2c>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	89 2b       	or	r24, r25
     820:	29 f0       	breq	.+10     	; 0x82c <serialEventRun()+0x2c>
     822:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     826:	81 11       	cpse	r24, r1
     828:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     82c:	08 95       	ret

0000082e <motorRouter::setPC(int) [clone .isra.6]>:
_ZN11motorRouter5setPCEi.isra.6():
/home/stend/Документы/stend/hardware/motor_regulator.h:36

private:

  void setPC(int value) {
    
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
     82e:	95 b3       	in	r25, 0x15	; 21
     830:	90 7f       	andi	r25, 0xF0	; 240
     832:	95 bb       	out	0x15, r25	; 21
/home/stend/Документы/stend/hardware/motor_regulator.h:37
    PORTC |= (value & 0x0F);
     834:	95 b3       	in	r25, 0x15	; 21
     836:	8f 70       	andi	r24, 0x0F	; 15
     838:	89 2b       	or	r24, r25
     83a:	85 bb       	out	0x15, r24	; 21
/home/stend/Документы/stend/hardware/motor_regulator.h:38
  }
     83c:	08 95       	ret

0000083e <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.12] [clone .constprop.59]>:
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.12():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:137
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
        return t;
    }

    template< typename T > const T &put( int idx, const T &t ){
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:140
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     846:	18 81       	ld	r17, Y
operator*():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <eeprom_read_byte>
update():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     850:	18 17       	cp	r17, r24
     852:	29 f0       	breq	.+10     	; 0x85e <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.12] [clone .constprop.59]+0x20>
_ZN5EERefaSEh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     854:	61 2f       	mov	r22, r17
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <eeprom_write_byte>
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.12():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:140
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     85e:	19 81       	ldd	r17, Y+1	; 0x01
operator*():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <eeprom_read_byte>
update():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     868:	18 17       	cp	r17, r24
     86a:	29 f0       	breq	.+10     	; 0x876 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.12] [clone .constprop.59]+0x38>
_ZN5EERefaSEh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     86c:	61 2f       	mov	r22, r17
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <eeprom_write_byte>
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.12():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:142
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
        return t;
    }
     876:	ce 01       	movw	r24, r28
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>:
_ZN5Print5writeEPKc.part.2():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     880:	fc 01       	movw	r30, r24
     882:	01 90       	ld	r0, Z+
     884:	00 20       	and	r0, r0
     886:	e9 f7       	brne	.-6      	; 0x882 <Print::write(char const*) [clone .part.2] [clone .constprop.52]+0x2>
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	af 01       	movw	r20, r30
     88c:	48 1b       	sub	r20, r24
     88e:	59 0b       	sbc	r21, r25
     890:	bc 01       	movw	r22, r24
     892:	86 e2       	ldi	r24, 0x26	; 38
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	0c 94 cb 02 	jmp	0x596	; 0x596 <Print::write(unsigned char const*, unsigned int)>

0000089a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>:
printNumber():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	a1 97       	sbiw	r28, 0x21	; 33
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     8ba:	19 a2       	std	Y+33, r1	; 0x21
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     8bc:	42 30       	cpi	r20, 0x02	; 2
     8be:	08 f4       	brcc	.+2      	; 0x8c2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x28>
     8c0:	4a e0       	ldi	r20, 0x0A	; 10
     8c2:	8e 01       	movw	r16, r28
     8c4:	0f 5d       	subi	r16, 0xDF	; 223
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     8c8:	84 2e       	mov	r8, r20
     8ca:	91 2c       	mov	r9, r1
     8cc:	b1 2c       	mov	r11, r1
     8ce:	a1 2c       	mov	r10, r1
     8d0:	a5 01       	movw	r20, r10
     8d2:	94 01       	movw	r18, r8
     8d4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__udivmodsi4>
     8d8:	e6 2f       	mov	r30, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
     8da:	b9 01       	movw	r22, r18
     8dc:	ca 01       	movw	r24, r20
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     8de:	ea 30       	cpi	r30, 0x0A	; 10
     8e0:	f4 f4       	brge	.+60     	; 0x91e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x84>
     8e2:	e0 5d       	subi	r30, 0xD0	; 208
     8e4:	d8 01       	movw	r26, r16
     8e6:	ee 93       	st	-X, r30
     8e8:	8d 01       	movw	r16, r26
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
     8ea:	23 2b       	or	r18, r19
     8ec:	24 2b       	or	r18, r20
     8ee:	25 2b       	or	r18, r21
     8f0:	79 f7       	brne	.-34     	; 0x8d0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x36>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	80 e0       	ldi	r24, 0x00	; 0
write():
     8f6:	10 97       	sbiw	r26, 0x00	; 0
     8f8:	19 f0       	breq	.+6      	; 0x900 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x66>
     8fa:	cd 01       	movw	r24, r26
     8fc:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
printNumber():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     900:	a1 96       	adiw	r28, 0x21	; 33
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	8f 90       	pop	r8
     91c:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     91e:	e9 5c       	subi	r30, 0xC9	; 201
     920:	e1 cf       	rjmp	.-62     	; 0x8e4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]+0x4a>

00000922 <Print::println(int, int) [clone .constprop.44]>:
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:159
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
print():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     92e:	6c 01       	movw	r12, r24
     930:	99 0f       	add	r25, r25
     932:	ee 08       	sbc	r14, r14
     934:	ff 08       	sbc	r15, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     936:	f7 fe       	sbrs	r15, 7
     938:	1f c0       	rjmp	.+62     	; 0x978 <Print::println(int, int) [clone .constprop.44]+0x56>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     93a:	6d e2       	ldi	r22, 0x2D	; 45
     93c:	86 e2       	ldi	r24, 0x26	; 38
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 93 03 	call	0x726	; 0x726 <HardwareSerial::write(unsigned char)>
     944:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     946:	66 27       	eor	r22, r22
     948:	77 27       	eor	r23, r23
     94a:	cb 01       	movw	r24, r22
     94c:	6c 19       	sub	r22, r12
     94e:	7d 09       	sbc	r23, r13
     950:	8e 09       	sbc	r24, r14
     952:	9f 09       	sbc	r25, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
     954:	4a e0       	ldi	r20, 0x0A	; 10
     956:	0e 94 4d 04 	call	0x89a	; 0x89a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
     95a:	c8 0f       	add	r28, r24
     95c:	d9 1f       	adc	r29, r25
write():
     95e:	8d e2       	ldi	r24, 0x2D	; 45
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:164
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     966:	8c 0f       	add	r24, r28
     968:	9d 1f       	adc	r25, r29
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret
print():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     978:	4a e0       	ldi	r20, 0x0A	; 10
     97a:	c7 01       	movw	r24, r14
     97c:	b6 01       	movw	r22, r12
     97e:	0e 94 4d 04 	call	0x89a	; 0x89a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
     982:	ec 01       	movw	r28, r24
     984:	ec cf       	rjmp	.-40     	; 0x95e <Print::println(int, int) [clone .constprop.44]+0x3c>

00000986 <Print::println(char const*) [clone .constprop.40]>:
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
write():
     98a:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
     98e:	ec 01       	movw	r28, r24
     990:	8d e2       	ldi	r24, 0x2D	; 45
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     998:	8c 0f       	add	r24, r28
     99a:	9d 1f       	adc	r25, r29
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <String::~String()>:
__base_dtor ():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     9a2:	fc 01       	movw	r30, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	11 f0       	breq	.+4      	; 0x9b0 <String::~String()+0xe>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
     9ac:	0c 94 87 10 	jmp	0x210e	; 0x210e <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:126
}
     9b0:	08 95       	ret

000009b2 <String::startsWith(String const&) const [clone .constprop.31]>:
startsWith():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:490
    if (tolower(*p1++) != tolower(*p2++)) return 0;
  } 
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
     9b2:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:492
{
  if (len < s2.len) return 0;
     9b4:	44 81       	ldd	r20, Z+4	; 0x04
     9b6:	55 81       	ldd	r21, Z+5	; 0x05
     9b8:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
     9bc:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
     9c0:	84 17       	cp	r24, r20
     9c2:	95 07       	cpc	r25, r21
     9c4:	80 f0       	brcs	.+32     	; 0x9e6 <String::startsWith(String const&) const [clone .constprop.31]+0x34>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:498
  return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
  if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     9c6:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
     9ca:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	51 f0       	breq	.+20     	; 0x9e6 <String::startsWith(String const&) const [clone .constprop.31]+0x34>
     9d2:	60 81       	ld	r22, Z
     9d4:	71 81       	ldd	r23, Z+1	; 0x01
     9d6:	61 15       	cp	r22, r1
     9d8:	71 05       	cpc	r23, r1
     9da:	29 f0       	breq	.+10     	; 0x9e6 <String::startsWith(String const&) const [clone .constprop.31]+0x34>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:499
  return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     9dc:	0e 94 0a 12 	call	0x2414	; 0x2414 <strncmp>
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	89 2b       	or	r24, r25
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <String::startsWith(String const&) const [clone .constprop.31]+0x36>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:492
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
  if (len < s2.len) return 0;
     9e6:	20 e0       	ldi	r18, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:494
  return startsWith(s2, 0);
}
     9e8:	82 2f       	mov	r24, r18
     9ea:	08 95       	ret

000009ec <String::equals(char const*) const [clone .constprop.29]>:
equals():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:452
  return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
     9ec:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
     9f0:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
     9f4:	23 2b       	or	r18, r19
     9f6:	39 f4       	brne	.+14     	; 0xa06 <String::equals(char const*) const [clone .constprop.29]+0x1a>
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	88 23       	and	r24, r24
     a00:	61 f0       	breq	.+24     	; 0xa1a <String::equals(char const*) const [clone .constprop.29]+0x2e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:454
  if (cstr == NULL) return buffer[0] == 0;
  return strcmp(buffer, cstr) == 0;
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	0a c0       	rjmp	.+20     	; 0xa1a <String::equals(char const*) const [clone .constprop.29]+0x2e>
     a06:	bc 01       	movw	r22, r24
     a08:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
     a0c:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     a10:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strcmp>
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	89 2b       	or	r24, r25
     a18:	a1 f7       	brne	.-24     	; 0xa02 <String::equals(char const*) const [clone .constprop.29]+0x16>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:455
}
     a1a:	82 2f       	mov	r24, r18
     a1c:	08 95       	ret

00000a1e <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]>:
resetAndRereadBuffer():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:136
  return m_resRaw;
}

void adcPIDWorker::resetAndRereadBuffer() {

  memset(m_buff, 0, sizeof(int16_t) * ADC_PID_BUFF_SIZE);
     a1e:	e2 e2       	ldi	r30, 0x22	; 34
     a20:	f3 e0       	ldi	r31, 0x03	; 3
     a22:	84 e1       	ldi	r24, 0x14	; 20
     a24:	df 01       	movw	r26, r30
     a26:	1d 92       	st	X+, r1
     a28:	8a 95       	dec	r24
     a2a:	e9 f7       	brne	.-6      	; 0xa26 <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]+0x8>
read():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:126

adcPIDWorker::adcPIDWorker() {};

int16_t adcPIDWorker::read() {

  ADCSRA |= (1 << ADSC);
     a2c:	36 9a       	sbi	0x06, 6	; 6
/home/stend/Документы/stend/hardware/pid_regulator.cpp:127
  while (!(ADCSRA & (1 << ADSC)));
     a2e:	36 9b       	sbis	0x06, 6	; 6
     a30:	fe cf       	rjmp	.-4      	; 0xa2e <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]+0x10>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:129

  m_resRaw = (uint16_t)(ADCL | ADCH << 8);
     a32:	94 b1       	in	r25, 0x04	; 4
     a34:	85 b1       	in	r24, 0x05	; 5
     a36:	89 27       	eor	r24, r25
     a38:	98 27       	eor	r25, r24
     a3a:	89 27       	eor	r24, r25
     a3c:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <pid+0x35>
     a40:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <pid+0x34>
resetAndRereadBuffer():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:139
void adcPIDWorker::resetAndRereadBuffer() {

  memset(m_buff, 0, sizeof(int16_t) * ADC_PID_BUFF_SIZE);

  for(uint8_t i = 0; i < ADC_PID_BUFF_SIZE; i++) {
    m_buff[i] = read();
     a44:	81 93       	st	Z+, r24
     a46:	91 93       	st	Z+, r25
/home/stend/Документы/stend/hardware/pid_regulator.cpp:138

void adcPIDWorker::resetAndRereadBuffer() {

  memset(m_buff, 0, sizeof(int16_t) * ADC_PID_BUFF_SIZE);

  for(uint8_t i = 0; i < ADC_PID_BUFF_SIZE; i++) {
     a48:	b3 e0       	ldi	r27, 0x03	; 3
     a4a:	e6 33       	cpi	r30, 0x36	; 54
     a4c:	fb 07       	cpc	r31, r27
     a4e:	71 f7       	brne	.-36     	; 0xa2c <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]+0xe>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:141
    m_buff[i] = read();
  }
}
     a50:	08 95       	ret

00000a52 <adcPIDWorker::readBufferized(bool) [clone .constprop.13]>:
readBufferized():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:172
  ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3) & ~(1 << MUX4);
}

int16_t adcPIDWorker::readBufferized(bool diffRead) {
  
  resetAndRereadBuffer();
     a52:	0e 94 0f 05 	call	0xa1e	; 0xa1e <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:173
  resetAndRereadBuffer();
     a56:	0e 94 0f 05 	call	0xa1e	; 0xa1e <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:174
  resetAndRereadBuffer();
     a5a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.14]>
     a5e:	e6 e2       	ldi	r30, 0x26	; 38
     a60:	f3 e0       	ldi	r31, 0x03	; 3
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	dc 01       	movw	r26, r24
/home/stend/Документы/stend/hardware/pid_regulator.cpp:180

  m_sum = 0;
  m_bufferizedValue = 0;

  for(uint8_t i = 2; i < ADC_PID_BUFF_SIZE; i++) {
    m_sum += m_buff[i];
     a68:	41 91       	ld	r20, Z+
     a6a:	51 91       	ld	r21, Z+
     a6c:	05 2e       	mov	r0, r21
     a6e:	00 0c       	add	r0, r0
     a70:	66 0b       	sbc	r22, r22
     a72:	77 0b       	sbc	r23, r23
     a74:	84 0f       	add	r24, r20
     a76:	95 1f       	adc	r25, r21
     a78:	a6 1f       	adc	r26, r22
     a7a:	b7 1f       	adc	r27, r23
/home/stend/Документы/stend/hardware/pid_regulator.cpp:179
  resetAndRereadBuffer();

  m_sum = 0;
  m_bufferizedValue = 0;

  for(uint8_t i = 2; i < ADC_PID_BUFF_SIZE; i++) {
     a7c:	23 e0       	ldi	r18, 0x03	; 3
     a7e:	e6 33       	cpi	r30, 0x36	; 54
     a80:	f2 07       	cpc	r31, r18
     a82:	91 f7       	brne	.-28     	; 0xa68 <adcPIDWorker::readBufferized(bool) [clone .constprop.13]+0x16>
     a84:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <pid+0x30>
     a88:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <pid+0x31>
     a8c:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <pid+0x32>
     a90:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <pid+0x33>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:183
    m_sum += m_buff[i];
  }

  m_bufferizedValue = (m_sum >> 3);
     a94:	23 e0       	ldi	r18, 0x03	; 3
     a96:	b5 95       	asr	r27
     a98:	a7 95       	ror	r26
     a9a:	97 95       	ror	r25
     a9c:	87 95       	ror	r24
     a9e:	2a 95       	dec	r18
     aa0:	d1 f7       	brne	.-12     	; 0xa96 <adcPIDWorker::readBufferized(bool) [clone .constprop.13]+0x44>
     aa2:	9c 01       	movw	r18, r24
     aa4:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <pid+0x37>
     aa8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <pid+0x36>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:189

  if(diffRead == ADC_PID_REGULAR_READ) {
    return m_bufferizedValue;    
  }

  if(m_bufferizedValue > 512) {
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	42 e0       	ldi	r20, 0x02	; 2
     ab0:	94 07       	cpc	r25, r20
     ab2:	24 f0       	brlt	.+8      	; 0xabc <adcPIDWorker::readBufferized(bool) [clone .constprop.13]+0x6a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:190
    return 512 - m_bufferizedValue; 
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	32 e0       	ldi	r19, 0x02	; 2
     ab8:	28 1b       	sub	r18, r24
     aba:	39 0b       	sbc	r19, r25
/home/stend/Документы/stend/hardware/pid_regulator.cpp:194
  }

  return m_bufferizedValue;
}
     abc:	c9 01       	movw	r24, r18
     abe:	08 95       	ret

00000ac0 <pidRegulator::readCurrentADCDiff() const [clone .constprop.9]>:
readCurrentADCDiff():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:88
  keepThermalDelta(0);
}

stend::ADC_diff_t pidRegulator::readCurrentADCDiff() const {

  if(m_warmerData.resolution == ADC_RESOLUTION_x1) {
     ac0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <pid+0x4>
     ac4:	81 11       	cpse	r24, r1
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <pidRegulator::readCurrentADCDiff() const [clone .constprop.9]+0x14>
setResolutionX1():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:153
}

void adcPIDWorker::setResolutionX1() const {
  
  //ADC3 - ABC2 x 1 (MUX[4:0] = 0b11011)
  ADMUX &= ~(1 << MUX2);
     ac8:	3a 98       	cbi	0x07, 2	; 7
/home/stend/Документы/stend/hardware/pid_regulator.cpp:154
  ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << MUX3) | (1 << MUX4);
     aca:	87 b1       	in	r24, 0x07	; 7
     acc:	8b 61       	ori	r24, 0x1B	; 27
setResolutionX10():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:161

void adcPIDWorker::setResolutionX10() const {
  
  //ADC3 - ABC2 x 10 (MUX[4:0] = 0b01101)
  ADMUX &= ~(1 << MUX1) & ~(1 << MUX4);
  ADMUX |= (1 << MUX0) | (1 << MUX2) | (1 << MUX3);
     ace:	87 b9       	out	0x07, r24	; 7
readCurrentADCDiff():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:95
    m_pidADC.setResolutionX1();
    return m_pidADC.readBufferized(PID_DIFFERENTIAL_READ);
  }
  
  m_pidADC.setResolutionX10();
  return m_pidADC.readBufferized(PID_DIFFERENTIAL_READ);
     ad0:	0c 94 29 05 	jmp	0xa52	; 0xa52 <adcPIDWorker::readBufferized(bool) [clone .constprop.13]>
setResolutionX10():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:160
}

void adcPIDWorker::setResolutionX10() const {
  
  //ADC3 - ABC2 x 10 (MUX[4:0] = 0b01101)
  ADMUX &= ~(1 << MUX1) & ~(1 << MUX4);
     ad4:	87 b1       	in	r24, 0x07	; 7
     ad6:	8d 7e       	andi	r24, 0xED	; 237
     ad8:	87 b9       	out	0x07, r24	; 7
/home/stend/Документы/stend/hardware/pid_regulator.cpp:161
  ADMUX |= (1 << MUX0) | (1 << MUX2) | (1 << MUX3);
     ada:	87 b1       	in	r24, 0x07	; 7
     adc:	8d 60       	ori	r24, 0x0D	; 13
     ade:	f7 cf       	rjmp	.-18     	; 0xace <pidRegulator::readCurrentADCDiff() const [clone .constprop.9]+0xe>

00000ae0 <motorRouter::stop() [clone .isra.11]>:
_ZN11motorRouter4stopEv.isra.11():
/home/stend/Документы/stend/hardware/motor_regulator.h:123
    return m_stepsCounter;
  }

  void stop() {
    
    setPC(0b0000);
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 17 04 	call	0x82e	; 0x82e <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	89 ef       	ldi	r24, 0xF9	; 249
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	90 40       	sbci	r25, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <motorRouter::stop() [clone .isra.11]+0xe>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <motorRouter::stop() [clone .isra.11]+0x18>
     af8:	00 00       	nop
_ZN11motorRouter4stopEv.isra.11():
/home/stend/Документы/stend/hardware/motor_regulator.h:125
    _delay_ms(TACKT);
  }
     afa:	08 95       	ret

00000afc <String::reserve(unsigned int)>:
reserve():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     b06:	88 81       	ld	r24, Y
     b08:	99 81       	ldd	r25, Y+1	; 0x01
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	59 f0       	breq	.+22     	; 0xb24 <String::reserve(unsigned int)+0x28>
     b0e:	2a 81       	ldd	r18, Y+2	; 0x02
     b10:	3b 81       	ldd	r19, Y+3	; 0x03
     b12:	26 17       	cp	r18, r22
     b14:	37 07       	cpc	r19, r23
     b16:	30 f0       	brcs	.+12     	; 0xb24 <String::reserve(unsigned int)+0x28>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     b18:	81 e0       	ldi	r24, 0x01	; 1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret
     b24:	8b 01       	movw	r16, r22
changeBuffer():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	0e 94 10 11 	call	0x2220	; 0x2220 <realloc>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	59 f0       	breq	.+22     	; 0xb48 <String::reserve(unsigned int)+0x4c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     b32:	99 83       	std	Y+1, r25	; 0x01
     b34:	88 83       	st	Y, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     b36:	1b 83       	std	Y+3, r17	; 0x03
     b38:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     b3a:	2c 81       	ldd	r18, Y+4	; 0x04
     b3c:	3d 81       	ldd	r19, Y+5	; 0x05
     b3e:	23 2b       	or	r18, r19
     b40:	59 f7       	brne	.-42     	; 0xb18 <String::reserve(unsigned int)+0x1c>
     b42:	fc 01       	movw	r30, r24
     b44:	10 82       	st	Z, r1
     b46:	e8 cf       	rjmp	.-48     	; 0xb18 <String::reserve(unsigned int)+0x1c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	e7 cf       	rjmp	.-50     	; 0xb1a <String::reserve(unsigned int)+0x1e>

00000b4c <String::copy(char const*, unsigned int)>:
copy():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
     b5a:	7b 01       	movw	r14, r22
     b5c:	8a 01       	movw	r16, r20
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:173
  if (!reserve(length)) {
     b5e:	ba 01       	movw	r22, r20
     b60:	0e 94 7e 05 	call	0xafc	; 0xafc <String::reserve(unsigned int)>
     b64:	28 81       	ld	r18, Y
     b66:	39 81       	ldd	r19, Y+1	; 0x01
     b68:	81 11       	cpse	r24, r1
     b6a:	14 c0       	rjmp	.+40     	; 0xb94 <String::copy(char const*, unsigned int)+0x48>
invalidate():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     b6c:	21 15       	cp	r18, r1
     b6e:	31 05       	cpc	r19, r1
     b70:	19 f0       	breq	.+6      	; 0xb78 <String::copy(char const*, unsigned int)+0x2c>
     b72:	c9 01       	movw	r24, r18
     b74:	0e 94 87 10 	call	0x210e	; 0x210e <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     b78:	19 82       	std	Y+1, r1	; 0x01
     b7a:	18 82       	st	Y, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     b7c:	1d 82       	std	Y+5, r1	; 0x05
     b7e:	1c 82       	std	Y+4, r1	; 0x04
     b80:	1b 82       	std	Y+3, r1	; 0x03
     b82:	1a 82       	std	Y+2, r1	; 0x02
copy():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     b84:	ce 01       	movw	r24, r28
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     b94:	1d 83       	std	Y+5, r17	; 0x05
     b96:	0c 83       	std	Y+4, r16	; 0x04
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     b98:	b7 01       	movw	r22, r14
     b9a:	c9 01       	movw	r24, r18
     b9c:	0e 94 03 12 	call	0x2406	; 0x2406 <strcpy>
     ba0:	f1 cf       	rjmp	.-30     	; 0xb84 <String::copy(char const*, unsigned int)+0x38>

00000ba2 <String::String(char const*)>:
_ZN6String4initEv():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     ba2:	fc 01       	movw	r30, r24
     ba4:	11 82       	std	Z+1, r1	; 0x01
     ba6:	10 82       	st	Z, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     ba8:	13 82       	std	Z+3, r1	; 0x03
     baa:	12 82       	std	Z+2, r1	; 0x02
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
     bac:	15 82       	std	Z+5, r1	; 0x05
     bae:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     bb0:	fb 01       	movw	r30, r22
     bb2:	01 90       	ld	r0, Z+
     bb4:	00 20       	and	r0, r0
     bb6:	e9 f7       	brne	.-6      	; 0xbb2 <String::String(char const*)+0x10>
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	af 01       	movw	r20, r30
     bbc:	46 1b       	sub	r20, r22
     bbe:	57 0b       	sbc	r21, r23
     bc0:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <String::copy(char const*, unsigned int)>

00000bc4 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]>:
substring():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:615
    if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
  }
  return found;
}

String String::substring(unsigned int left, unsigned int right) const
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
     bd6:	7b 01       	movw	r14, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:617
{
  if (left > right) {
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	c8 2e       	mov	r12, r24
     bdc:	d1 2c       	mov	r13, r1
     bde:	63 30       	cpi	r22, 0x03	; 3
     be0:	71 05       	cpc	r23, r1
     be2:	20 f4       	brcc	.+8      	; 0xbec <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0x28>
     be4:	6b 01       	movw	r12, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:619
    unsigned int temp = right;
    right = left;
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	e9 2e       	mov	r14, r25
     bea:	f1 2c       	mov	r15, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:622
    left = temp;
  }
  String out;
     bec:	6f e2       	ldi	r22, 0x2F	; 47
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 d1 05 	call	0xba2	; 0xba2 <String::String(char const*)>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:623
  if (left >= len) return out;
     bf6:	00 91 49 03 	lds	r16, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
     bfa:	10 91 4a 03 	lds	r17, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
     bfe:	c0 16       	cp	r12, r16
     c00:	d1 06       	cpc	r13, r17
     c02:	40 f5       	brcc	.+80     	; 0xc54 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0x90>
     c04:	e0 16       	cp	r14, r16
     c06:	f1 06       	cpc	r15, r17
     c08:	08 f4       	brcc	.+2      	; 0xc0c <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0x48>
     c0a:	87 01       	movw	r16, r14
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
     c0c:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <stend::UARTbuffer>
     c10:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     c14:	e0 0f       	add	r30, r16
     c16:	f1 1f       	adc	r31, r17
     c18:	f0 80       	ld	r15, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
     c1a:	10 82       	st	Z, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
     c1c:	60 91 45 03 	lds	r22, 0x0345	; 0x800345 <stend::UARTbuffer>
     c20:	70 91 46 03 	lds	r23, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     c24:	6c 0d       	add	r22, r12
     c26:	7d 1d       	adc	r23, r13
operator=():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     c28:	61 15       	cp	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	e9 f0       	breq	.+58     	; 0xc68 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0xa4>
     c2e:	fb 01       	movw	r30, r22
     c30:	01 90       	ld	r0, Z+
     c32:	00 20       	and	r0, r0
     c34:	e9 f7       	brne	.-6      	; 0xc30 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0x6c>
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	af 01       	movw	r20, r30
     c3a:	46 1b       	sub	r20, r22
     c3c:	57 0b       	sbc	r21, r23
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 a6 05 	call	0xb4c	; 0xb4c <String::copy(char const*, unsigned int)>
substring():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
     c44:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
     c48:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     c4c:	08 0f       	add	r16, r24
     c4e:	19 1f       	adc	r17, r25
     c50:	f8 01       	movw	r30, r16
     c52:	f0 82       	st	Z, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:630
  return out;
}
     c54:	ce 01       	movw	r24, r28
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	08 95       	ret
invalidate():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     c68:	88 81       	ld	r24, Y
     c6a:	99 81       	ldd	r25, Y+1	; 0x01
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	11 f0       	breq	.+4      	; 0xc74 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0xb0>
     c70:	0e 94 87 10 	call	0x210e	; 0x210e <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     c74:	19 82       	std	Y+1, r1	; 0x01
     c76:	18 82       	st	Y, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     c78:	1d 82       	std	Y+5, r1	; 0x05
     c7a:	1c 82       	std	Y+4, r1	; 0x04
     c7c:	1b 82       	std	Y+3, r1	; 0x03
     c7e:	1a 82       	std	Y+2, r1	; 0x02
     c80:	e1 cf       	rjmp	.-62     	; 0xc44 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]+0x80>

00000c82 <__vector_16>:
__vector_16():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     c98:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer0_millis>
     c9c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer0_millis+0x1>
     ca0:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer0_millis+0x2>
     ca4:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer0_millis+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     ca8:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <timer0_fract>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     cac:	23 e0       	ldi	r18, 0x03	; 3
     cae:	23 0f       	add	r18, r19
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     cb0:	2d 37       	cpi	r18, 0x7D	; 125
     cb2:	68 f1       	brcs	.+90     	; 0xd0e <__vector_16+0x8c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     cb4:	26 e8       	ldi	r18, 0x86	; 134
     cb6:	23 0f       	add	r18, r19
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     cb8:	02 96       	adiw	r24, 0x02	; 2
     cba:	a1 1d       	adc	r26, r1
     cbc:	b1 1d       	adc	r27, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     cbe:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <timer0_fract>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     cc2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <timer0_millis>
     cc6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <timer0_millis+0x1>
     cca:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <timer0_millis+0x2>
     cce:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <timer0_millis+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     cd2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timer0_overflow_count>
     cd6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timer0_overflow_count+0x1>
     cda:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timer0_overflow_count+0x2>
     cde:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timer0_overflow_count+0x3>
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	a1 1d       	adc	r26, r1
     ce6:	b1 1d       	adc	r27, r1
     ce8:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <timer0_overflow_count>
     cec:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <timer0_overflow_count+0x1>
     cf0:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <timer0_overflow_count+0x2>
     cf4:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <timer0_overflow_count+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	a1 1d       	adc	r26, r1
     d12:	b1 1d       	adc	r27, r1
     d14:	d4 cf       	rjmp	.-88     	; 0xcbe <__vector_16+0x3c>

00000d16 <__vector_19>:
__vector_19():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	0b b6       	in	r0, 0x3b	; 59
     d22:	0f 92       	push	r0
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     d3c:	86 e2       	ldi	r24, 0x26	; 38
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <HardwareSerial::_tx_udr_empty_irq()>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_18>:
__vector_18():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	2f 93       	push	r18
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
_rx_complete_irq():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d82:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <Serial+0x10>
     d86:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <Serial+0x11>
     d8a:	80 81       	ld	r24, Z
     d8c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <Serial+0x16>
     d90:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <Serial+0x17>
     d94:	82 fd       	sbrc	r24, 2
     d96:	1d c0       	rjmp	.+58     	; 0xdd2 <__vector_18+0x68>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d98:	90 81       	ld	r25, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d9a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <Serial+0x19>
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	8f 73       	andi	r24, 0x3F	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     da2:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <Serial+0x1a>
     da6:	82 17       	cp	r24, r18
     da8:	41 f0       	breq	.+16     	; 0xdba <__vector_18+0x50>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     daa:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <Serial+0x19>
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ea 5d       	subi	r30, 0xDA	; 218
     db2:	fd 4f       	sbci	r31, 0xFD	; 253
     db4:	95 8f       	std	Z+29, r25	; 0x1d
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     db6:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <Serial+0x19>
__vector_18():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti
_rx_complete_irq():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     dd2:	80 81       	ld	r24, Z
     dd4:	f2 cf       	rjmp	.-28     	; 0xdba <__vector_18+0x50>

00000dd6 <global constructors keyed to 65535_0_MCP_DAC.cpp.o.2601>:
_GLOBAL__I_65535_0_MCP_DAC.cpp.o.2601():
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f2 e0       	ldi	r31, 0x02	; 2
     dda:	13 82       	std	Z+3, r1	; 0x03
     ddc:	12 82       	std	Z+2, r1	; 0x02
     dde:	88 ee       	ldi	r24, 0xE8	; 232
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	84 83       	std	Z+4, r24	; 0x04
     de8:	95 83       	std	Z+5, r25	; 0x05
     dea:	a6 83       	std	Z+6, r26	; 0x06
     dec:	b7 83       	std	Z+7, r27	; 0x07
     dee:	8f e1       	ldi	r24, 0x1F	; 31
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
     df6:	80 e9       	ldi	r24, 0x90	; 144
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	95 87       	std	Z+13, r25	; 0x0d
     dfc:	84 87       	std	Z+12, r24	; 0x0c
     dfe:	89 e2       	ldi	r24, 0x29	; 41
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	97 87       	std	Z+15, r25	; 0x0f
     e04:	86 87       	std	Z+14, r24	; 0x0e
     e06:	8b e2       	ldi	r24, 0x2B	; 43
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	91 8b       	std	Z+17, r25	; 0x11
     e0c:	80 8b       	std	Z+16, r24	; 0x10
     e0e:	8a e2       	ldi	r24, 0x2A	; 42
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	93 8b       	std	Z+19, r25	; 0x13
     e14:	82 8b       	std	Z+18, r24	; 0x12
     e16:	85 e9       	ldi	r24, 0x95	; 149
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	95 8b       	std	Z+21, r25	; 0x15
     e1c:	84 8b       	std	Z+20, r24	; 0x14
     e1e:	8c e2       	ldi	r24, 0x2C	; 44
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	97 8b       	std	Z+23, r25	; 0x17
     e24:	86 8b       	std	Z+22, r24	; 0x16
     e26:	11 8e       	std	Z+25, r1	; 0x19
     e28:	12 8e       	std	Z+26, r1	; 0x1a
     e2a:	13 8e       	std	Z+27, r1	; 0x1b
     e2c:	14 8e       	std	Z+28, r1	; 0x1c
     e2e:	6f e2       	ldi	r22, 0x2F	; 47
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	85 e4       	ldi	r24, 0x45	; 69
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	0e 94 d1 05 	call	0xba2	; 0xba2 <String::String(char const*)>
     e3a:	e6 e0       	ldi	r30, 0x06	; 6
     e3c:	f3 e0       	ldi	r31, 0x03	; 3
     e3e:	11 82       	std	Z+1, r1	; 0x01
     e40:	10 82       	st	Z, r1
     e42:	13 82       	std	Z+3, r1	; 0x03
     e44:	12 82       	std	Z+2, r1	; 0x02
     e46:	14 82       	std	Z+4, r1	; 0x04
     e48:	15 82       	std	Z+5, r1	; 0x05
     e4a:	16 82       	std	Z+6, r1	; 0x06
     e4c:	17 82       	std	Z+7, r1	; 0x07
     e4e:	10 86       	std	Z+8, r1	; 0x08
     e50:	11 86       	std	Z+9, r1	; 0x09
     e52:	12 86       	std	Z+10, r1	; 0x0a
     e54:	13 86       	std	Z+11, r1	; 0x0b
     e56:	14 86       	std	Z+12, r1	; 0x0c
     e58:	15 86       	std	Z+13, r1	; 0x0d
     e5a:	16 86       	std	Z+14, r1	; 0x0e
     e5c:	17 86       	std	Z+15, r1	; 0x0f
     e5e:	10 8a       	std	Z+16, r1	; 0x10
     e60:	11 8a       	std	Z+17, r1	; 0x11
     e62:	12 8a       	std	Z+18, r1	; 0x12
     e64:	13 8a       	std	Z+19, r1	; 0x13
     e66:	14 8a       	std	Z+20, r1	; 0x14
     e68:	15 8a       	std	Z+21, r1	; 0x15
     e6a:	16 8a       	std	Z+22, r1	; 0x16
     e6c:	10 8e       	std	Z+24, r1	; 0x18
     e6e:	17 8a       	std	Z+23, r1	; 0x17
     e70:	12 8e       	std	Z+26, r1	; 0x1a
     e72:	11 8e       	std	Z+25, r1	; 0x19
     e74:	11 ae       	std	Z+57, r1	; 0x39
     e76:	10 ae       	std	Z+56, r1	; 0x38
     e78:	13 ae       	std	Z+59, r1	; 0x3b
     e7a:	12 ae       	std	Z+58, r1	; 0x3a
     e7c:	14 ae       	std	Z+60, r1	; 0x3c
     e7e:	15 ae       	std	Z+61, r1	; 0x3d
     e80:	16 ae       	std	Z+62, r1	; 0x3e
     e82:	e3 ed       	ldi	r30, 0xD3	; 211
     e84:	f2 e0       	ldi	r31, 0x02	; 2
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	93 83       	std	Z+3, r25	; 0x03
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	54 e2       	ldi	r21, 0x24	; 36
     e8e:	64 ef       	ldi	r22, 0xF4	; 244
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	45 83       	std	Z+5, r20	; 0x05
     e94:	56 83       	std	Z+6, r21	; 0x06
     e96:	67 83       	std	Z+7, r22	; 0x07
     e98:	70 87       	std	Z+8, r23	; 0x08
     e9a:	11 8a       	std	Z+17, r1	; 0x11
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	82 8b       	std	Z+18, r24	; 0x12
     ea0:	20 e5       	ldi	r18, 0x50	; 80
     ea2:	25 8b       	std	Z+21, r18	; 0x15
     ea4:	16 8a       	std	Z+22, r1	; 0x16
     ea6:	23 ec       	ldi	r18, 0xC3	; 195
     ea8:	32 e0       	ldi	r19, 0x02	; 2
     eaa:	34 8b       	std	Z+20, r19	; 0x14
     eac:	23 8b       	std	Z+19, r18	; 0x13
     eae:	90 83       	st	Z, r25
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	12 82       	std	Z+2, r1	; 0x02
     eb4:	84 83       	std	Z+4, r24	; 0x04
     eb6:	81 87       	std	Z+9, r24	; 0x09
     eb8:	80 8b       	std	Z+16, r24	; 0x10
     eba:	15 86       	std	Z+13, r1	; 0x0d
     ebc:	14 86       	std	Z+12, r1	; 0x0c
     ebe:	17 86       	std	Z+15, r1	; 0x0f
     ec0:	16 86       	std	Z+14, r1	; 0x0e
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	9f e0       	ldi	r25, 0x0F	; 15
     ec6:	93 87       	std	Z+11, r25	; 0x0b
     ec8:	82 87       	std	Z+10, r24	; 0x0a
     eca:	17 8a       	std	Z+23, r1	; 0x17
     ecc:	10 8e       	std	Z+24, r1	; 0x18
     ece:	8d e0       	ldi	r24, 0x0D	; 13
     ed0:	e6 e0       	ldi	r30, 0x06	; 6
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	ac ee       	ldi	r26, 0xEC	; 236
     ed6:	b2 e0       	ldi	r27, 0x02	; 2
     ed8:	01 90       	ld	r0, Z+
     eda:	0d 92       	st	X+, r0
     edc:	8a 95       	dec	r24
     ede:	e1 f7       	brne	.-8      	; 0xed8 <global constructors keyed to 65535_0_MCP_DAC.cpp.o.2601+0x102>
     ee0:	8d e0       	ldi	r24, 0x0D	; 13
     ee2:	e6 e0       	ldi	r30, 0x06	; 6
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	a9 ef       	ldi	r26, 0xF9	; 249
     ee8:	b2 e0       	ldi	r27, 0x02	; 2
     eea:	01 90       	ld	r0, Z+
     eec:	0d 92       	st	X+, r0
     eee:	8a 95       	dec	r24
     ef0:	e1 f7       	brne	.-8      	; 0xeea <global constructors keyed to 65535_0_MCP_DAC.cpp.o.2601+0x114>
     ef2:	e4 ec       	ldi	r30, 0xC4	; 196
     ef4:	f2 e0       	ldi	r31, 0x02	; 2
     ef6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__malloc_margin+0xf>
     efa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__malloc_margin+0x10>
     efe:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <__malloc_margin+0x11>
     f02:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <__malloc_margin+0x12>
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	a2 83       	std	Z+2, r26	; 0x02
     f0c:	b3 83       	std	Z+3, r27	; 0x03
     f0e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__malloc_margin+0x13>
     f12:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__malloc_margin+0x14>
     f16:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <__malloc_margin+0x15>
     f1a:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <__malloc_margin+0x16>
     f1e:	84 83       	std	Z+4, r24	; 0x04
     f20:	95 83       	std	Z+5, r25	; 0x05
     f22:	a6 83       	std	Z+6, r26	; 0x06
     f24:	b7 83       	std	Z+7, r27	; 0x07
     f26:	11 86       	std	Z+9, r1	; 0x09
     f28:	10 86       	std	Z+8, r1	; 0x08
     f2a:	13 86       	std	Z+11, r1	; 0x0b
     f2c:	12 86       	std	Z+10, r1	; 0x0a
     f2e:	15 86       	std	Z+13, r1	; 0x0d
     f30:	14 86       	std	Z+12, r1	; 0x0c
     f32:	16 86       	std	Z+14, r1	; 0x0e
     f34:	08 95       	ret

00000f36 <main>:
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	2a 97       	sbiw	r28, 0x0a	; 10
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
init():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     f4a:	78 94       	sei
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
     f4c:	83 b7       	in	r24, 0x33	; 51
     f4e:	8c 64       	ori	r24, 0x4C	; 76
     f50:	83 bf       	out	0x33, r24	; 51
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     f52:	87 b7       	in	r24, 0x37	; 55
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	87 bf       	out	0x37, r24	; 55
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	9e bd       	out	0x2e, r25	; 46
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     f5c:	8e b5       	in	r24, 0x2e	; 46
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	8e bd       	out	0x2e, r24	; 46
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     f62:	8f b5       	in	r24, 0x2f	; 47
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	8f bd       	out	0x2f, r24	; 47
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     f68:	85 b5       	in	r24, 0x25	; 37
     f6a:	84 60       	ori	r24, 0x04	; 4
     f6c:	85 bd       	out	0x25, r24	; 37
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     f6e:	85 b5       	in	r24, 0x25	; 37
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	85 bd       	out	0x25, r24	; 37
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
     f74:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     f78:	83 60       	ori	r24, 0x03	; 3
     f7a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
     f7e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     f88:	87 e8       	ldi	r24, 0x87	; 135
     f8a:	86 b9       	out	0x06, r24	; 6
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     f8c:	1a b8       	out	0x0a, r1	; 10
begin():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f8e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <Serial+0x10>
     f92:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <Serial+0x11>
     f96:	90 83       	st	Z, r25
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f98:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Serial+0xc>
     f9c:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Serial+0xd>
     fa0:	10 82       	st	Z, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     fa2:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <Serial+0xe>
     fa6:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <Serial+0xf>
     faa:	8f ec       	ldi	r24, 0xCF	; 207
     fac:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     fae:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <Serial+0x18>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     fb2:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <Serial+0x14>
     fb6:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <Serial+0x15>
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     fbe:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <Serial+0x12>
     fc2:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <Serial+0x13>
     fc6:	80 81       	ld	r24, Z
     fc8:	88 69       	ori	r24, 0x98	; 152
     fca:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     fcc:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <Serial+0x12>
     fd0:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <Serial+0x13>
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	80 83       	st	Z, r24
init():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:200

pwmWorker::pwmWorker() {};

void pwmWorker::init() const {

    DDRB |= (1 << PB5);
     fda:	bd 9a       	sbi	0x17, 5	; 23
/home/stend/Документы/stend/hardware/pid_regulator.cpp:201
    PORTB &= ~(1 << PB5);
     fdc:	c5 98       	cbi	0x18, 5	; 24
/home/stend/Документы/stend/hardware/pid_regulator.cpp:202
    OCR1A = 0;
     fde:	1b bc       	out	0x2b, r1	; 43
     fe0:	1a bc       	out	0x2a, r1	; 42
/home/stend/Документы/stend/hardware/pid_regulator.cpp:205

    //Fast PWM with downcounting
    TCCR1A |= (1 << WGM11) | (1 << WGM10);
     fe2:	8f b5       	in	r24, 0x2f	; 47
     fe4:	83 60       	ori	r24, 0x03	; 3
     fe6:	8f bd       	out	0x2f, r24	; 47
/home/stend/Документы/stend/hardware/pid_regulator.cpp:206
    TCCR1B |= (1 << WGM12);
     fe8:	8e b5       	in	r24, 0x2e	; 46
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	8e bd       	out	0x2e, r24	; 46
/home/stend/Документы/stend/hardware/pid_regulator.cpp:208

    TCCR1A |= (1 << COM1A1);
     fee:	8f b5       	in	r24, 0x2f	; 47
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	8f bd       	out	0x2f, r24	; 47
/home/stend/Документы/stend/hardware/pid_regulator.cpp:211

    //Pre-scailer 256
    TCCR1B |= (1 << CS12);
     ff4:	8e b5       	in	r24, 0x2e	; 46
     ff6:	84 60       	ori	r24, 0x04	; 4
     ff8:	8e bd       	out	0x2e, r24	; 46
/home/stend/Документы/stend/hardware/pid_regulator.cpp:212
    TCCR1B &= ~(1 << CS11) & ~(1 << CS10);
     ffa:	8e b5       	in	r24, 0x2e	; 46
     ffc:	8c 7f       	andi	r24, 0xFC	; 252
     ffe:	8e bd       	out	0x2e, r24	; 46
/home/stend/Документы/stend/hardware/pid_regulator.cpp:145
  }
}

void adcPIDWorker::init() const {
  
  ADCSRA |= (1 << ADEN);
    1000:	37 9a       	sbi	0x06, 7	; 6
/home/stend/Документы/stend/hardware/pid_regulator.cpp:146
  ADCSRA &= ~(1 << ADPS2) & ~ (1 << ADPS1) & ~(1 << ADPS0);
    1002:	86 b1       	in	r24, 0x06	; 6
    1004:	88 7f       	andi	r24, 0xF8	; 248
    1006:	86 b9       	out	0x06, r24	; 6
/home/stend/Документы/stend/hardware/pid_regulator.cpp:147
  ADMUX |= (1 << REFS0);
    1008:	3e 9a       	sbi	0x07, 6	; 7
setup():
/home/stend/Документы/stend/hardware/hardware.ino:29
void setup() {
  
  Serial.begin(9600);

  pid.init();
  pid.keepThermalDelta(START_THERMAL_DELTA);
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]>
begin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:53
}


void MCP_DAC::begin(uint8_t select)
{
  _select = select;
    1010:	8b e2       	ldi	r24, 0x2B	; 43
    1012:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <light+0x2>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:54
  pinMode(_select, OUTPUT);
    1016:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode.constprop.85>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:55
  digitalWrite(_select, HIGH);
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <light+0x2>
    1020:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:57

  _spi_settings = SPISettings(_SPIspeed, MSBFIRST, SPI_MODE0);
    1024:	00 91 d8 02 	lds	r16, 0x02D8	; 0x8002d8 <light+0x5>
    1028:	10 91 d9 02 	lds	r17, 0x02D9	; 0x8002d9 <light+0x6>
    102c:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <light+0x7>
    1030:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <light+0x8>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:133
        clockDiv = 5;
      } else {
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	52 e1       	ldi	r21, 0x12	; 18
    1038:	6a e7       	ldi	r22, 0x7A	; 122
    103a:	70 e0       	ldi	r23, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:134
      clockDiv = 0;
    103c:	80 e0       	ldi	r24, 0x00	; 0
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:135
      while (clockDiv < 6 && clock < clockSetting) {
    103e:	04 17       	cp	r16, r20
    1040:	15 07       	cpc	r17, r21
    1042:	26 07       	cpc	r18, r22
    1044:	37 07       	cpc	r19, r23
    1046:	40 f4       	brcc	.+16     	; 0x1058 <main+0x122>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:136
        clockSetting /= 2;
    1048:	76 95       	lsr	r23
    104a:	67 95       	ror	r22
    104c:	57 95       	ror	r21
    104e:	47 95       	ror	r20
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:137
        clockDiv++;
    1050:	8f 5f       	subi	r24, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:135
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1052:	86 30       	cpi	r24, 0x06	; 6
    1054:	a1 f7       	brne	.-24     	; 0x103e <main+0x108>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:143
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    1056:	87 e0       	ldi	r24, 0x07	; 7
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:150
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1058:	98 2f       	mov	r25, r24
    105a:	90 6a       	ori	r25, 0xA0	; 160
    105c:	96 95       	lsr	r25
begin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:57
    105e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <light+0x15>
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:151
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1062:	80 95       	com	r24
    1064:	81 70       	andi	r24, 0x01	; 1
begin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:57
    1066:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <light+0x16>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:59

  if (_hwSPI)
    106a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <light+0x4>
    106e:	81 11       	cpse	r24, r1
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <main+0x160>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:66
    //  mySPI->end();
    //  mySPI->begin();
  }
  else  //  software SPI
  {
    pinMode(_dataOut, OUTPUT);
    1072:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <light>
    1076:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode.constprop.85>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:67
    pinMode(_clock,   OUTPUT);
    107a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <light+0x1>
    107e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode.constprop.85>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:68
    digitalWrite(_dataOut, LOW);
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <light>
    1088:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:69
    digitalWrite(_clock,   LOW);
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <light+0x1>
    1092:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
setLatchPin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:173
}


void MCP_DAC::setLatchPin(uint8_t latchPin)
{
  _latchPin = latchPin;
    1096:	89 e2       	ldi	r24, 0x29	; 41
    1098:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <light+0x3>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:174
  pinMode(_latchPin, OUTPUT);
    109c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode.constprop.85>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:175
  digitalWrite(_latchPin, HIGH);
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <light+0x3>
    10a6:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:75

void lightregulator::off(uint8_t emmiterNum) {
  
  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index = 0;
    10aa:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <light+0x17>
setintencity():
    10ae:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lightregulator::setintencity(unsigned char) [clone .part.1] [clone .constprop.72]>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:79
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 0;
    10b2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    10b6:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <light+0x26>
    10ba:	90 e0       	ldi	r25, 0x00	; 0
fastWriteB():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:137
}


void MCP_DAC::fastWriteB(uint16_t value)
{
  transfer(0xB000 | value);
    10bc:	90 6b       	ori	r25, 0xB0	; 176
    10be:	0e 94 30 02 	call	0x460	; 0x460 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]>
setup():
/home/stend/Документы/stend/hardware/hardware.ino:34

  light.init();
  //motor.init();

  Serial.println("STROK");
    10c2:	80 e3       	ldi	r24, 0x30	; 48
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    10ca:	22 24       	eor	r2, r2
    10cc:	23 94       	inc	r2
    10ce:	31 2c       	mov	r3, r1
_ZNK11motorRouter18eraseStartPositionEv.isra.13():
/home/stend/Документы/stend/hardware/motor_regulator.h:153
  void savecurrentPositionAsStart() const {
    EEPROM.put(0, getCounter());
  }
  
  void eraseStartPosition() const {
    EEPROM.put(0, -1);
    10d0:	44 24       	eor	r4, r4
    10d2:	4a 94       	dec	r4
    10d4:	54 2c       	mov	r5, r4
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:25
  digitalWrite(A4T_VENT_PIN, LOW);
}

void pidRegulator::tickTackToe() {

  m_currentTime = millis();
    10d6:	0e 94 be 02 	call	0x57c	; 0x57c <millis>
    10da:	5b 01       	movw	r10, r22
    10dc:	6c 01       	movw	r12, r24
    10de:	60 93 15 03 	sts	0x0315, r22	; 0x800315 <pid+0xf>
    10e2:	b0 92 16 03 	sts	0x0316, r11	; 0x800316 <pid+0x10>
    10e6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pid+0x11>
    10ea:	d0 92 18 03 	sts	0x0318, r13	; 0x800318 <pid+0x12>
    10ee:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <pid+0x13>
    10f2:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <pid+0x14>
    10f6:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <pid+0x15>
    10fa:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <pid+0x16>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:27

  if(m_currentTime - m_previousTime >= PID_MEASURE_INTERVAL_MSEC) {
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 90 0d 03 	lds	r10, 0x030D	; 0x80030d <pid+0x7>
    110e:	b0 90 0e 03 	lds	r11, 0x030E	; 0x80030e <pid+0x8>
    1112:	c0 90 0f 03 	lds	r12, 0x030F	; 0x80030f <pid+0x9>
    1116:	d0 90 10 03 	lds	r13, 0x0310	; 0x800310 <pid+0xa>
    111a:	e0 90 11 03 	lds	r14, 0x0311	; 0x800311 <pid+0xb>
    111e:	f0 90 12 03 	lds	r15, 0x0312	; 0x800312 <pid+0xc>
    1122:	00 91 13 03 	lds	r16, 0x0313	; 0x800313 <pid+0xd>
    1126:	10 91 14 03 	lds	r17, 0x0314	; 0x800314 <pid+0xe>
    112a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__subdi3>
    112e:	2f 32       	cpi	r18, 0x2F	; 47
    1130:	35 47       	sbci	r19, 0x75	; 117
    1132:	41 05       	cpc	r20, r1
    1134:	51 05       	cpc	r21, r1
    1136:	61 05       	cpc	r22, r1
    1138:	71 05       	cpc	r23, r1
    113a:	81 05       	cpc	r24, r1
    113c:	91 05       	cpc	r25, r1
    113e:	11 f1       	breq	.+68     	; 0x1184 <__stack+0x85>
    1140:	08 f1       	brcs	.+66     	; 0x1184 <__stack+0x85>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:29

    if(m_warmerData.pwm == 0) {
    1142:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pid>
    1146:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pid+0x1>
    114a:	89 2b       	or	r24, r25
    114c:	09 f0       	breq	.+2      	; 0x1150 <__stack+0x51>
    114e:	4f c0       	rjmp	.+158    	; 0x11ee <__stack+0xef>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:30
      Serial.println("CTD0");
    1150:	86 e3       	ldi	r24, 0x36	; 54
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    1158:	1b bc       	out	0x2b, r1	; 43
    115a:	1a bc       	out	0x2a, r1	; 42
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:69
      else {    
        m_pwm.setIntencity(m_warmerData.pwm);
      }
    }

    m_previousTime = millis();
    115c:	0e 94 be 02 	call	0x57c	; 0x57c <millis>
    1160:	8b 01       	movw	r16, r22
    1162:	9c 01       	movw	r18, r24
    1164:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <pid+0x7>
    1168:	10 93 0e 03 	sts	0x030E, r17	; 0x80030e <pid+0x8>
    116c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <pid+0x9>
    1170:	30 93 10 03 	sts	0x0310, r19	; 0x800310 <pid+0xa>
    1174:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <pid+0xb>
    1178:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <pid+0xc>
    117c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pid+0xd>
    1180:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pid+0xe>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:98
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index++;
    if(m_inten2Index > LIGHT_INTENS_SIZE - 1) {
      m_inten2Index = LIGHT_INTENS_SIZE - 1;
    1184:	8c e0       	ldi	r24, 0x0C	; 12
    1186:	f8 2e       	mov	r15, r24
on():
/home/stend/Документы/stend/hardware/light_regulator.h:66

    m_inten1Index = 6;
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 6;
    1188:	96 e0       	ldi	r25, 0x06	; 6
    118a:	e9 2e       	mov	r14, r25
loop():
/home/stend/Документы/stend/hardware/hardware.ino:41

void loop() {

  pid.tickTackToe();

  while (Serial.available() > 0) {
    118c:	86 e2       	ldi	r24, 0x26	; 38
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <HardwareSerial::available()>
    1194:	18 16       	cp	r1, r24
    1196:	19 06       	cpc	r1, r25
    1198:	0c f0       	brlt	.+2      	; 0x119c <__stack+0x9d>
    119a:	88 c4       	rjmp	.+2320   	; 0x1aac <__stack+0x9ad>
readStringUntil():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:245
  return ret;
}

String Stream::readStringUntil(char terminator)
{
  String ret;
    119c:	6f e2       	ldi	r22, 0x2F	; 47
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 d1 05 	call	0xba2	; 0xba2 <String::String(char const*)>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:246
  int c = timedRead();
    11a8:	0e 94 1b 03 	call	0x636	; 0x636 <Stream::timedRead() [clone .constprop.18]>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:247
  while (c >= 0 && c != terminator)
    11ac:	97 fd       	sbrc	r25, 7
    11ae:	b6 c1       	rjmp	.+876    	; 0x151c <__stack+0x41d>
    11b0:	8a 30       	cpi	r24, 0x0A	; 10
    11b2:	91 05       	cpc	r25, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__stack+0xb9>
    11b6:	b2 c1       	rjmp	.+868    	; 0x151c <__stack+0x41d>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:249
  {
    ret += (char)c;
    11b8:	8f 83       	std	Y+7, r24	; 0x07
concat():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:285

unsigned char String::concat(char c)
{
  char buf[2];
  buf[0] = c;
  buf[1] = 0;
    11ba:	18 86       	std	Y+8, r1	; 0x08
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    11bc:	0d 81       	ldd	r16, Y+5	; 0x05
    11be:	1e 81       	ldd	r17, Y+6	; 0x06
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    11c4:	b8 01       	movw	r22, r16
    11c6:	ce 01       	movw	r24, r28
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	0e 94 7e 05 	call	0xafc	; 0xafc <String::reserve(unsigned int)>
    11ce:	88 23       	and	r24, r24
    11d0:	59 f3       	breq	.-42     	; 0x11a8 <__stack+0xa9>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
    11d2:	29 81       	ldd	r18, Y+1	; 0x01
    11d4:	3a 81       	ldd	r19, Y+2	; 0x02
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	be 01       	movw	r22, r28
    11dc:	69 5f       	subi	r22, 0xF9	; 249
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	0e 94 03 12 	call	0x2406	; 0x2406 <strcpy>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:271
  len = newlen;
    11e8:	1e 83       	std	Y+6, r17	; 0x06
    11ea:	0d 83       	std	Y+5, r16	; 0x05
    11ec:	dd cf       	rjmp	.-70     	; 0x11a8 <__stack+0xa9>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:37

      m_previousTime = millis();
      return;
    }

    m_ADCdiffRead = readCurrentADCDiff();
    11ee:	0e 94 60 05 	call	0xac0	; 0xac0 <pidRegulator::readCurrentADCDiff() const [clone .constprop.9]>
    11f2:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <pid+0x18>
    11f6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <pid+0x17>
write():
    11fa:	8b e3       	ldi	r24, 0x3B	; 59
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
readCurrentThermalDiff():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:111
   return m_pidADC.readBufferized(ADC_PID_REGULAR_READ);
}

uint8_t pidRegulator::readCurrentThermalDiff() {

  m_ADCdiffRead = readCurrentADCDiff();
    1202:	0e 94 60 05 	call	0xac0	; 0xac0 <pidRegulator::readCurrentADCDiff() const [clone .constprop.9]>
    1206:	8c 01       	movw	r16, r24
    1208:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <pid+0x18>
    120c:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <pid+0x17>
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:314
  return m_warmerData;
}

uint8_t warmerData::currentThermalDelta(stend::ADC_diff_t adcDiff, stend::ADC_resolution_t res) {

  if(res == ADC_RESOLUTION_x1) {
    1210:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <pid+0x4>
    1214:	81 11       	cpse	r24, r1
    1216:	51 c1       	rjmp	.+674    	; 0x14ba <__stack+0x3bb>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:317
    
    if(adcDiff < 63) {
      return MIN_POSSIBLE_VALUE;
    1218:	61 e0       	ldi	r22, 0x01	; 1
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:316

uint8_t warmerData::currentThermalDelta(stend::ADC_diff_t adcDiff, stend::ADC_resolution_t res) {

  if(res == ADC_RESOLUTION_x1) {
    
    if(adcDiff < 63) {
    121a:	0f 33       	cpi	r16, 0x3F	; 63
    121c:	11 05       	cpc	r17, r1
    121e:	0c f4       	brge	.+2      	; 0x1222 <__stack+0x123>
    1220:	99 c0       	rjmp	.+306    	; 0x1354 <__stack+0x255>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:320
      return MIN_POSSIBLE_VALUE;
    }

    if(adcDiff >= 185) {
    1222:	09 3b       	cpi	r16, 0xB9	; 185
    1224:	11 05       	cpc	r17, r1
    1226:	0c f0       	brlt	.+2      	; 0x122a <__stack+0x12b>
    1228:	48 c1       	rjmp	.+656    	; 0x14ba <__stack+0x3bb>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:334
      case 112:
        return 30;
      case 121:
        return 40;
      case 124:
        return 50;
    122a:	62 e3       	ldi	r22, 0x32	; 50
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    122c:	0c 37       	cpi	r16, 0x7C	; 124
    122e:	11 05       	cpc	r17, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <__stack+0x135>
    1232:	90 c0       	rjmp	.+288    	; 0x1354 <__stack+0x255>
    1234:	0c f0       	brlt	.+2      	; 0x1238 <__stack+0x139>
    1236:	b1 c0       	rjmp	.+354    	; 0x139a <__stack+0x29b>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:328
      case 63:
        return 10;
      case 87:
        return 20;
    1238:	64 e1       	ldi	r22, 0x14	; 20
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    123a:	07 35       	cpi	r16, 0x57	; 87
    123c:	11 05       	cpc	r17, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <__stack+0x143>
    1240:	89 c0       	rjmp	.+274    	; 0x1354 <__stack+0x255>
    1242:	0c f0       	brlt	.+2      	; 0x1246 <__stack+0x147>
    1244:	7e c0       	rjmp	.+252    	; 0x1342 <__stack+0x243>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:326
      case 63:
        return 10;
    1246:	6a e0       	ldi	r22, 0x0A	; 10
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1248:	0f 33       	cpi	r16, 0x3F	; 63
    124a:	11 05       	cpc	r17, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <__stack+0x151>
    124e:	82 c0       	rjmp	.+260    	; 0x1354 <__stack+0x255>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:350
    }

    stend::ADC_diff_t startADC, endADC;
    uint8_t startDelta, endDelta;

    if(adcDiff > 63 && adcDiff < 87) {
    1250:	c8 01       	movw	r24, r16
    1252:	80 54       	subi	r24, 0x40	; 64
    1254:	91 09       	sbc	r25, r1
    1256:	87 31       	cpi	r24, 0x17	; 23
    1258:	91 05       	cpc	r25, r1
    125a:	08 f4       	brcc	.+2      	; 0x125e <__stack+0x15f>
    125c:	b5 c0       	rjmp	.+362    	; 0x13c8 <__stack+0x2c9>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:358
      endADC = 87;
      startDelta = 10;
      endDelta = 20;
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
    125e:	48 97       	sbiw	r24, 0x18	; 24
    1260:	88 31       	cpi	r24, 0x18	; 24
    1262:	91 05       	cpc	r25, r1
    1264:	08 f4       	brcc	.+2      	; 0x1268 <__stack+0x169>
    1266:	bb c0       	rjmp	.+374    	; 0x13de <__stack+0x2df>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:365
      endADC = 112;
      startDelta = 20;
      endDelta = 30;
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
    1268:	49 97       	sbiw	r24, 0x19	; 25
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	91 05       	cpc	r25, r1
    126e:	08 f4       	brcc	.+2      	; 0x1272 <__stack+0x173>
    1270:	c1 c0       	rjmp	.+386    	; 0x13f4 <__stack+0x2f5>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:372
      endADC = 121;
      startDelta = 30;
      endDelta = 40;
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
    1272:	09 97       	sbiw	r24, 0x09	; 9
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	91 05       	cpc	r25, r1
    1278:	08 f4       	brcc	.+2      	; 0x127c <__stack+0x17d>
    127a:	c7 c0       	rjmp	.+398    	; 0x140a <__stack+0x30b>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:379
      endADC = 124;
      startDelta = 40;
      endDelta = 50;
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
    127c:	03 97       	sbiw	r24, 0x03	; 3
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	91 05       	cpc	r25, r1
    1282:	08 f4       	brcc	.+2      	; 0x1286 <__stack+0x187>
    1284:	cd c0       	rjmp	.+410    	; 0x1420 <__stack+0x321>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:386
      endADC = 127;
      startDelta = 50;
      endDelta = 60;
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
    1286:	03 97       	sbiw	r24, 0x03	; 3
    1288:	85 30       	cpi	r24, 0x05	; 5
    128a:	91 05       	cpc	r25, r1
    128c:	08 f4       	brcc	.+2      	; 0x1290 <__stack+0x191>
    128e:	d3 c0       	rjmp	.+422    	; 0x1436 <__stack+0x337>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:393
      endADC = 133;
      startDelta = 60;
      endDelta = 70;
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
    1290:	06 97       	sbiw	r24, 0x06	; 6
    1292:	87 30       	cpi	r24, 0x07	; 7
    1294:	91 05       	cpc	r25, r1
    1296:	08 f4       	brcc	.+2      	; 0x129a <__stack+0x19b>
    1298:	d9 c0       	rjmp	.+434    	; 0x144c <__stack+0x34d>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:400
      endADC = 141;
      startDelta = 70;
      endDelta = 80;
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
    129a:	08 97       	sbiw	r24, 0x08	; 8
    129c:	89 30       	cpi	r24, 0x09	; 9
    129e:	91 05       	cpc	r25, r1
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__stack+0x1a5>
    12a2:	df c0       	rjmp	.+446    	; 0x1462 <__stack+0x363>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:407
      endADC = 151;
      startDelta = 80;
      endDelta = 90;
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
    12a4:	0a 97       	sbiw	r24, 0x0a	; 10
    12a6:	89 30       	cpi	r24, 0x09	; 9
    12a8:	91 05       	cpc	r25, r1
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <__stack+0x1af>
    12ac:	e5 c0       	rjmp	.+458    	; 0x1478 <__stack+0x379>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:414
      endADC = 161;
      startDelta = 90;
      endDelta = 100;
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
    12ae:	0a 97       	sbiw	r24, 0x0a	; 10
    12b0:	8d 30       	cpi	r24, 0x0D	; 13
    12b2:	91 05       	cpc	r25, r1
    12b4:	08 f4       	brcc	.+2      	; 0x12b8 <__stack+0x1b9>
    12b6:	eb c0       	rjmp	.+470    	; 0x148e <__stack+0x38f>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:421
      endADC = 175;
      startDelta = 100;
      endDelta = 110;
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
    12b8:	0e 97       	sbiw	r24, 0x0e	; 14
    12ba:	09 97       	sbiw	r24, 0x09	; 9
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <__stack+0x1c1>
    12be:	f2 c0       	rjmp	.+484    	; 0x14a4 <__stack+0x3a5>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:430
      endDelta = 120;
      goto CALCULATE;      
    }

CALCULATE:
    float currentDelta = startDelta + (endDelta - startDelta) * 1.0 * (adcDiff - startADC)/(endADC - startADC); 
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	e8 2e       	mov	r14, r24
    12c4:	f1 2c       	mov	r15, r1
    12c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c8:	69 2f       	mov	r22, r25
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	6e 19       	sub	r22, r14
    12ce:	7f 09       	sbc	r23, r15
    12d0:	07 2e       	mov	r0, r23
    12d2:	00 0c       	add	r0, r0
    12d4:	88 0b       	sbc	r24, r24
    12d6:	99 0b       	sbc	r25, r25
    12d8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__floatsisf>
    12dc:	5b 01       	movw	r10, r22
    12de:	6c 01       	movw	r12, r24
    12e0:	b8 01       	movw	r22, r16
    12e2:	68 19       	sub	r22, r8
    12e4:	79 09       	sbc	r23, r9
    12e6:	07 2e       	mov	r0, r23
    12e8:	00 0c       	add	r0, r0
    12ea:	88 0b       	sbc	r24, r24
    12ec:	99 0b       	sbc	r25, r25
    12ee:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__floatsisf>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	c6 01       	movw	r24, r12
    12f8:	b5 01       	movw	r22, r10
    12fa:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3>
    12fe:	5b 01       	movw	r10, r22
    1300:	6c 01       	movw	r12, r24
    1302:	b3 01       	movw	r22, r6
    1304:	68 19       	sub	r22, r8
    1306:	79 09       	sbc	r23, r9
    1308:	07 2e       	mov	r0, r23
    130a:	00 0c       	add	r0, r0
    130c:	88 0b       	sbc	r24, r24
    130e:	99 0b       	sbc	r25, r25
    1310:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__floatsisf>
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	c6 01       	movw	r24, r12
    131a:	b5 01       	movw	r22, r10
    131c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__divsf3>
    1320:	5b 01       	movw	r10, r22
    1322:	6c 01       	movw	r12, r24
    1324:	b7 01       	movw	r22, r14
    1326:	ff 0c       	add	r15, r15
    1328:	88 0b       	sbc	r24, r24
    132a:	99 0b       	sbc	r25, r25
    132c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__floatsisf>
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	c6 01       	movw	r24, r12
    1336:	b5 01       	movw	r22, r10
    1338:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__addsf3>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:431
    return currentDelta;
    133c:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__fixunssfsi>
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <__stack+0x255>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:330
      case 63:
        return 10;
      case 87:
        return 20;
      case 112:
        return 30;
    1342:	6e e1       	ldi	r22, 0x1E	; 30
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1344:	00 37       	cpi	r16, 0x70	; 112
    1346:	11 05       	cpc	r17, r1
    1348:	29 f0       	breq	.+10     	; 0x1354 <__stack+0x255>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:332
      case 87:
        return 20;
      case 112:
        return 30;
      case 121:
        return 40;
    134a:	68 e2       	ldi	r22, 0x28	; 40
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    134c:	09 37       	cpi	r16, 0x79	; 121
    134e:	11 05       	cpc	r17, r1
    1350:	09 f0       	breq	.+2      	; 0x1354 <__stack+0x255>
    1352:	7e cf       	rjmp	.-260    	; 0x1250 <__stack+0x151>
print():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    135a:	4a e0       	ldi	r20, 0x0A	; 10
    135c:	0e 94 4d 04 	call	0x89a	; 0x89a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
write():
    1360:	8d e2       	ldi	r24, 0x2D	; 45
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:42
    m_ADCdiffRead = readCurrentADCDiff();
    
    Serial.print("CTD");
    Serial.println((uint16_t)readCurrentThermalDiff());

    if(m_warmerData.warmDirection == PID_COOL_DOWN) {
    1368:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <pid+0x6>
    136c:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <pid+0x2>
    1370:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <pid+0x3>
    1374:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <pid+0x17>
    1378:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <pid+0x18>
    137c:	81 11       	cpse	r24, r1
    137e:	bf c0       	rjmp	.+382    	; 0x14fe <__stack+0x3ff>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:44

      if(m_ADCdiffRead > m_warmerData.adc - PID_THRESHOLD) {
    1380:	25 50       	subi	r18, 0x05	; 5
    1382:	31 09       	sbc	r19, r1
    1384:	24 17       	cp	r18, r20
    1386:	35 07       	cpc	r19, r21
    1388:	08 f0       	brcs	.+2      	; 0x138c <__stack+0x28d>
    138a:	99 c0       	rjmp	.+306    	; 0x14be <__stack+0x3bf>
turnONVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:16
  m_pwm.init();
  m_pidADC.init();  
}

void pidRegulator::turnONVentilator() const {
  digitalWrite(A4T_VENT_PIN, HIGH);
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    1394:	3b bc       	out	0x2b, r3	; 43
    1396:	2a bc       	out	0x2a, r2	; 42
    1398:	e1 ce       	rjmp	.-574    	; 0x115c <__stack+0x5d>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:340
      case 127:
        return 60;
      case 133:
        return 70;
      case 141:
        return 80;
    139a:	60 e5       	ldi	r22, 0x50	; 80
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    139c:	0d 38       	cpi	r16, 0x8D	; 141
    139e:	11 05       	cpc	r17, r1
    13a0:	c9 f2       	breq	.-78     	; 0x1354 <__stack+0x255>
    13a2:	4c f4       	brge	.+18     	; 0x13b6 <__stack+0x2b7>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:336
      case 121:
        return 40;
      case 124:
        return 50;
      case 127:
        return 60;
    13a4:	6c e3       	ldi	r22, 0x3C	; 60
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    13a6:	0f 37       	cpi	r16, 0x7F	; 127
    13a8:	11 05       	cpc	r17, r1
    13aa:	a1 f2       	breq	.-88     	; 0x1354 <__stack+0x255>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:338
      case 124:
        return 50;
      case 127:
        return 60;
      case 133:
        return 70;
    13ac:	66 e4       	ldi	r22, 0x46	; 70
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    13ae:	05 38       	cpi	r16, 0x85	; 133
    13b0:	11 05       	cpc	r17, r1
    13b2:	81 f2       	breq	.-96     	; 0x1354 <__stack+0x255>
    13b4:	4d cf       	rjmp	.-358    	; 0x1250 <__stack+0x151>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:342
      case 133:
        return 70;
      case 141:
        return 80;
      case 151:
        return 90;
    13b6:	6a e5       	ldi	r22, 0x5A	; 90
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    13b8:	07 39       	cpi	r16, 0x97	; 151
    13ba:	11 05       	cpc	r17, r1
    13bc:	59 f2       	breq	.-106    	; 0x1354 <__stack+0x255>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:344
      case 141:
        return 80;
      case 151:
        return 90;
      case 161:
        return 100;
    13be:	64 e6       	ldi	r22, 0x64	; 100
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    13c0:	01 3a       	cpi	r16, 0xA1	; 161
    13c2:	11 05       	cpc	r17, r1
    13c4:	39 f2       	breq	.-114    	; 0x1354 <__stack+0x255>
    13c6:	44 cf       	rjmp	.-376    	; 0x1250 <__stack+0x151>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:355
    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
      endADC = 87;
      startDelta = 10;
      endDelta = 20;
    13c8:	f4 e1       	ldi	r31, 0x14	; 20
    13ca:	fa 87       	std	Y+10, r31	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:354

    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
      endADC = 87;
      startDelta = 10;
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	29 87       	std	Y+9, r18	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:353
    uint8_t startDelta, endDelta;

    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
      endADC = 87;
    13d0:	a7 e5       	ldi	r26, 0x57	; 87
    13d2:	6a 2e       	mov	r6, r26
    13d4:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:352
    stend::ADC_diff_t startADC, endADC;
    uint8_t startDelta, endDelta;

    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
    13d6:	bf e3       	ldi	r27, 0x3F	; 63
    13d8:	8b 2e       	mov	r8, r27
    13da:	91 2c       	mov	r9, r1
    13dc:	71 cf       	rjmp	.-286    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:362
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
      endADC = 112;
      startDelta = 20;
      endDelta = 30;
    13de:	8e e1       	ldi	r24, 0x1E	; 30
    13e0:	8a 87       	std	Y+10, r24	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:361
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
      endADC = 112;
      startDelta = 20;
    13e2:	94 e1       	ldi	r25, 0x14	; 20
    13e4:	99 87       	std	Y+9, r25	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:360
      endDelta = 20;
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
      endADC = 112;
    13e6:	e0 e7       	ldi	r30, 0x70	; 112
    13e8:	6e 2e       	mov	r6, r30
    13ea:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:359
      startDelta = 10;
      endDelta = 20;
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
    13ec:	f7 e5       	ldi	r31, 0x57	; 87
    13ee:	8f 2e       	mov	r8, r31
    13f0:	91 2c       	mov	r9, r1
    13f2:	66 cf       	rjmp	.-308    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:369
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
      endADC = 121;
      startDelta = 30;
      endDelta = 40;
    13f4:	e8 e2       	ldi	r30, 0x28	; 40
    13f6:	ea 87       	std	Y+10, r30	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:368
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
      endADC = 121;
      startDelta = 30;
    13f8:	fe e1       	ldi	r31, 0x1E	; 30
    13fa:	f9 87       	std	Y+9, r31	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:367
      endDelta = 30;
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
      endADC = 121;
    13fc:	69 e7       	ldi	r22, 0x79	; 121
    13fe:	66 2e       	mov	r6, r22
    1400:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:366
      startDelta = 20;
      endDelta = 30;
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
    1402:	70 e7       	ldi	r23, 0x70	; 112
    1404:	87 2e       	mov	r8, r23
    1406:	91 2c       	mov	r9, r1
    1408:	5b cf       	rjmp	.-330    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:376
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
      endADC = 124;
      startDelta = 40;
      endDelta = 50;
    140a:	22 e3       	ldi	r18, 0x32	; 50
    140c:	2a 87       	std	Y+10, r18	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:375
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
      endADC = 124;
      startDelta = 40;
    140e:	88 e2       	ldi	r24, 0x28	; 40
    1410:	89 87       	std	Y+9, r24	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:374
      endDelta = 40;
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
      endADC = 124;
    1412:	4c e7       	ldi	r20, 0x7C	; 124
    1414:	64 2e       	mov	r6, r20
    1416:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:373
      startDelta = 30;
      endDelta = 40;
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
    1418:	59 e7       	ldi	r21, 0x79	; 121
    141a:	85 2e       	mov	r8, r21
    141c:	91 2c       	mov	r9, r1
    141e:	50 cf       	rjmp	.-352    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:383
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
      endADC = 127;
      startDelta = 50;
      endDelta = 60;
    1420:	9c e3       	ldi	r25, 0x3C	; 60
    1422:	9a 87       	std	Y+10, r25	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:382
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
      endADC = 127;
      startDelta = 50;
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	e9 87       	std	Y+9, r30	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:381
      endDelta = 50;
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
      endADC = 127;
    1428:	2f e7       	ldi	r18, 0x7F	; 127
    142a:	62 2e       	mov	r6, r18
    142c:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:380
      startDelta = 40;
      endDelta = 50;
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
    142e:	3c e7       	ldi	r19, 0x7C	; 124
    1430:	83 2e       	mov	r8, r19
    1432:	91 2c       	mov	r9, r1
    1434:	45 cf       	rjmp	.-374    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:390
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
      endADC = 133;
      startDelta = 60;
      endDelta = 70;
    1436:	f6 e4       	ldi	r31, 0x46	; 70
    1438:	fa 87       	std	Y+10, r31	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:389
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
      endADC = 133;
      startDelta = 60;
    143a:	2c e3       	ldi	r18, 0x3C	; 60
    143c:	29 87       	std	Y+9, r18	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:388
      endDelta = 60;
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
      endADC = 133;
    143e:	85 e8       	ldi	r24, 0x85	; 133
    1440:	68 2e       	mov	r6, r24
    1442:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:387
      startDelta = 50;
      endDelta = 60;
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
    1444:	9f e7       	ldi	r25, 0x7F	; 127
    1446:	89 2e       	mov	r8, r25
    1448:	91 2c       	mov	r9, r1
    144a:	3a cf       	rjmp	.-396    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:397
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
      endADC = 141;
      startDelta = 70;
      endDelta = 80;
    144c:	80 e5       	ldi	r24, 0x50	; 80
    144e:	8a 87       	std	Y+10, r24	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:396
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
      endADC = 141;
      startDelta = 70;
    1450:	96 e4       	ldi	r25, 0x46	; 70
    1452:	99 87       	std	Y+9, r25	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:395
      endDelta = 70;
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
      endADC = 141;
    1454:	ad e8       	ldi	r26, 0x8D	; 141
    1456:	6a 2e       	mov	r6, r26
    1458:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:394
      startDelta = 60;
      endDelta = 70;
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
    145a:	b5 e8       	ldi	r27, 0x85	; 133
    145c:	8b 2e       	mov	r8, r27
    145e:	91 2c       	mov	r9, r1
    1460:	2f cf       	rjmp	.-418    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:404
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
      endADC = 151;
      startDelta = 80;
      endDelta = 90;
    1462:	ea e5       	ldi	r30, 0x5A	; 90
    1464:	ea 87       	std	Y+10, r30	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:403
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
      endADC = 151;
      startDelta = 80;
    1466:	f0 e5       	ldi	r31, 0x50	; 80
    1468:	f9 87       	std	Y+9, r31	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:402
      endDelta = 80;
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
      endADC = 151;
    146a:	e7 e9       	ldi	r30, 0x97	; 151
    146c:	6e 2e       	mov	r6, r30
    146e:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:401
      startDelta = 70;
      endDelta = 80;
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
    1470:	fd e8       	ldi	r31, 0x8D	; 141
    1472:	8f 2e       	mov	r8, r31
    1474:	91 2c       	mov	r9, r1
    1476:	24 cf       	rjmp	.-440    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:411
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
      endADC = 161;
      startDelta = 90;
      endDelta = 100;
    1478:	24 e6       	ldi	r18, 0x64	; 100
    147a:	2a 87       	std	Y+10, r18	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:410
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
      endADC = 161;
      startDelta = 90;
    147c:	8a e5       	ldi	r24, 0x5A	; 90
    147e:	89 87       	std	Y+9, r24	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:409
      endDelta = 90;
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
      endADC = 161;
    1480:	61 ea       	ldi	r22, 0xA1	; 161
    1482:	66 2e       	mov	r6, r22
    1484:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:408
      startDelta = 80;
      endDelta = 90;
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
    1486:	77 e9       	ldi	r23, 0x97	; 151
    1488:	87 2e       	mov	r8, r23
    148a:	91 2c       	mov	r9, r1
    148c:	19 cf       	rjmp	.-462    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:418
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
      endADC = 175;
      startDelta = 100;
      endDelta = 110;
    148e:	9e e6       	ldi	r25, 0x6E	; 110
    1490:	9a 87       	std	Y+10, r25	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:417
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
      endADC = 175;
      startDelta = 100;
    1492:	e4 e6       	ldi	r30, 0x64	; 100
    1494:	e9 87       	std	Y+9, r30	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:416
      endDelta = 100;
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
      endADC = 175;
    1496:	4f ea       	ldi	r20, 0xAF	; 175
    1498:	64 2e       	mov	r6, r20
    149a:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:415
      startDelta = 90;
      endDelta = 100;
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
    149c:	51 ea       	ldi	r21, 0xA1	; 161
    149e:	85 2e       	mov	r8, r21
    14a0:	91 2c       	mov	r9, r1
    14a2:	0e cf       	rjmp	.-484    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:425
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
      endADC = 185;
      startDelta = 110;
      endDelta = 120;
    14a4:	f8 e7       	ldi	r31, 0x78	; 120
    14a6:	fa 87       	std	Y+10, r31	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:424
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
      endADC = 185;
      startDelta = 110;
    14a8:	2e e6       	ldi	r18, 0x6E	; 110
    14aa:	29 87       	std	Y+9, r18	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:423
      endDelta = 110;
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
      endADC = 185;
    14ac:	29 eb       	ldi	r18, 0xB9	; 185
    14ae:	62 2e       	mov	r6, r18
    14b0:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:422
      startDelta = 100;
      endDelta = 110;
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
    14b2:	3f ea       	ldi	r19, 0xAF	; 175
    14b4:	83 2e       	mov	r8, r19
    14b6:	91 2c       	mov	r9, r1
    14b8:	03 cf       	rjmp	.-506    	; 0x12c0 <__stack+0x1c1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:434
CALCULATE:
    float currentDelta = startDelta + (endDelta - startDelta) * 1.0 * (adcDiff - startADC)/(endADC - startADC); 
    return currentDelta;
  }
  else {
    return MAX_POSSIBLE_VALUE;
    14ba:	6f ef       	ldi	r22, 0xFF	; 255
    14bc:	4b cf       	rjmp	.-362    	; 0x1354 <__stack+0x255>
turnOFFVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:20
void pidRegulator::turnONVentilator() const {
  digitalWrite(A4T_VENT_PIN, HIGH);
}

void pidRegulator::turnOFFVentilator() const {
  digitalWrite(A4T_VENT_PIN, LOW);
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	80 e2       	ldi	r24, 0x20	; 32
    14c2:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:51
          m_pwm.setIntencity(1);
      }
      else {
        turnOFFVentilator();

        if(m_ADCdiffRead > m_warmerData.adc) {
    14c6:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <pid+0x17>
    14ca:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <pid+0x18>
    14ce:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <pid+0x2>
    14d2:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <pid+0x3>
    14d6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pid>
    14da:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pid+0x1>
    14de:	24 17       	cp	r18, r20
    14e0:	35 07       	cpc	r19, r21
    14e2:	30 f4       	brcc	.+12     	; 0x14f0 <__stack+0x3f1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:52
          m_pwm.setIntencity(m_warmerData.pwm - PID_STEP);
    14e4:	02 97       	sbiw	r24, 0x02	; 2
    14e6:	81 15       	cp	r24, r1
    14e8:	e4 e0       	ldi	r30, 0x04	; 4
    14ea:	9e 07       	cpc	r25, r30
    14ec:	a0 f0       	brcs	.+40     	; 0x1516 <__stack+0x417>
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <__stack+0x3f9>
    14f0:	81 15       	cp	r24, r1
    14f2:	f4 e0       	ldi	r31, 0x04	; 4
    14f4:	9f 07       	cpc	r25, r31
    14f6:	78 f0       	brcs	.+30     	; 0x1516 <__stack+0x417>
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	0c c0       	rjmp	.+24     	; 0x1516 <__stack+0x417>
    14fe:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pid>
    1502:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pid+0x1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:61
        }
      }
    }
    else if(m_warmerData.warmDirection == PID_WARM_UP) {

      if(m_ADCdiffRead > m_warmerData.adc) {
    1506:	24 17       	cp	r18, r20
    1508:	35 07       	cpc	r19, r21
    150a:	68 f7       	brcc	.-38     	; 0x14e6 <__stack+0x3e7>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:62
        m_pwm.setIntencity(m_warmerData.pwm - PID_STEP);
    150c:	02 97       	sbiw	r24, 0x02	; 2
    150e:	81 15       	cp	r24, r1
    1510:	24 e0       	ldi	r18, 0x04	; 4
    1512:	92 07       	cpc	r25, r18
    1514:	88 f7       	brcc	.-30     	; 0x14f8 <__stack+0x3f9>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    1516:	9b bd       	out	0x2b, r25	; 43
    1518:	8a bd       	out	0x2a, r24	; 42
    151a:	20 ce       	rjmp	.-960    	; 0x115c <__stack+0x5d>
move():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:196
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
  if (buffer) {
    151c:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
    1520:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	09 f4       	brne	.+2      	; 0x152a <__stack+0x42b>
    1528:	64 c0       	rjmp	.+200    	; 0x15f2 <__stack+0x4f3>
    152a:	69 81       	ldd	r22, Y+1	; 0x01
    152c:	7a 81       	ldd	r23, Y+2	; 0x02
_ZNK6StringcvMS_KFvvEEv.isra.0():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    152e:	61 15       	cp	r22, r1
    1530:	71 05       	cpc	r23, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <__stack+0x437>
    1534:	5c c0       	rjmp	.+184    	; 0x15ee <__stack+0x4ef>
move():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
    1536:	40 91 47 03 	lds	r20, 0x0347	; 0x800347 <stend::UARTbuffer+0x2>
    153a:	50 91 48 03 	lds	r21, 0x0348	; 0x800348 <stend::UARTbuffer+0x3>
    153e:	2d 81       	ldd	r18, Y+5	; 0x05
    1540:	3e 81       	ldd	r19, Y+6	; 0x06
    1542:	42 17       	cp	r20, r18
    1544:	53 07       	cpc	r21, r19
    1546:	08 f4       	brcc	.+2      	; 0x154a <__stack+0x44b>
    1548:	52 c0       	rjmp	.+164    	; 0x15ee <__stack+0x4ef>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
    154a:	0e 94 03 12 	call	0x2406	; 0x2406 <strcpy>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <stend::UARTbuffer+0x5>
    1556:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <stend::UARTbuffer+0x4>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
    155a:	1e 82       	std	Y+6, r1	; 0x06
    155c:	1d 82       	std	Y+5, r1	; 0x05
loop():
/home/stend/Документы/stend/hardware/hardware.ino:43
    
    stend::UARTbuffer = Serial.readStringUntil('\n');
    155e:	ce 01       	movw	r24, r28
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
/home/stend/Документы/stend/hardware/hardware.ino:45

    if(stend::UARTbuffer.length() == 0) {
    1566:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    156a:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    156e:	89 2b       	or	r24, r25
    1570:	09 f4       	brne	.+2      	; 0x1574 <__stack+0x475>
    1572:	0c ce       	rjmp	.-1000   	; 0x118c <__stack+0x8d>
/home/stend/Документы/stend/hardware/hardware.ino:50
      continue;
    }
    
    /* Установка температурной дельты - STD30 - 3 градуса и т.д.*/
    if(stend::UARTbuffer.startsWith("STD")) { 
    1574:	6f e3       	ldi	r22, 0x3F	; 63
    1576:	71 e0       	ldi	r23, 0x01	; 1
    1578:	ce 01       	movw	r24, r28
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	0e 94 d1 05 	call	0xba2	; 0xba2 <String::String(char const*)>
    1580:	ce 01       	movw	r24, r28
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <String::startsWith(String const&) const [clone .constprop.31]>
    1588:	18 2f       	mov	r17, r24
    158a:	ce 01       	movw	r24, r28
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
    1592:	11 23       	and	r17, r17
    1594:	09 f4       	brne	.+2      	; 0x1598 <__stack+0x499>
    1596:	44 c0       	rjmp	.+136    	; 0x1620 <__stack+0x521>
/home/stend/Документы/stend/hardware/hardware.ino:53

      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedDelta = static_cast<uint8_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
    1598:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    159c:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    15a0:	77 27       	eor	r23, r23
    15a2:	ce 01       	movw	r24, r28
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]>
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
    15ae:	60 e0       	ldi	r22, 0x00	; 0
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <__stack+0x4b9>
    15b4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <atol>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:53
    15b8:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <stend::setedDelta>
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
write():
    15c4:	83 e4       	ldi	r24, 0x43	; 67
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
print():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    15cc:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <stend::setedDelta>
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    15d6:	4a e0       	ldi	r20, 0x0A	; 10
    15d8:	0e 94 4d 04 	call	0x89a	; 0x89a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.49]>
write():
    15dc:	8d e2       	ldi	r24, 0x2D	; 45
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:57

      Serial.print("STDOK");
      Serial.println(stend::setedDelta);
      pid.keepThermalDelta(stend::setedDelta);
    15e4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <stend::setedDelta>
off():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:83
void pidRegulator::on() {
  keepThermalDelta(PID_ON_THERMAL_DELTA);
}

void pidRegulator::off() {
  keepThermalDelta(0);
    15e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.38]>
    15ec:	27 c0       	rjmp	.+78     	; 0x163c <__stack+0x53d>
move():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
    15ee:	0e 94 87 10 	call	0x210e	; 0x210e <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <stend::UARTbuffer+0x1>
    15fa:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <stend::UARTbuffer>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <stend::UARTbuffer+0x3>
    1606:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <stend::UARTbuffer+0x2>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <stend::UARTbuffer+0x5>
    1612:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <stend::UARTbuffer+0x4>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
    1616:	1a 82       	std	Y+2, r1	; 0x02
    1618:	19 82       	std	Y+1, r1	; 0x01
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
    161a:	1c 82       	std	Y+4, r1	; 0x04
    161c:	1b 82       	std	Y+3, r1	; 0x03
    161e:	9d cf       	rjmp	.-198    	; 0x155a <__stack+0x45b>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
  int compareTo(const String &s) const;
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1620:	89 e4       	ldi	r24, 0x49	; 73
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:62
      delay(100);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - ВКЛ */
    if(stend::UARTbuffer == "LT1ON") {
    1628:	88 23       	and	r24, r24
    162a:	79 f0       	breq	.+30     	; 0x164a <__stack+0x54b>
/home/stend/Документы/stend/hardware/hardware.ino:63
      Serial.println("LT1ONOK");
    162c:	8f e4       	ldi	r24, 0x4F	; 79
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
on():
/home/stend/Документы/stend/hardware/light_regulator.h:62

void lightregulator::on(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index = 6;
    1634:	e0 92 ea 02 	sts	0x02EA, r14	; 0x8002ea <light+0x17>
setintencity():
    1638:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lightregulator::setintencity(unsigned char) [clone .part.1] [clone .constprop.72]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:194
    if(stend::UARTbuffer.startsWith("MMB")) {
      
      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedMiraSteps = static_cast<uint16_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
      motor.goBackward(stend::setedMiraSteps);
      delay(100);
    163c:	64 e6       	ldi	r22, 0x64	; 100
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 8c 02 	call	0x518	; 0x518 <delay>
    1648:	a1 cd       	rjmp	.-1214   	; 0x118c <__stack+0x8d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    164a:	87 e5       	ldi	r24, 0x57	; 87
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:68
      Serial.println("LT1ONOK");
      light.on(FIRST_EMMITER);
      delay(100);
      continue;
    }
    if(stend::UARTbuffer == "LT2ON") {
    1652:	88 23       	and	r24, r24
    1654:	69 f0       	breq	.+26     	; 0x1670 <__stack+0x571>
/home/stend/Документы/stend/hardware/hardware.ino:69
      Serial.println("LT1ONOK");
    1656:	8f e4       	ldi	r24, 0x4F	; 79
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
on():
/home/stend/Документы/stend/hardware/light_regulator.h:66
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 6;
    165e:	e0 92 eb 02 	sts	0x02EB, r14	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    1662:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <light+0x2c>
    1666:	90 e0       	ldi	r25, 0x00	; 0
fastWriteB():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:137
    1668:	90 6b       	ori	r25, 0xB0	; 176
    166a:	0e 94 30 02 	call	0x460	; 0x460 <MCP_DAC::transfer(unsigned int) [clone .constprop.76]>
    166e:	e6 cf       	rjmp	.-52     	; 0x163c <__stack+0x53d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1670:	8d e5       	ldi	r24, 0x5D	; 93
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:75
      light.on(SECOND_EMMITER);
      delay(100);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - ВЫКЛ */
    if(stend::UARTbuffer == "LT1OFF") {
    1678:	88 23       	and	r24, r24
    167a:	39 f0       	breq	.+14     	; 0x168a <__stack+0x58b>
/home/stend/Документы/stend/hardware/hardware.ino:76
      Serial.println("LTOFFOK");
    167c:	84 e6       	ldi	r24, 0x64	; 100
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:110

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index--;
    if(m_inten1Index < 0) {
      m_inten1Index = 0;
    1684:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <light+0x17>
    1688:	d7 cf       	rjmp	.-82     	; 0x1638 <__stack+0x539>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    168a:	8c e6       	ldi	r24, 0x6C	; 108
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:81
      light.off(FIRST_EMMITER);
      delay(100);
      continue;
    }
    if(stend::UARTbuffer == "LT2OFF") {
    1692:	88 23       	and	r24, r24
    1694:	49 f0       	breq	.+18     	; 0x16a8 <__stack+0x5a9>
/home/stend/Документы/stend/hardware/hardware.ino:82
      Serial.println("LTOFFOK");
    1696:	84 e6       	ldi	r24, 0x64	; 100
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:79

    m_inten1Index = 0;
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 0;
    169e:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    16a2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <light+0x26>
    16a6:	df cf       	rjmp	.-66     	; 0x1666 <__stack+0x567>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    16a8:	83 e7       	ldi	r24, 0x73	; 115
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:88
      light.off(SECOND_EMMITER);
      delay(100);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - увеличить интенсивность */
    if(stend::UARTbuffer == "LT1U") {
    16b0:	88 23       	and	r24, r24
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <__stack+0x5d3>
/home/stend/Документы/stend/hardware/hardware.ino:89
      Serial.println("LT1UOK");
    16b4:	88 e7       	ldi	r24, 0x78	; 120
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:88

void lightregulator::riseUp(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index++;
    16bc:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <light+0x17>
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
/home/stend/Документы/stend/hardware/light_regulator.h:89
    if(m_inten1Index > LIGHT_INTENS_SIZE - 1) {
    16c2:	8d 30       	cpi	r24, 0x0D	; 13
    16c4:	1c f4       	brge	.+6      	; 0x16cc <__stack+0x5cd>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:108

void lightregulator::slowDown(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index--;
    16c6:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <light+0x17>
    16ca:	b6 cf       	rjmp	.-148    	; 0x1638 <__stack+0x539>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:90

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index++;
    if(m_inten1Index > LIGHT_INTENS_SIZE - 1) {
      m_inten1Index = LIGHT_INTENS_SIZE - 1;
    16cc:	f0 92 ea 02 	sts	0x02EA, r15	; 0x8002ea <light+0x17>
    16d0:	b3 cf       	rjmp	.-154    	; 0x1638 <__stack+0x539>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    16d2:	8f e7       	ldi	r24, 0x7F	; 127
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:94
      light.riseUp(FIRST_EMMITER);
      delay(100);
      continue;
    }
    if(stend::UARTbuffer == "LT2U") {
    16da:	88 23       	and	r24, r24
    16dc:	b9 f0       	breq	.+46     	; 0x170c <__stack+0x60d>
/home/stend/Документы/stend/hardware/hardware.ino:95
      Serial.println("LT2UOK");
    16de:	84 e8       	ldi	r24, 0x84	; 132
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:96
    }

    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index++;
    16e6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <light+0x18>
    16ea:	8f 5f       	subi	r24, 0xFF	; 255
/home/stend/Документы/stend/hardware/light_regulator.h:97
    if(m_inten2Index > LIGHT_INTENS_SIZE - 1) {
    16ec:	8d 30       	cpi	r24, 0x0D	; 13
    16ee:	1c f4       	brge	.+6      	; 0x16f6 <__stack+0x5f7>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:116
    }

    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index--;
    16f0:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <light+0x18>
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <__stack+0x5fb>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:98
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index++;
    if(m_inten2Index > LIGHT_INTENS_SIZE - 1) {
      m_inten2Index = LIGHT_INTENS_SIZE - 1;
    16f6:	f0 92 eb 02 	sts	0x02EB, r15	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    16fa:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <light+0x18>
    16fe:	0e 2e       	mov	r0, r30
    1700:	00 0c       	add	r0, r0
    1702:	ff 0b       	sbc	r31, r31
    1704:	ed 52       	subi	r30, 0x2D	; 45
    1706:	fd 4f       	sbci	r31, 0xFD	; 253
    1708:	86 a1       	ldd	r24, Z+38	; 0x26
    170a:	ad cf       	rjmp	.-166    	; 0x1666 <__stack+0x567>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    170c:	8b e8       	ldi	r24, 0x8B	; 139
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:101
      light.riseUp(SECOND_EMMITER);
      delay(100);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - снизить интенсивность */
    if(stend::UARTbuffer == "LT1D") {
    1714:	88 23       	and	r24, r24
    1716:	51 f0       	breq	.+20     	; 0x172c <__stack+0x62d>
/home/stend/Документы/stend/hardware/hardware.ino:102
      Serial.println("LT1DOK");
    1718:	80 e9       	ldi	r24, 0x90	; 144
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:108

void lightregulator::slowDown(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index--;
    1720:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <light+0x17>
    1724:	81 50       	subi	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/light_regulator.h:109
    if(m_inten1Index < 0) {
    1726:	87 fd       	sbrc	r24, 7
    1728:	ad cf       	rjmp	.-166    	; 0x1684 <__stack+0x585>
    172a:	cd cf       	rjmp	.-102    	; 0x16c6 <__stack+0x5c7>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    172c:	87 e9       	ldi	r24, 0x97	; 151
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:107
      light.slowDown(FIRST_EMMITER);
      delay(100);
      continue;
    }
    if(stend::UARTbuffer == "LT2D") {
    1734:	88 23       	and	r24, r24
    1736:	61 f0       	breq	.+24     	; 0x1750 <__stack+0x651>
/home/stend/Документы/stend/hardware/hardware.ino:108
      Serial.println("LT2DOK");
    1738:	8c e9       	ldi	r24, 0x9C	; 156
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:116
    }

    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index--;
    1740:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <light+0x18>
    1744:	81 50       	subi	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/light_regulator.h:117
    if(m_inten2Index < 0) {
    1746:	87 ff       	sbrs	r24, 7
    1748:	d3 cf       	rjmp	.-90     	; 0x16f0 <__stack+0x5f1>
/home/stend/Документы/stend/hardware/light_regulator.h:118
      m_inten2Index = 0;
    174a:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <light+0x18>
    174e:	d5 cf       	rjmp	.-86     	; 0x16fa <__stack+0x5fb>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1750:	83 ea       	ldi	r24, 0xA3	; 163
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:114
      light.slowDown(SECOND_EMMITER);
      delay(100);
      continue;
    }
    /* АЧТ ВКЛ */
    if(stend::UARTbuffer == "BBON") {
    1758:	88 23       	and	r24, r24
    175a:	31 f0       	breq	.+12     	; 0x1768 <__stack+0x669>
/home/stend/Документы/stend/hardware/hardware.ino:115
      Serial.println("BBONOK");
    175c:	88 ea       	ldi	r24, 0xA8	; 168
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
on():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:79

  m_warmerData = m_pidParams.dataForThermalDelta(thermalDelta);
}

void pidRegulator::on() {
  keepThermalDelta(PID_ON_THERMAL_DELTA);
    1764:	82 e3       	ldi	r24, 0x32	; 50
    1766:	40 cf       	rjmp	.-384    	; 0x15e8 <__stack+0x4e9>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1768:	8f ea       	ldi	r24, 0xAF	; 175
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:121
      pid.on();
      delay(100);
      continue;
    }
    /* АЧТ ВЫКЛ */
    if(stend::UARTbuffer == "BBOFF") {
    1770:	88 23       	and	r24, r24
    1772:	31 f0       	breq	.+12     	; 0x1780 <__stack+0x681>
/home/stend/Документы/stend/hardware/hardware.ino:122
      Serial.println("BBOFFOK");
    1774:	85 eb       	ldi	r24, 0xB5	; 181
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
off():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:83
}

void pidRegulator::off() {
  keepThermalDelta(0);
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	34 cf       	rjmp	.-408    	; 0x15e8 <__stack+0x4e9>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1780:	8d eb       	ldi	r24, 0xBD	; 189
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:128
      pid.off();
      delay(100);
      continue;
    }
    /* Вентилятор ВКЛ */
    if(stend::UARTbuffer == "VON") {
    1788:	88 23       	and	r24, r24
    178a:	49 f0       	breq	.+18     	; 0x179e <__stack+0x69f>
/home/stend/Документы/stend/hardware/hardware.ino:129
      Serial.println("VONOK");
    178c:	81 ec       	ldi	r24, 0xC1	; 193
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
turnONVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:16
  m_pwm.init();
  m_pidADC.init();  
}

void pidRegulator::turnONVentilator() const {
  digitalWrite(A4T_VENT_PIN, HIGH);
    1794:	61 e0       	ldi	r22, 0x01	; 1
turnOFFVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:20
}

void pidRegulator::turnOFFVentilator() const {
  digitalWrite(A4T_VENT_PIN, LOW);
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	0e 94 b1 01 	call	0x362	; 0x362 <digitalWrite>
    179c:	4f cf       	rjmp	.-354    	; 0x163c <__stack+0x53d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    179e:	87 ec       	ldi	r24, 0xC7	; 199
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:135
      pid.turnONVentilator();
      delay(100);
      continue;
    }
    /* Вентилятор ВЫКЛ */
    if(stend::UARTbuffer == "VOFF") {
    17a6:	88 23       	and	r24, r24
    17a8:	31 f0       	breq	.+12     	; 0x17b6 <__stack+0x6b7>
/home/stend/Документы/stend/hardware/hardware.ino:136
      Serial.println("VOFFOK");
    17aa:	8c ec       	ldi	r24, 0xCC	; 204
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
turnOFFVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:20
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	f0 cf       	rjmp	.-32     	; 0x1796 <__stack+0x697>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    17b6:	83 ed       	ldi	r24, 0xD3	; 211
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:142
      pid.turnOFFVentilator();
      delay(100);
      continue;
    }
    /* Перезагрузка устройства */
    if(stend::UARTbuffer == "RST") {
    17be:	88 23       	and	r24, r24
    17c0:	69 f0       	breq	.+26     	; 0x17dc <__stack+0x6dd>
/home/stend/Документы/stend/hardware/hardware.ino:143
      Serial.println("RSTOK");
    17c2:	87 ed       	ldi	r24, 0xD7	; 215
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
/home/stend/Документы/stend/hardware/hardware.ino:144
      delay(5000);
    17ca:	68 e8       	ldi	r22, 0x88	; 136
    17cc:	73 e1       	ldi	r23, 0x13	; 19
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 8c 02 	call	0x518	; 0x518 <delay>
/home/stend/Документы/stend/hardware/hardware.ino:145
      stend::resetFunc();
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	e0 e0       	ldi	r30, 0x00	; 0
    17da:	09 95       	icall
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    17dc:	8d ed       	ldi	r24, 0xDD	; 221
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:148
    }
    /* Передвинуть миру вперед на один шаг */
    if(stend::UARTbuffer == "MFS") {
    17e4:	88 23       	and	r24, r24
    17e6:	a1 f1       	breq	.+104    	; 0x1850 <__stack+0x751>
/home/stend/Документы/stend/hardware/hardware.ino:149
      Serial.println("MFSOK");
    17e8:	81 ee       	ldi	r24, 0xE1	; 225
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
makeStepForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:129
    _delay_ms(TACKT);
  }

  void makeStepForward() {

    setPC(m_forwardStrobes[m_forwardIndex]);
    17f0:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <motor+0x8>
    17f4:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <motor+0x9>
    17f8:	ec 53       	subi	r30, 0x3C	; 60
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	80 81       	ld	r24, Z
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 17 04 	call	0x82e	; 0x82e <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
    1804:	ff ef       	ldi	r31, 0xFF	; 255
    1806:	29 ef       	ldi	r18, 0xF9	; 249
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	f1 50       	subi	r31, 0x01	; 1
    180c:	20 40       	sbci	r18, 0x00	; 0
    180e:	80 40       	sbci	r24, 0x00	; 0
    1810:	e1 f7       	brne	.-8      	; 0x180a <__stack+0x70b>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <__stack+0x715>
    1814:	00 00       	nop
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    1816:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <motor+0x8>
    181a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <motor+0x9>
    181e:	01 96       	adiw	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/motor_regulator.h:43
    
    if(m_forwardIndex > 3) {
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	91 05       	cpc	r25, r1
    1824:	80 f4       	brcc	.+32     	; 0x1846 <__stack+0x747>
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    1826:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <motor+0x9>
    182a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <motor+0x8>
makeStepForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:132
  void makeStepForward() {

    setPC(m_forwardStrobes[m_forwardIndex]);
    _delay_ms(TACKT);
    nextForwardStrobe();
    m_stepsCounter++;
    182e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    1832:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
    1836:	01 96       	adiw	r24, 0x01	; 1
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:139
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
    _delay_ms(TACKT);
    nextBackwardStrobe();
    m_stepsCounter--;
    1838:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <motor+0xd>
    183c:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <motor+0xc>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:159
    }
    /* Передвинуть миру назад на один шаг */
    if(stend::UARTbuffer == "MBS") {
      Serial.println("MBSOK");
      motor.makeStepBackward();
      motor.stop();
    1840:	0e 94 70 05 	call	0xae0	; 0xae0 <motorRouter::stop() [clone .isra.11]>
    1844:	fb ce       	rjmp	.-522    	; 0x163c <__stack+0x53d>
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:44
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    
    if(m_forwardIndex > 3) {
      m_forwardIndex = 0;
    1846:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <motor+0x9>
    184a:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <motor+0x8>
    184e:	ef cf       	rjmp	.-34     	; 0x182e <__stack+0x72f>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1850:	87 ee       	ldi	r24, 0xE7	; 231
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:156
      motor.stop();
      delay(100);
      continue;
    }
    /* Передвинуть миру назад на один шаг */
    if(stend::UARTbuffer == "MBS") {
    1858:	88 23       	and	r24, r24
    185a:	71 f1       	breq	.+92     	; 0x18b8 <__stack+0x7b9>
/home/stend/Документы/stend/hardware/hardware.ino:157
      Serial.println("MBSOK");
    185c:	8b ee       	ldi	r24, 0xEB	; 235
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:136
    nextForwardStrobe();
    m_stepsCounter++;
  }
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
    1864:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <motor+0xa>
    1868:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <motor+0xb>
    186c:	ec 53       	subi	r30, 0x3C	; 60
    186e:	fd 4f       	sbci	r31, 0xFD	; 253
    1870:	84 81       	ldd	r24, Z+4	; 0x04
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 17 04 	call	0x82e	; 0x82e <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	e9 ef       	ldi	r30, 0xF9	; 249
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	e0 40       	sbci	r30, 0x00	; 0
    1882:	f0 40       	sbci	r31, 0x00	; 0
    1884:	e1 f7       	brne	.-8      	; 0x187e <__stack+0x77f>
    1886:	00 c0       	rjmp	.+0      	; 0x1888 <__stack+0x789>
    1888:	00 00       	nop
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    188a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <motor+0xa>
    188e:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <motor+0xb>
    1892:	01 96       	adiw	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/motor_regulator.h:43
    
    if(m_forwardIndex > 3) {
    1894:	84 30       	cpi	r24, 0x04	; 4
    1896:	91 05       	cpc	r25, r1
    1898:	50 f4       	brcc	.+20     	; 0x18ae <__stack+0x7af>
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    189a:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <motor+0xb>
    189e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <motor+0xa>
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:139
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
    _delay_ms(TACKT);
    nextBackwardStrobe();
    m_stepsCounter--;
    18a2:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    18a6:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	c5 cf       	rjmp	.-118    	; 0x1838 <__stack+0x739>
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:44
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    
    if(m_forwardIndex > 3) {
      m_forwardIndex = 0;
    18ae:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <motor+0xb>
    18b2:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <motor+0xa>
    18b6:	f5 cf       	rjmp	.-22     	; 0x18a2 <__stack+0x7a3>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    18b8:	81 ef       	ldi	r24, 0xF1	; 241
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:165
      delay(100);
      continue;
    }

    /* Установить "нулевое" положение миры */
    if(stend::UARTbuffer == "MSZ") {
    18c0:	88 23       	and	r24, r24
    18c2:	79 f0       	breq	.+30     	; 0x18e2 <__stack+0x7e3>
/home/stend/Документы/stend/hardware/hardware.ino:166
      Serial.println("MSZOK");
    18c4:	85 ef       	ldi	r24, 0xF5	; 245
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
savecurrentPositionAsStart():
/home/stend/Документы/stend/hardware/motor_regulator.h:149
    findZero();
    gotoStartPosition();
  }

  void savecurrentPositionAsStart() const {
    EEPROM.put(0, getCounter());
    18cc:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    18d0:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
_ZNK11motorRouter18eraseStartPositionEv.isra.13():
/home/stend/Документы/stend/hardware/motor_regulator.h:153
  }
  
  void eraseStartPosition() const {
    EEPROM.put(0, -1);
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 1f 04 	call	0x83e	; 0x83e <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.12] [clone .constprop.59]>
    18e0:	ad ce       	rjmp	.-678    	; 0x163c <__stack+0x53d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    18e2:	8b ef       	ldi	r24, 0xFB	; 251
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <String::equals(char const*) const [clone .constprop.29]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:173
      delay(100);
      continue;
    }
    
    /* Сбросить "нулевое" положение миры */
    if(stend::UARTbuffer == "MRZ") {
    18ea:	88 23       	and	r24, r24
    18ec:	39 f0       	breq	.+14     	; 0x18fc <__stack+0x7fd>
/home/stend/Документы/stend/hardware/hardware.ino:174
      Serial.println("MRZOK");
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	0e 94 c3 04 	call	0x986	; 0x986 <Print::println(char const*) [clone .constprop.40]>
_ZNK11motorRouter18eraseStartPositionEv.isra.13():
/home/stend/Документы/stend/hardware/motor_regulator.h:153
    18f6:	5a 82       	std	Y+2, r5	; 0x02
    18f8:	49 82       	std	Y+1, r4	; 0x01
    18fa:	ee cf       	rjmp	.-36     	; 0x18d8 <__stack+0x7d9>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:181
      delay(100);
      continue;
    }

    /* Передвинуть миру вперед (+) или назад (-) */
    if(stend::UARTbuffer.startsWith("MMF")) {
    18fc:	65 e0       	ldi	r22, 0x05	; 5
    18fe:	72 e0       	ldi	r23, 0x02	; 2
    1900:	ce 01       	movw	r24, r28
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	0e 94 d1 05 	call	0xba2	; 0xba2 <String::String(char const*)>
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <String::startsWith(String const&) const [clone .constprop.31]>
    1910:	18 2f       	mov	r17, r24
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
    191a:	11 23       	and	r17, r17
    191c:	09 f4       	brne	.+2      	; 0x1920 <__stack+0x821>
    191e:	5e c0       	rjmp	.+188    	; 0x19dc <__stack+0x8dd>
/home/stend/Документы/stend/hardware/hardware.ino:184
            
      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedMiraSteps = static_cast<uint16_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
    1920:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    1924:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    1928:	77 27       	eor	r23, r23
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]>
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	d9 f1       	breq	.+118    	; 0x19b0 <__stack+0x8b1>
    193a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <atol>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:184
    193e:	6b 01       	movw	r12, r22
    1940:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <__data_end+0x1>
    1944:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <__data_end>
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
main():
/home/stend/Документы/stend/hardware/motor_regulator.h:158
  }

  void goForward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    1950:	10 e0       	ldi	r17, 0x00	; 0
    1952:	00 e0       	ldi	r16, 0x00	; 0
goForward():
    1954:	0c 15       	cp	r16, r12
    1956:	1d 05       	cpc	r17, r13
    1958:	a0 f5       	brcc	.+104    	; 0x19c2 <__stack+0x8c3>
makeStepForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:129
    _delay_ms(TACKT);
  }

  void makeStepForward() {

    setPC(m_forwardStrobes[m_forwardIndex]);
    195a:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <motor+0x8>
    195e:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <motor+0x9>
    1962:	ec 53       	subi	r30, 0x3C	; 60
    1964:	fd 4f       	sbci	r31, 0xFD	; 253
    1966:	80 81       	ld	r24, Z
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 17 04 	call	0x82e	; 0x82e <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
    196e:	2f ef       	ldi	r18, 0xFF	; 255
    1970:	89 ef       	ldi	r24, 0xF9	; 249
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	21 50       	subi	r18, 0x01	; 1
    1976:	80 40       	sbci	r24, 0x00	; 0
    1978:	90 40       	sbci	r25, 0x00	; 0
    197a:	e1 f7       	brne	.-8      	; 0x1974 <__stack+0x875>
    197c:	00 c0       	rjmp	.+0      	; 0x197e <__stack+0x87f>
    197e:	00 00       	nop
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    1980:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <motor+0x8>
    1984:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <motor+0x9>
    1988:	01 96       	adiw	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/motor_regulator.h:43
    
    if(m_forwardIndex > 3) {
    198a:	84 30       	cpi	r24, 0x04	; 4
    198c:	91 05       	cpc	r25, r1
    198e:	a0 f4       	brcc	.+40     	; 0x19b8 <__stack+0x8b9>
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    1990:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <motor+0x9>
    1994:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <motor+0x8>
makeStepForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:132
  void makeStepForward() {

    setPC(m_forwardStrobes[m_forwardIndex]);
    _delay_ms(TACKT);
    nextForwardStrobe();
    m_stepsCounter++;
    1998:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    199c:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <motor+0xd>
    19a6:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <motor+0xc>
goForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:158
    EEPROM.put(0, -1);
  }

  void goForward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    19aa:	0f 5f       	subi	r16, 0xFF	; 255
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	d2 cf       	rjmp	.-92     	; 0x1954 <__stack+0x855>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	cb 01       	movw	r24, r22
    19b6:	c3 cf       	rjmp	.-122    	; 0x193e <__stack+0x83f>
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:44
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    
    if(m_forwardIndex > 3) {
      m_forwardIndex = 0;
    19b8:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <motor+0x9>
    19bc:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <motor+0x8>
    19c0:	eb cf       	rjmp	.-42     	; 0x1998 <__stack+0x899>
goForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:162
    
    for(uint16_t i = 0; i < steps; i++) {
      makeStepForward();
    }

    stop();
    19c2:	0e 94 70 05 	call	0xae0	; 0xae0 <motorRouter::stop() [clone .isra.11]>
write():
    19c6:	89 e0       	ldi	r24, 0x09	; 9
    19c8:	92 e0       	ldi	r25, 0x02	; 2
    19ca:	0e 94 40 04 	call	0x880	; 0x880 <Print::write(char const*) [clone .part.2] [clone .constprop.52]>
goBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:176
    }

    stop();

    Serial.print("MMBOK");
    Serial.println(getCounter());
    19ce:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    19d2:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
    19d6:	0e 94 91 04 	call	0x922	; 0x922 <Print::println(int, int) [clone .constprop.44]>
    19da:	30 ce       	rjmp	.-928    	; 0x163c <__stack+0x53d>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:189
      motor.goForward(stend::setedMiraSteps);
      delay(100);
      continue;
    }
    if(stend::UARTbuffer.startsWith("MMB")) {
    19dc:	6f e0       	ldi	r22, 0x0F	; 15
    19de:	72 e0       	ldi	r23, 0x02	; 2
    19e0:	ce 01       	movw	r24, r28
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	0e 94 d1 05 	call	0xba2	; 0xba2 <String::String(char const*)>
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <String::startsWith(String const&) const [clone .constprop.31]>
    19f0:	18 2f       	mov	r17, r24
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
    19fa:	11 23       	and	r17, r17
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <__stack+0x901>
    19fe:	c6 cb       	rjmp	.-2164   	; 0x118c <__stack+0x8d>
/home/stend/Документы/stend/hardware/hardware.ino:192
      
      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedMiraSteps = static_cast<uint16_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
    1a00:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    1a04:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    1a08:	77 27       	eor	r23, r23
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <String::substring(unsigned int, unsigned int) const [clone .constprop.34]>
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	d9 f1       	breq	.+118    	; 0x1a90 <__stack+0x991>
    1a1a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <atol>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:192
    1a1e:	6b 01       	movw	r12, r22
    1a20:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <__data_end+0x1>
    1a24:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <__data_end>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <String::~String()>
main():
/home/stend/Документы/stend/hardware/motor_regulator.h:169
    Serial.println(getCounter());
  }

  void goBackward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	00 e0       	ldi	r16, 0x00	; 0
goBackward():
    1a34:	0c 15       	cp	r16, r12
    1a36:	1d 05       	cpc	r17, r13
    1a38:	a0 f5       	brcc	.+104    	; 0x1aa2 <__stack+0x9a3>
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:136
    nextForwardStrobe();
    m_stepsCounter++;
  }
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
    1a3a:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <motor+0xa>
    1a3e:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <motor+0xb>
    1a42:	ec 53       	subi	r30, 0x3C	; 60
    1a44:	fd 4f       	sbci	r31, 0xFD	; 253
    1a46:	84 81       	ldd	r24, Z+4	; 0x04
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 17 04 	call	0x82e	; 0x82e <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
    1a4e:	ef ef       	ldi	r30, 0xFF	; 255
    1a50:	f9 ef       	ldi	r31, 0xF9	; 249
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	e1 50       	subi	r30, 0x01	; 1
    1a56:	f0 40       	sbci	r31, 0x00	; 0
    1a58:	20 40       	sbci	r18, 0x00	; 0
    1a5a:	e1 f7       	brne	.-8      	; 0x1a54 <__stack+0x955>
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <__stack+0x95f>
    1a5e:	00 00       	nop
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    1a60:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <motor+0xa>
    1a64:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <motor+0xb>
    1a68:	01 96       	adiw	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/motor_regulator.h:43
    
    if(m_forwardIndex > 3) {
    1a6a:	84 30       	cpi	r24, 0x04	; 4
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	a0 f4       	brcc	.+40     	; 0x1a98 <__stack+0x999>
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    1a70:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <motor+0xb>
    1a74:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <motor+0xa>
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:139
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
    _delay_ms(TACKT);
    nextBackwardStrobe();
    m_stepsCounter--;
    1a78:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    1a7c:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <motor+0xd>
    1a86:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <motor+0xc>
goBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:169
    Serial.println(getCounter());
  }

  void goBackward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    1a8a:	0f 5f       	subi	r16, 0xFF	; 255
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	d2 cf       	rjmp	.-92     	; 0x1a34 <__stack+0x935>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	cb 01       	movw	r24, r22
    1a96:	c3 cf       	rjmp	.-122    	; 0x1a1e <__stack+0x91f>
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:44
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    
    if(m_forwardIndex > 3) {
      m_forwardIndex = 0;
    1a98:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <motor+0xb>
    1a9c:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <motor+0xa>
    1aa0:	eb cf       	rjmp	.-42     	; 0x1a78 <__stack+0x979>
goBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:173
    
    for(uint16_t i = 0; i < steps; i++) {
      makeStepBackward();
    }

    stop();
    1aa2:	0e 94 70 05 	call	0xae0	; 0xae0 <motorRouter::stop() [clone .isra.11]>
write():
    1aa6:	83 e1       	ldi	r24, 0x13	; 19
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	8f cf       	rjmp	.-226    	; 0x19ca <__stack+0x8cb>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1aac:	0e 94 00 04 	call	0x800	; 0x800 <serialEventRun()>
    1ab0:	12 cb       	rjmp	.-2524   	; 0x10d6 <main+0x1a0>

00001ab2 <_GLOBAL__sub_D__ZN14lightregulatorC2Ev>:
__static_initialization_and_destruction_0():
/home/stend/Документы/stend/hardware/hardware.ino:10
#define DELTAS_SIZE 10
#define START_THERMAL_DELTA 0

namespace stend {

  String UARTbuffer;
    1ab2:	85 e4       	ldi	r24, 0x45	; 69
    1ab4:	93 e0       	ldi	r25, 0x03	; 3
    1ab6:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <String::~String()>

00001aba <atol>:
atol():
    1aba:	1f 93       	push	r17
    1abc:	fc 01       	movw	r30, r24
    1abe:	99 27       	eor	r25, r25
    1ac0:	88 27       	eor	r24, r24
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	e8 94       	clt
    1ac6:	11 91       	ld	r17, Z+
    1ac8:	10 32       	cpi	r17, 0x20	; 32
    1aca:	e9 f3       	breq	.-6      	; 0x1ac6 <atol+0xc>
    1acc:	19 30       	cpi	r17, 0x09	; 9
    1ace:	10 f0       	brcs	.+4      	; 0x1ad4 <atol+0x1a>
    1ad0:	1e 30       	cpi	r17, 0x0E	; 14
    1ad2:	c8 f3       	brcs	.-14     	; 0x1ac6 <atol+0xc>
    1ad4:	1b 32       	cpi	r17, 0x2B	; 43
    1ad6:	51 f0       	breq	.+20     	; 0x1aec <atol+0x32>
    1ad8:	1d 32       	cpi	r17, 0x2D	; 45
    1ada:	49 f4       	brne	.+18     	; 0x1aee <atol+0x34>
    1adc:	68 94       	set
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <atol+0x32>
    1ae0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__mulsi_const_10>
    1ae4:	61 0f       	add	r22, r17
    1ae6:	71 1d       	adc	r23, r1
    1ae8:	81 1d       	adc	r24, r1
    1aea:	91 1d       	adc	r25, r1
    1aec:	11 91       	ld	r17, Z+
    1aee:	10 53       	subi	r17, 0x30	; 48
    1af0:	1a 30       	cpi	r17, 0x0A	; 10
    1af2:	b0 f3       	brcs	.-20     	; 0x1ae0 <atol+0x26>
    1af4:	3e f4       	brtc	.+14     	; 0x1b04 <atol+0x4a>
    1af6:	90 95       	com	r25
    1af8:	80 95       	com	r24
    1afa:	70 95       	com	r23
    1afc:	61 95       	neg	r22
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	1f 91       	pop	r17
    1b06:	08 95       	ret

00001b08 <__mulsi_const_10>:
__mulsi_const_10():
    1b08:	59 2f       	mov	r21, r25
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	37 2f       	mov	r19, r23
    1b0e:	26 2f       	mov	r18, r22
    1b10:	66 0f       	add	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	66 0f       	add	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	62 0f       	add	r22, r18
    1b22:	73 1f       	adc	r23, r19
    1b24:	84 1f       	adc	r24, r20
    1b26:	95 1f       	adc	r25, r21
    1b28:	66 0f       	add	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	08 95       	ret

00001b32 <__floatunsisf>:
__floatunsisf():
    1b32:	e8 94       	clt
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <__floatsisf+0x12>

00001b36 <__floatsisf>:
    1b36:	97 fb       	bst	r25, 7
    1b38:	3e f4       	brtc	.+14     	; 0x1b48 <__floatsisf+0x12>
    1b3a:	90 95       	com	r25
    1b3c:	80 95       	com	r24
    1b3e:	70 95       	com	r23
    1b40:	61 95       	neg	r22
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	99 23       	and	r25, r25
    1b4a:	a9 f0       	breq	.+42     	; 0x1b76 <__floatsisf+0x40>
    1b4c:	f9 2f       	mov	r31, r25
    1b4e:	96 e9       	ldi	r25, 0x96	; 150
    1b50:	bb 27       	eor	r27, r27
    1b52:	93 95       	inc	r25
    1b54:	f6 95       	lsr	r31
    1b56:	87 95       	ror	r24
    1b58:	77 95       	ror	r23
    1b5a:	67 95       	ror	r22
    1b5c:	b7 95       	ror	r27
    1b5e:	f1 11       	cpse	r31, r1
    1b60:	f8 cf       	rjmp	.-16     	; 0x1b52 <__floatsisf+0x1c>
    1b62:	fa f4       	brpl	.+62     	; 0x1ba2 <__floatsisf+0x6c>
    1b64:	bb 0f       	add	r27, r27
    1b66:	11 f4       	brne	.+4      	; 0x1b6c <__floatsisf+0x36>
    1b68:	60 ff       	sbrs	r22, 0
    1b6a:	1b c0       	rjmp	.+54     	; 0x1ba2 <__floatsisf+0x6c>
    1b6c:	6f 5f       	subi	r22, 0xFF	; 255
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	8f 4f       	sbci	r24, 0xFF	; 255
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	16 c0       	rjmp	.+44     	; 0x1ba2 <__floatsisf+0x6c>
    1b76:	88 23       	and	r24, r24
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <__floatsisf+0x48>
    1b7a:	96 e9       	ldi	r25, 0x96	; 150
    1b7c:	11 c0       	rjmp	.+34     	; 0x1ba0 <__floatsisf+0x6a>
    1b7e:	77 23       	and	r23, r23
    1b80:	21 f0       	breq	.+8      	; 0x1b8a <__floatsisf+0x54>
    1b82:	9e e8       	ldi	r25, 0x8E	; 142
    1b84:	87 2f       	mov	r24, r23
    1b86:	76 2f       	mov	r23, r22
    1b88:	05 c0       	rjmp	.+10     	; 0x1b94 <__floatsisf+0x5e>
    1b8a:	66 23       	and	r22, r22
    1b8c:	71 f0       	breq	.+28     	; 0x1baa <__floatsisf+0x74>
    1b8e:	96 e8       	ldi	r25, 0x86	; 134
    1b90:	86 2f       	mov	r24, r22
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	2a f0       	brmi	.+10     	; 0x1ba2 <__floatsisf+0x6c>
    1b98:	9a 95       	dec	r25
    1b9a:	66 0f       	add	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	da f7       	brpl	.-10     	; 0x1b98 <__floatsisf+0x62>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	97 f9       	bld	r25, 7
    1baa:	08 95       	ret

00001bac <__mulsf3>:
__mulsf3():
    1bac:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__mulsf3x>
    1bb0:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_round>
    1bb4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__fp_pscA>
    1bb8:	38 f0       	brcs	.+14     	; 0x1bc8 <__mulsf3+0x1c>
    1bba:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fp_pscB>
    1bbe:	20 f0       	brcs	.+8      	; 0x1bc8 <__mulsf3+0x1c>
    1bc0:	95 23       	and	r25, r21
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <__mulsf3+0x1c>
    1bc4:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_inf>
    1bc8:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_nan>
    1bcc:	11 24       	eor	r1, r1
    1bce:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_szero>

00001bd2 <__mulsf3x>:
__mulsf3x():
    1bd2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fp_split3>
    1bd6:	70 f3       	brcs	.-36     	; 0x1bb4 <__mulsf3+0x8>

00001bd8 <__mulsf3_pse>:
    1bd8:	95 9f       	mul	r25, r21
    1bda:	c1 f3       	breq	.-16     	; 0x1bcc <__mulsf3+0x20>
    1bdc:	95 0f       	add	r25, r21
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	55 1f       	adc	r21, r21
    1be2:	62 9f       	mul	r22, r18
    1be4:	f0 01       	movw	r30, r0
    1be6:	72 9f       	mul	r23, r18
    1be8:	bb 27       	eor	r27, r27
    1bea:	f0 0d       	add	r31, r0
    1bec:	b1 1d       	adc	r27, r1
    1bee:	63 9f       	mul	r22, r19
    1bf0:	aa 27       	eor	r26, r26
    1bf2:	f0 0d       	add	r31, r0
    1bf4:	b1 1d       	adc	r27, r1
    1bf6:	aa 1f       	adc	r26, r26
    1bf8:	64 9f       	mul	r22, r20
    1bfa:	66 27       	eor	r22, r22
    1bfc:	b0 0d       	add	r27, r0
    1bfe:	a1 1d       	adc	r26, r1
    1c00:	66 1f       	adc	r22, r22
    1c02:	82 9f       	mul	r24, r18
    1c04:	22 27       	eor	r18, r18
    1c06:	b0 0d       	add	r27, r0
    1c08:	a1 1d       	adc	r26, r1
    1c0a:	62 1f       	adc	r22, r18
    1c0c:	73 9f       	mul	r23, r19
    1c0e:	b0 0d       	add	r27, r0
    1c10:	a1 1d       	adc	r26, r1
    1c12:	62 1f       	adc	r22, r18
    1c14:	83 9f       	mul	r24, r19
    1c16:	a0 0d       	add	r26, r0
    1c18:	61 1d       	adc	r22, r1
    1c1a:	22 1f       	adc	r18, r18
    1c1c:	74 9f       	mul	r23, r20
    1c1e:	33 27       	eor	r19, r19
    1c20:	a0 0d       	add	r26, r0
    1c22:	61 1d       	adc	r22, r1
    1c24:	23 1f       	adc	r18, r19
    1c26:	84 9f       	mul	r24, r20
    1c28:	60 0d       	add	r22, r0
    1c2a:	21 1d       	adc	r18, r1
    1c2c:	82 2f       	mov	r24, r18
    1c2e:	76 2f       	mov	r23, r22
    1c30:	6a 2f       	mov	r22, r26
    1c32:	11 24       	eor	r1, r1
    1c34:	9f 57       	subi	r25, 0x7F	; 127
    1c36:	50 40       	sbci	r21, 0x00	; 0
    1c38:	9a f0       	brmi	.+38     	; 0x1c60 <__mulsf3_pse+0x88>
    1c3a:	f1 f0       	breq	.+60     	; 0x1c78 <__mulsf3_pse+0xa0>
    1c3c:	88 23       	and	r24, r24
    1c3e:	4a f0       	brmi	.+18     	; 0x1c52 <__mulsf3_pse+0x7a>
    1c40:	ee 0f       	add	r30, r30
    1c42:	ff 1f       	adc	r31, r31
    1c44:	bb 1f       	adc	r27, r27
    1c46:	66 1f       	adc	r22, r22
    1c48:	77 1f       	adc	r23, r23
    1c4a:	88 1f       	adc	r24, r24
    1c4c:	91 50       	subi	r25, 0x01	; 1
    1c4e:	50 40       	sbci	r21, 0x00	; 0
    1c50:	a9 f7       	brne	.-22     	; 0x1c3c <__mulsf3_pse+0x64>
    1c52:	9e 3f       	cpi	r25, 0xFE	; 254
    1c54:	51 05       	cpc	r21, r1
    1c56:	80 f0       	brcs	.+32     	; 0x1c78 <__mulsf3_pse+0xa0>
    1c58:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_inf>
    1c5c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_szero>
    1c60:	5f 3f       	cpi	r21, 0xFF	; 255
    1c62:	e4 f3       	brlt	.-8      	; 0x1c5c <__mulsf3_pse+0x84>
    1c64:	98 3e       	cpi	r25, 0xE8	; 232
    1c66:	d4 f3       	brlt	.-12     	; 0x1c5c <__mulsf3_pse+0x84>
    1c68:	86 95       	lsr	r24
    1c6a:	77 95       	ror	r23
    1c6c:	67 95       	ror	r22
    1c6e:	b7 95       	ror	r27
    1c70:	f7 95       	ror	r31
    1c72:	e7 95       	ror	r30
    1c74:	9f 5f       	subi	r25, 0xFF	; 255
    1c76:	c1 f7       	brne	.-16     	; 0x1c68 <__mulsf3_pse+0x90>
    1c78:	fe 2b       	or	r31, r30
    1c7a:	88 0f       	add	r24, r24
    1c7c:	91 1d       	adc	r25, r1
    1c7e:	96 95       	lsr	r25
    1c80:	87 95       	ror	r24
    1c82:	97 f9       	bld	r25, 7
    1c84:	08 95       	ret

00001c86 <__fp_inf>:
    1c86:	97 f9       	bld	r25, 7
    1c88:	9f 67       	ori	r25, 0x7F	; 127
    1c8a:	80 e8       	ldi	r24, 0x80	; 128
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	08 95       	ret

00001c92 <__fp_nan>:
    1c92:	9f ef       	ldi	r25, 0xFF	; 255
    1c94:	80 ec       	ldi	r24, 0xC0	; 192
    1c96:	08 95       	ret

00001c98 <__fp_pscA>:
    1c98:	00 24       	eor	r0, r0
    1c9a:	0a 94       	dec	r0
    1c9c:	16 16       	cp	r1, r22
    1c9e:	17 06       	cpc	r1, r23
    1ca0:	18 06       	cpc	r1, r24
    1ca2:	09 06       	cpc	r0, r25
__fp_pscA():
    1ca4:	08 95       	ret

00001ca6 <__fp_pscB>:
__fp_pscB():
    1ca6:	00 24       	eor	r0, r0
    1ca8:	0a 94       	dec	r0
    1caa:	12 16       	cp	r1, r18
    1cac:	13 06       	cpc	r1, r19
    1cae:	14 06       	cpc	r1, r20
    1cb0:	05 06       	cpc	r0, r21
    1cb2:	08 95       	ret

00001cb4 <__fp_round>:
__fp_round():
    1cb4:	09 2e       	mov	r0, r25
    1cb6:	03 94       	inc	r0
    1cb8:	00 0c       	add	r0, r0
    1cba:	11 f4       	brne	.+4      	; 0x1cc0 <__fp_round+0xc>
    1cbc:	88 23       	and	r24, r24
    1cbe:	52 f0       	brmi	.+20     	; 0x1cd4 <__fp_round+0x20>
    1cc0:	bb 0f       	add	r27, r27
    1cc2:	40 f4       	brcc	.+16     	; 0x1cd4 <__fp_round+0x20>
    1cc4:	bf 2b       	or	r27, r31
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <__fp_round+0x18>
    1cc8:	60 ff       	sbrs	r22, 0
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <__fp_round+0x20>
    1ccc:	6f 5f       	subi	r22, 0xFF	; 255
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	08 95       	ret

00001cd6 <__fp_split3>:
__fp_split3():
    1cd6:	57 fd       	sbrc	r21, 7
    1cd8:	90 58       	subi	r25, 0x80	; 128
    1cda:	44 0f       	add	r20, r20
    1cdc:	55 1f       	adc	r21, r21
    1cde:	59 f0       	breq	.+22     	; 0x1cf6 <__fp_splitA+0x10>
    1ce0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce2:	71 f0       	breq	.+28     	; 0x1d00 <__fp_splitA+0x1a>
    1ce4:	47 95       	ror	r20

00001ce6 <__fp_splitA>:
    1ce6:	88 0f       	add	r24, r24
    1ce8:	97 fb       	bst	r25, 7
    1cea:	99 1f       	adc	r25, r25
    1cec:	61 f0       	breq	.+24     	; 0x1d06 <__fp_splitA+0x20>
    1cee:	9f 3f       	cpi	r25, 0xFF	; 255
    1cf0:	79 f0       	breq	.+30     	; 0x1d10 <__fp_splitA+0x2a>
    1cf2:	87 95       	ror	r24
    1cf4:	08 95       	ret
    1cf6:	12 16       	cp	r1, r18
    1cf8:	13 06       	cpc	r1, r19
    1cfa:	14 06       	cpc	r1, r20
    1cfc:	55 1f       	adc	r21, r21
    1cfe:	f2 cf       	rjmp	.-28     	; 0x1ce4 <__fp_split3+0xe>
    1d00:	46 95       	lsr	r20
    1d02:	f1 df       	rcall	.-30     	; 0x1ce6 <__fp_splitA>
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <__fp_splitA+0x30>
    1d06:	16 16       	cp	r1, r22
    1d08:	17 06       	cpc	r1, r23
    1d0a:	18 06       	cpc	r1, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	f1 cf       	rjmp	.-30     	; 0x1cf2 <__fp_splitA+0xc>
    1d10:	86 95       	lsr	r24
    1d12:	71 05       	cpc	r23, r1
    1d14:	61 05       	cpc	r22, r1
    1d16:	08 94       	sec
    1d18:	08 95       	ret

00001d1a <__fp_zero>:
__fp_zero():
    1d1a:	e8 94       	clt

00001d1c <__fp_szero>:
    1d1c:	bb 27       	eor	r27, r27
    1d1e:	66 27       	eor	r22, r22
    1d20:	77 27       	eor	r23, r23
    1d22:	cb 01       	movw	r24, r22
    1d24:	97 f9       	bld	r25, 7
    1d26:	08 95       	ret

00001d28 <eeprom_read_byte>:
eeprom_read_byte():
    1d28:	e1 99       	sbic	0x1c, 1	; 28
    1d2a:	fe cf       	rjmp	.-4      	; 0x1d28 <eeprom_read_byte>
    1d2c:	9f bb       	out	0x1f, r25	; 31
    1d2e:	8e bb       	out	0x1e, r24	; 30
    1d30:	e0 9a       	sbi	0x1c, 0	; 28
    1d32:	99 27       	eor	r25, r25
    1d34:	8d b3       	in	r24, 0x1d	; 29
    1d36:	08 95       	ret

00001d38 <eeprom_write_byte>:
eeprom_write_byte():
    1d38:	26 2f       	mov	r18, r22

00001d3a <eeprom_write_r18>:
    1d3a:	e1 99       	sbic	0x1c, 1	; 28
    1d3c:	fe cf       	rjmp	.-4      	; 0x1d3a <eeprom_write_r18>
    1d3e:	9f bb       	out	0x1f, r25	; 31
    1d40:	8e bb       	out	0x1e, r24	; 30
    1d42:	2d bb       	out	0x1d, r18	; 29
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	e2 9a       	sbi	0x1c, 2	; 28
    1d4a:	e1 9a       	sbi	0x1c, 1	; 28
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	08 95       	ret

00001d52 <__subsf3>:
__subsf3():
    1d52:	50 58       	subi	r21, 0x80	; 128

00001d54 <__addsf3>:
    1d54:	bb 27       	eor	r27, r27
    1d56:	aa 27       	eor	r26, r26
    1d58:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__addsf3x>
    1d5c:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_round>
__addsf3():
    1d60:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__fp_pscA>
    1d64:	38 f0       	brcs	.+14     	; 0x1d74 <__addsf3+0x20>
    1d66:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fp_pscB>
    1d6a:	20 f0       	brcs	.+8      	; 0x1d74 <__addsf3+0x20>
    1d6c:	39 f4       	brne	.+14     	; 0x1d7c <__addsf3+0x28>
    1d6e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d70:	19 f4       	brne	.+6      	; 0x1d78 <__addsf3+0x24>
    1d72:	26 f4       	brtc	.+8      	; 0x1d7c <__addsf3+0x28>
    1d74:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_nan>
    1d78:	0e f4       	brtc	.+2      	; 0x1d7c <__addsf3+0x28>
    1d7a:	e0 95       	com	r30
    1d7c:	e7 fb       	bst	r30, 7
    1d7e:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_inf>

00001d82 <__addsf3x>:
__addsf3x():
    1d82:	e9 2f       	mov	r30, r25
    1d84:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fp_split3>
    1d88:	58 f3       	brcs	.-42     	; 0x1d60 <__addsf3+0xc>
    1d8a:	ba 17       	cp	r27, r26
    1d8c:	62 07       	cpc	r22, r18
    1d8e:	73 07       	cpc	r23, r19
    1d90:	84 07       	cpc	r24, r20
    1d92:	95 07       	cpc	r25, r21
    1d94:	20 f0       	brcs	.+8      	; 0x1d9e <__addsf3x+0x1c>
    1d96:	79 f4       	brne	.+30     	; 0x1db6 <__addsf3x+0x34>
    1d98:	a6 f5       	brtc	.+104    	; 0x1e02 <__addsf3x+0x80>
    1d9a:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__fp_zero>
    1d9e:	0e f4       	brtc	.+2      	; 0x1da2 <__addsf3x+0x20>
    1da0:	e0 95       	com	r30
    1da2:	0b 2e       	mov	r0, r27
    1da4:	ba 2f       	mov	r27, r26
    1da6:	a0 2d       	mov	r26, r0
    1da8:	0b 01       	movw	r0, r22
    1daa:	b9 01       	movw	r22, r18
    1dac:	90 01       	movw	r18, r0
    1dae:	0c 01       	movw	r0, r24
    1db0:	ca 01       	movw	r24, r20
    1db2:	a0 01       	movw	r20, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	ff 27       	eor	r31, r31
    1db8:	59 1b       	sub	r21, r25
    1dba:	99 f0       	breq	.+38     	; 0x1de2 <__addsf3x+0x60>
    1dbc:	59 3f       	cpi	r21, 0xF9	; 249
    1dbe:	50 f4       	brcc	.+20     	; 0x1dd4 <__addsf3x+0x52>
    1dc0:	50 3e       	cpi	r21, 0xE0	; 224
    1dc2:	68 f1       	brcs	.+90     	; 0x1e1e <__addsf3x+0x9c>
    1dc4:	1a 16       	cp	r1, r26
    1dc6:	f0 40       	sbci	r31, 0x00	; 0
    1dc8:	a2 2f       	mov	r26, r18
    1dca:	23 2f       	mov	r18, r19
    1dcc:	34 2f       	mov	r19, r20
    1dce:	44 27       	eor	r20, r20
    1dd0:	58 5f       	subi	r21, 0xF8	; 248
    1dd2:	f3 cf       	rjmp	.-26     	; 0x1dba <__addsf3x+0x38>
    1dd4:	46 95       	lsr	r20
    1dd6:	37 95       	ror	r19
    1dd8:	27 95       	ror	r18
    1dda:	a7 95       	ror	r26
    1ddc:	f0 40       	sbci	r31, 0x00	; 0
    1dde:	53 95       	inc	r21
    1de0:	c9 f7       	brne	.-14     	; 0x1dd4 <__addsf3x+0x52>
    1de2:	7e f4       	brtc	.+30     	; 0x1e02 <__addsf3x+0x80>
    1de4:	1f 16       	cp	r1, r31
    1de6:	ba 0b       	sbc	r27, r26
    1de8:	62 0b       	sbc	r22, r18
    1dea:	73 0b       	sbc	r23, r19
    1dec:	84 0b       	sbc	r24, r20
    1dee:	ba f0       	brmi	.+46     	; 0x1e1e <__addsf3x+0x9c>
    1df0:	91 50       	subi	r25, 0x01	; 1
    1df2:	a1 f0       	breq	.+40     	; 0x1e1c <__addsf3x+0x9a>
    1df4:	ff 0f       	add	r31, r31
    1df6:	bb 1f       	adc	r27, r27
    1df8:	66 1f       	adc	r22, r22
    1dfa:	77 1f       	adc	r23, r23
    1dfc:	88 1f       	adc	r24, r24
    1dfe:	c2 f7       	brpl	.-16     	; 0x1df0 <__addsf3x+0x6e>
    1e00:	0e c0       	rjmp	.+28     	; 0x1e1e <__addsf3x+0x9c>
    1e02:	ba 0f       	add	r27, r26
    1e04:	62 1f       	adc	r22, r18
    1e06:	73 1f       	adc	r23, r19
    1e08:	84 1f       	adc	r24, r20
    1e0a:	48 f4       	brcc	.+18     	; 0x1e1e <__addsf3x+0x9c>
    1e0c:	87 95       	ror	r24
    1e0e:	77 95       	ror	r23
    1e10:	67 95       	ror	r22
    1e12:	b7 95       	ror	r27
    1e14:	f7 95       	ror	r31
    1e16:	9e 3f       	cpi	r25, 0xFE	; 254
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <__addsf3x+0x9a>
    1e1a:	b0 cf       	rjmp	.-160    	; 0x1d7c <__addsf3+0x28>
    1e1c:	93 95       	inc	r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	08 f0       	brcs	.+2      	; 0x1e24 <__addsf3x+0xa2>
    1e22:	99 27       	eor	r25, r25
    1e24:	ee 0f       	add	r30, r30
    1e26:	97 95       	ror	r25
    1e28:	87 95       	ror	r24
    1e2a:	08 95       	ret

00001e2c <__divsf3>:
    1e2c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__divsf3x>
    1e30:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_round>
    1e34:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__fp_pscB>
    1e38:	58 f0       	brcs	.+22     	; 0x1e50 <__divsf3+0x24>
    1e3a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__fp_pscA>
    1e3e:	40 f0       	brcs	.+16     	; 0x1e50 <__divsf3+0x24>
    1e40:	29 f4       	brne	.+10     	; 0x1e4c <__divsf3+0x20>
    1e42:	5f 3f       	cpi	r21, 0xFF	; 255
    1e44:	29 f0       	breq	.+10     	; 0x1e50 <__divsf3+0x24>
    1e46:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_inf>
    1e4a:	51 11       	cpse	r21, r1
    1e4c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_szero>
__divsf3():
    1e50:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_nan>

00001e54 <__divsf3x>:
__divsf3x():
    1e54:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fp_split3>
    1e58:	68 f3       	brcs	.-38     	; 0x1e34 <__divsf3+0x8>

00001e5a <__divsf3_pse>:
    1e5a:	99 23       	and	r25, r25
    1e5c:	b1 f3       	breq	.-20     	; 0x1e4a <__divsf3+0x1e>
    1e5e:	55 23       	and	r21, r21
    1e60:	91 f3       	breq	.-28     	; 0x1e46 <__divsf3+0x1a>
    1e62:	95 1b       	sub	r25, r21
    1e64:	55 0b       	sbc	r21, r21
    1e66:	bb 27       	eor	r27, r27
    1e68:	aa 27       	eor	r26, r26
    1e6a:	62 17       	cp	r22, r18
    1e6c:	73 07       	cpc	r23, r19
    1e6e:	84 07       	cpc	r24, r20
    1e70:	38 f0       	brcs	.+14     	; 0x1e80 <__divsf3_pse+0x26>
    1e72:	9f 5f       	subi	r25, 0xFF	; 255
    1e74:	5f 4f       	sbci	r21, 0xFF	; 255
    1e76:	22 0f       	add	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	44 1f       	adc	r20, r20
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	a9 f3       	breq	.-22     	; 0x1e6a <__divsf3_pse+0x10>
    1e80:	35 d0       	rcall	.+106    	; 0x1eec <__divsf3_pse+0x92>
    1e82:	0e 2e       	mov	r0, r30
    1e84:	3a f0       	brmi	.+14     	; 0x1e94 <__divsf3_pse+0x3a>
    1e86:	e0 e8       	ldi	r30, 0x80	; 128
    1e88:	32 d0       	rcall	.+100    	; 0x1eee <__divsf3_pse+0x94>
    1e8a:	91 50       	subi	r25, 0x01	; 1
    1e8c:	50 40       	sbci	r21, 0x00	; 0
    1e8e:	e6 95       	lsr	r30
    1e90:	00 1c       	adc	r0, r0
    1e92:	ca f7       	brpl	.-14     	; 0x1e86 <__divsf3_pse+0x2c>
    1e94:	2b d0       	rcall	.+86     	; 0x1eec <__divsf3_pse+0x92>
    1e96:	fe 2f       	mov	r31, r30
    1e98:	29 d0       	rcall	.+82     	; 0x1eec <__divsf3_pse+0x92>
    1e9a:	66 0f       	add	r22, r22
    1e9c:	77 1f       	adc	r23, r23
    1e9e:	88 1f       	adc	r24, r24
    1ea0:	bb 1f       	adc	r27, r27
    1ea2:	26 17       	cp	r18, r22
    1ea4:	37 07       	cpc	r19, r23
    1ea6:	48 07       	cpc	r20, r24
    1ea8:	ab 07       	cpc	r26, r27
    1eaa:	b0 e8       	ldi	r27, 0x80	; 128
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <__divsf3_pse+0x56>
    1eae:	bb 0b       	sbc	r27, r27
    1eb0:	80 2d       	mov	r24, r0
    1eb2:	bf 01       	movw	r22, r30
    1eb4:	ff 27       	eor	r31, r31
    1eb6:	93 58       	subi	r25, 0x83	; 131
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eba:	3a f0       	brmi	.+14     	; 0x1eca <__divsf3_pse+0x70>
    1ebc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	78 f0       	brcs	.+30     	; 0x1ee0 <__divsf3_pse+0x86>
    1ec2:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_inf>
    1ec6:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_szero>
    1eca:	5f 3f       	cpi	r21, 0xFF	; 255
    1ecc:	e4 f3       	brlt	.-8      	; 0x1ec6 <__divsf3_pse+0x6c>
    1ece:	98 3e       	cpi	r25, 0xE8	; 232
    1ed0:	d4 f3       	brlt	.-12     	; 0x1ec6 <__divsf3_pse+0x6c>
    1ed2:	86 95       	lsr	r24
    1ed4:	77 95       	ror	r23
    1ed6:	67 95       	ror	r22
    1ed8:	b7 95       	ror	r27
    1eda:	f7 95       	ror	r31
    1edc:	9f 5f       	subi	r25, 0xFF	; 255
    1ede:	c9 f7       	brne	.-14     	; 0x1ed2 <__divsf3_pse+0x78>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	96 95       	lsr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	97 f9       	bld	r25, 7
    1eea:	08 95       	ret
    1eec:	e1 e0       	ldi	r30, 0x01	; 1
    1eee:	66 0f       	add	r22, r22
    1ef0:	77 1f       	adc	r23, r23
    1ef2:	88 1f       	adc	r24, r24
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	62 17       	cp	r22, r18
    1ef8:	73 07       	cpc	r23, r19
    1efa:	84 07       	cpc	r24, r20
    1efc:	ba 07       	cpc	r27, r26
    1efe:	20 f0       	brcs	.+8      	; 0x1f08 <__divsf3_pse+0xae>
    1f00:	62 1b       	sub	r22, r18
    1f02:	73 0b       	sbc	r23, r19
    1f04:	84 0b       	sbc	r24, r20
    1f06:	ba 0b       	sbc	r27, r26
    1f08:	ee 1f       	adc	r30, r30
    1f0a:	88 f7       	brcc	.-30     	; 0x1eee <__divsf3_pse+0x94>
    1f0c:	e0 95       	com	r30
    1f0e:	08 95       	ret

00001f10 <__fixunssfsi>:
    1f10:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__fp_splitA>
    1f14:	88 f0       	brcs	.+34     	; 0x1f38 <__fixunssfsi+0x28>
    1f16:	9f 57       	subi	r25, 0x7F	; 127
    1f18:	98 f0       	brcs	.+38     	; 0x1f40 <__fixunssfsi+0x30>
    1f1a:	b9 2f       	mov	r27, r25
    1f1c:	99 27       	eor	r25, r25
    1f1e:	b7 51       	subi	r27, 0x17	; 23
    1f20:	b0 f0       	brcs	.+44     	; 0x1f4e <__fixunssfsi+0x3e>
    1f22:	e1 f0       	breq	.+56     	; 0x1f5c <__fixunssfsi+0x4c>
    1f24:	66 0f       	add	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	1a f0       	brmi	.+6      	; 0x1f34 <__fixunssfsi+0x24>
    1f2e:	ba 95       	dec	r27
__fixunssfsi():
    1f30:	c9 f7       	brne	.-14     	; 0x1f24 <__fixunssfsi+0x14>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <__fixunssfsi+0x4c>
    1f34:	b1 30       	cpi	r27, 0x01	; 1
    1f36:	91 f0       	breq	.+36     	; 0x1f5c <__fixunssfsi+0x4c>
    1f38:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__fp_zero>
    1f3c:	b1 e0       	ldi	r27, 0x01	; 1
    1f3e:	08 95       	ret
    1f40:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__fp_zero>
    1f44:	67 2f       	mov	r22, r23
    1f46:	78 2f       	mov	r23, r24
    1f48:	88 27       	eor	r24, r24
    1f4a:	b8 5f       	subi	r27, 0xF8	; 248
    1f4c:	39 f0       	breq	.+14     	; 0x1f5c <__fixunssfsi+0x4c>
    1f4e:	b9 3f       	cpi	r27, 0xF9	; 249
    1f50:	cc f3       	brlt	.-14     	; 0x1f44 <__fixunssfsi+0x34>
    1f52:	86 95       	lsr	r24
    1f54:	77 95       	ror	r23
    1f56:	67 95       	ror	r22
    1f58:	b3 95       	inc	r27
    1f5a:	d9 f7       	brne	.-10     	; 0x1f52 <__fixunssfsi+0x42>
    1f5c:	3e f4       	brtc	.+14     	; 0x1f6c <__fixunssfsi+0x5c>
    1f5e:	90 95       	com	r25
    1f60:	80 95       	com	r24
    1f62:	70 95       	com	r23
    1f64:	61 95       	neg	r22
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	08 95       	ret

00001f6e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1f6e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1f70:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1f72:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1f74:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1f76:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <__udivmodsi4_ep>

00001f7a <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1f7a:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1f7c:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1f7e:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1f80:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1f82:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1f84:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1f86:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1f88:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1f8c:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1f8e:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1f90:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1f92:	f5 0b       	sbc	r31, r21

00001f94 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1f94:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1f96:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1f98:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1f9a:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1f9c:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1fa0:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1fa2:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1fa4:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1fa6:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1fa8:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1faa:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1fac:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1fae:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1fb0:	08 95       	ret

00001fb2 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1fb2:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1fb4:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    1fb6:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    1fb8:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    1fba:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    1fbc:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    1fbe:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    1fc0:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    1fc2:	09 94       	ijmp

00001fc4 <__subdi3>:
__subdi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2080
    1fc4:	2a 19       	sub	r18, r10
    1fc6:	3b 09       	sbc	r19, r11
    1fc8:	4c 09       	sbc	r20, r12
    1fca:	5d 09       	sbc	r21, r13
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2081
    1fcc:	6e 09       	sbc	r22, r14
    1fce:	7f 09       	sbc	r23, r15
    1fd0:	80 0b       	sbc	r24, r16
    1fd2:	91 0b       	sbc	r25, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2082
    1fd4:	08 95       	ret

00001fd6 <malloc>:
malloc():
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	10 f4       	brcc	.+4      	; 0x1fe8 <malloc+0x12>
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <__flp>
    1fec:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <__flp+0x1>
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	a0 e0       	ldi	r26, 0x00	; 0
    1ff8:	30 97       	sbiw	r30, 0x00	; 0
    1ffa:	99 f4       	brne	.+38     	; 0x2022 <malloc+0x4c>
    1ffc:	21 15       	cp	r18, r1
    1ffe:	31 05       	cpc	r19, r1
    2000:	09 f4       	brne	.+2      	; 0x2004 <malloc+0x2e>
    2002:	4a c0       	rjmp	.+148    	; 0x2098 <malloc+0xc2>
    2004:	28 1b       	sub	r18, r24
    2006:	39 0b       	sbc	r19, r25
    2008:	24 30       	cpi	r18, 0x04	; 4
    200a:	31 05       	cpc	r19, r1
    200c:	d8 f5       	brcc	.+118    	; 0x2084 <malloc+0xae>
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	9b 81       	ldd	r25, Y+3	; 0x03
    2012:	61 15       	cp	r22, r1
    2014:	71 05       	cpc	r23, r1
    2016:	89 f1       	breq	.+98     	; 0x207a <malloc+0xa4>
    2018:	fb 01       	movw	r30, r22
    201a:	93 83       	std	Z+3, r25	; 0x03
    201c:	82 83       	std	Z+2, r24	; 0x02
    201e:	fe 01       	movw	r30, r28
    2020:	11 c0       	rjmp	.+34     	; 0x2044 <malloc+0x6e>
    2022:	40 81       	ld	r20, Z
    2024:	51 81       	ldd	r21, Z+1	; 0x01
    2026:	02 81       	ldd	r16, Z+2	; 0x02
    2028:	13 81       	ldd	r17, Z+3	; 0x03
    202a:	48 17       	cp	r20, r24
    202c:	59 07       	cpc	r21, r25
    202e:	e0 f0       	brcs	.+56     	; 0x2068 <malloc+0x92>
    2030:	48 17       	cp	r20, r24
    2032:	59 07       	cpc	r21, r25
    2034:	99 f4       	brne	.+38     	; 0x205c <malloc+0x86>
    2036:	10 97       	sbiw	r26, 0x00	; 0
    2038:	61 f0       	breq	.+24     	; 0x2052 <malloc+0x7c>
    203a:	12 96       	adiw	r26, 0x02	; 2
    203c:	0c 93       	st	X, r16
    203e:	12 97       	sbiw	r26, 0x02	; 2
    2040:	13 96       	adiw	r26, 0x03	; 3
    2042:	1c 93       	st	X, r17
    2044:	32 96       	adiw	r30, 0x02	; 2
    2046:	cf 01       	movw	r24, r30
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	08 95       	ret
    2052:	00 93 4d 03 	sts	0x034D, r16	; 0x80034d <__flp>
    2056:	10 93 4e 03 	sts	0x034E, r17	; 0x80034e <__flp+0x1>
    205a:	f4 cf       	rjmp	.-24     	; 0x2044 <malloc+0x6e>
    205c:	21 15       	cp	r18, r1
    205e:	31 05       	cpc	r19, r1
    2060:	51 f0       	breq	.+20     	; 0x2076 <malloc+0xa0>
    2062:	42 17       	cp	r20, r18
    2064:	53 07       	cpc	r21, r19
    2066:	38 f0       	brcs	.+14     	; 0x2076 <malloc+0xa0>
    2068:	a9 01       	movw	r20, r18
    206a:	db 01       	movw	r26, r22
    206c:	9a 01       	movw	r18, r20
    206e:	bd 01       	movw	r22, r26
    2070:	df 01       	movw	r26, r30
    2072:	f8 01       	movw	r30, r16
    2074:	c1 cf       	rjmp	.-126    	; 0x1ff8 <malloc+0x22>
    2076:	ef 01       	movw	r28, r30
    2078:	f9 cf       	rjmp	.-14     	; 0x206c <malloc+0x96>
    207a:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <__flp+0x1>
    207e:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <__flp>
    2082:	cd cf       	rjmp	.-102    	; 0x201e <malloc+0x48>
    2084:	fe 01       	movw	r30, r28
    2086:	e2 0f       	add	r30, r18
    2088:	f3 1f       	adc	r31, r19
    208a:	81 93       	st	Z+, r24
    208c:	91 93       	st	Z+, r25
    208e:	22 50       	subi	r18, 0x02	; 2
    2090:	31 09       	sbc	r19, r1
    2092:	39 83       	std	Y+1, r19	; 0x01
    2094:	28 83       	st	Y, r18
    2096:	d7 cf       	rjmp	.-82     	; 0x2046 <malloc+0x70>
    2098:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    209c:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    20a0:	23 2b       	or	r18, r19
    20a2:	41 f4       	brne	.+16     	; 0x20b4 <malloc+0xde>
    20a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    20a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    20ac:	30 93 4c 03 	sts	0x034C, r19	; 0x80034c <__brkval+0x1>
    20b0:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <__brkval>
    20b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20bc:	21 15       	cp	r18, r1
    20be:	31 05       	cpc	r19, r1
    20c0:	41 f4       	brne	.+16     	; 0x20d2 <malloc+0xfc>
    20c2:	2d b7       	in	r18, 0x3d	; 61
    20c4:	3e b7       	in	r19, 0x3e	; 62
    20c6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    20ca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    20ce:	24 1b       	sub	r18, r20
    20d0:	35 0b       	sbc	r19, r21
    20d2:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <__brkval>
    20d6:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <__brkval+0x1>
    20da:	e2 17       	cp	r30, r18
    20dc:	f3 07       	cpc	r31, r19
    20de:	a0 f4       	brcc	.+40     	; 0x2108 <malloc+0x132>
    20e0:	2e 1b       	sub	r18, r30
    20e2:	3f 0b       	sbc	r19, r31
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	78 f0       	brcs	.+30     	; 0x2108 <malloc+0x132>
    20ea:	ac 01       	movw	r20, r24
    20ec:	4e 5f       	subi	r20, 0xFE	; 254
    20ee:	5f 4f       	sbci	r21, 0xFF	; 255
    20f0:	24 17       	cp	r18, r20
    20f2:	35 07       	cpc	r19, r21
    20f4:	48 f0       	brcs	.+18     	; 0x2108 <malloc+0x132>
    20f6:	4e 0f       	add	r20, r30
    20f8:	5f 1f       	adc	r21, r31
    20fa:	50 93 4c 03 	sts	0x034C, r21	; 0x80034c <__brkval+0x1>
    20fe:	40 93 4b 03 	sts	0x034B, r20	; 0x80034b <__brkval>
    2102:	81 93       	st	Z+, r24
    2104:	91 93       	st	Z+, r25
    2106:	9f cf       	rjmp	.-194    	; 0x2046 <malloc+0x70>
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	e0 e0       	ldi	r30, 0x00	; 0
    210c:	9c cf       	rjmp	.-200    	; 0x2046 <malloc+0x70>

0000210e <free>:
free():
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	e9 f0       	breq	.+58     	; 0x2150 <free+0x42>
    2116:	fc 01       	movw	r30, r24
    2118:	32 97       	sbiw	r30, 0x02	; 2
    211a:	13 82       	std	Z+3, r1	; 0x03
    211c:	12 82       	std	Z+2, r1	; 0x02
    211e:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <__flp>
    2122:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <__flp+0x1>
    2126:	ed 01       	movw	r28, r26
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	10 97       	sbiw	r26, 0x00	; 0
    212e:	a1 f4       	brne	.+40     	; 0x2158 <free+0x4a>
    2130:	20 81       	ld	r18, Z
    2132:	31 81       	ldd	r19, Z+1	; 0x01
    2134:	82 0f       	add	r24, r18
    2136:	93 1f       	adc	r25, r19
    2138:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    213c:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	09 f0       	breq	.+2      	; 0x2148 <free+0x3a>
    2146:	61 c0       	rjmp	.+194    	; 0x220a <free+0xfc>
    2148:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <__brkval+0x1>
    214c:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <__brkval>
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	08 95       	ret
    2156:	ea 01       	movw	r28, r20
    2158:	ce 17       	cp	r28, r30
    215a:	df 07       	cpc	r29, r31
    215c:	e8 f5       	brcc	.+122    	; 0x21d8 <free+0xca>
    215e:	4a 81       	ldd	r20, Y+2	; 0x02
    2160:	5b 81       	ldd	r21, Y+3	; 0x03
    2162:	9e 01       	movw	r18, r28
    2164:	41 15       	cp	r20, r1
    2166:	51 05       	cpc	r21, r1
    2168:	b1 f7       	brne	.-20     	; 0x2156 <free+0x48>
    216a:	e9 01       	movw	r28, r18
    216c:	fb 83       	std	Y+3, r31	; 0x03
    216e:	ea 83       	std	Y+2, r30	; 0x02
    2170:	49 91       	ld	r20, Y+
    2172:	59 91       	ld	r21, Y+
    2174:	c4 0f       	add	r28, r20
    2176:	d5 1f       	adc	r29, r21
    2178:	ec 17       	cp	r30, r28
    217a:	fd 07       	cpc	r31, r29
    217c:	61 f4       	brne	.+24     	; 0x2196 <free+0x88>
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	02 96       	adiw	r24, 0x02	; 2
    2184:	84 0f       	add	r24, r20
    2186:	95 1f       	adc	r25, r21
    2188:	e9 01       	movw	r28, r18
    218a:	99 83       	std	Y+1, r25	; 0x01
    218c:	88 83       	st	Y, r24
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	9b 83       	std	Y+3, r25	; 0x03
    2194:	8a 83       	std	Y+2, r24	; 0x02
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	e0 e0       	ldi	r30, 0x00	; 0
    219a:	12 96       	adiw	r26, 0x02	; 2
    219c:	8d 91       	ld	r24, X+
    219e:	9c 91       	ld	r25, X
    21a0:	13 97       	sbiw	r26, 0x03	; 3
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	b9 f5       	brne	.+110    	; 0x2214 <free+0x106>
    21a6:	2d 91       	ld	r18, X+
    21a8:	3c 91       	ld	r19, X
    21aa:	11 97       	sbiw	r26, 0x01	; 1
    21ac:	cd 01       	movw	r24, r26
    21ae:	02 96       	adiw	r24, 0x02	; 2
    21b0:	82 0f       	add	r24, r18
    21b2:	93 1f       	adc	r25, r19
    21b4:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    21b8:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	39 f6       	brne	.-114    	; 0x2150 <free+0x42>
    21c2:	30 97       	sbiw	r30, 0x00	; 0
    21c4:	51 f5       	brne	.+84     	; 0x221a <free+0x10c>
    21c6:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <__flp+0x1>
    21ca:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__flp>
    21ce:	b0 93 4c 03 	sts	0x034C, r27	; 0x80034c <__brkval+0x1>
    21d2:	a0 93 4b 03 	sts	0x034B, r26	; 0x80034b <__brkval>
    21d6:	bc cf       	rjmp	.-136    	; 0x2150 <free+0x42>
    21d8:	d3 83       	std	Z+3, r29	; 0x03
    21da:	c2 83       	std	Z+2, r28	; 0x02
    21dc:	40 81       	ld	r20, Z
    21de:	51 81       	ldd	r21, Z+1	; 0x01
    21e0:	84 0f       	add	r24, r20
    21e2:	95 1f       	adc	r25, r21
    21e4:	c8 17       	cp	r28, r24
    21e6:	d9 07       	cpc	r29, r25
    21e8:	61 f4       	brne	.+24     	; 0x2202 <free+0xf4>
    21ea:	4e 5f       	subi	r20, 0xFE	; 254
    21ec:	5f 4f       	sbci	r21, 0xFF	; 255
    21ee:	88 81       	ld	r24, Y
    21f0:	99 81       	ldd	r25, Y+1	; 0x01
    21f2:	48 0f       	add	r20, r24
    21f4:	59 1f       	adc	r21, r25
    21f6:	51 83       	std	Z+1, r21	; 0x01
    21f8:	40 83       	st	Z, r20
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	93 83       	std	Z+3, r25	; 0x03
    2200:	82 83       	std	Z+2, r24	; 0x02
    2202:	21 15       	cp	r18, r1
    2204:	31 05       	cpc	r19, r1
    2206:	09 f0       	breq	.+2      	; 0x220a <free+0xfc>
    2208:	b0 cf       	rjmp	.-160    	; 0x216a <free+0x5c>
    220a:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <__flp+0x1>
    220e:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <__flp>
    2212:	9e cf       	rjmp	.-196    	; 0x2150 <free+0x42>
    2214:	fd 01       	movw	r30, r26
    2216:	dc 01       	movw	r26, r24
    2218:	c0 cf       	rjmp	.-128    	; 0x219a <free+0x8c>
    221a:	13 82       	std	Z+3, r1	; 0x03
    221c:	12 82       	std	Z+2, r1	; 0x02
    221e:	d7 cf       	rjmp	.-82     	; 0x21ce <free+0xc0>

00002220 <realloc>:
realloc():
    2220:	4f 92       	push	r4
    2222:	5f 92       	push	r5
    2224:	6f 92       	push	r6
    2226:	7f 92       	push	r7
    2228:	8f 92       	push	r8
    222a:	9f 92       	push	r9
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	8c 01       	movw	r16, r24
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	99 f4       	brne	.+38     	; 0x226c <realloc+0x4c>
    2246:	cb 01       	movw	r24, r22
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	8f 90       	pop	r8
    2260:	7f 90       	pop	r7
    2262:	6f 90       	pop	r6
    2264:	5f 90       	pop	r5
    2266:	4f 90       	pop	r4
    2268:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <malloc>
    226c:	fc 01       	movw	r30, r24
    226e:	e6 0f       	add	r30, r22
    2270:	f7 1f       	adc	r31, r23
    2272:	9c 01       	movw	r18, r24
    2274:	22 50       	subi	r18, 0x02	; 2
    2276:	31 09       	sbc	r19, r1
    2278:	e2 17       	cp	r30, r18
    227a:	f3 07       	cpc	r31, r19
    227c:	08 f4       	brcc	.+2      	; 0x2280 <realloc+0x60>
    227e:	ae c0       	rjmp	.+348    	; 0x23dc <realloc+0x1bc>
    2280:	d9 01       	movw	r26, r18
    2282:	cd 91       	ld	r28, X+
    2284:	dc 91       	ld	r29, X
    2286:	11 97       	sbiw	r26, 0x01	; 1
    2288:	c6 17       	cp	r28, r22
    228a:	d7 07       	cpc	r29, r23
    228c:	20 f1       	brcs	.+72     	; 0x22d6 <realloc+0xb6>
    228e:	c5 30       	cpi	r28, 0x05	; 5
    2290:	d1 05       	cpc	r29, r1
    2292:	78 f0       	brcs	.+30     	; 0x22b2 <realloc+0x92>
    2294:	ce 01       	movw	r24, r28
    2296:	04 97       	sbiw	r24, 0x04	; 4
    2298:	86 17       	cp	r24, r22
    229a:	97 07       	cpc	r25, r23
    229c:	50 f0       	brcs	.+20     	; 0x22b2 <realloc+0x92>
    229e:	c6 1b       	sub	r28, r22
    22a0:	d7 0b       	sbc	r29, r23
    22a2:	22 97       	sbiw	r28, 0x02	; 2
    22a4:	c1 93       	st	Z+, r28
    22a6:	d1 93       	st	Z+, r29
    22a8:	6d 93       	st	X+, r22
    22aa:	7c 93       	st	X, r23
    22ac:	cf 01       	movw	r24, r30
    22ae:	0e 94 87 10 	call	0x210e	; 0x210e <free>
    22b2:	c8 01       	movw	r24, r16
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
    22c4:	bf 90       	pop	r11
    22c6:	af 90       	pop	r10
    22c8:	9f 90       	pop	r9
    22ca:	8f 90       	pop	r8
    22cc:	7f 90       	pop	r7
    22ce:	6f 90       	pop	r6
    22d0:	5f 90       	pop	r5
    22d2:	4f 90       	pop	r4
    22d4:	08 95       	ret
    22d6:	5b 01       	movw	r10, r22
    22d8:	ac 1a       	sub	r10, r28
    22da:	bd 0a       	sbc	r11, r29
    22dc:	4c 01       	movw	r8, r24
    22de:	8c 0e       	add	r8, r28
    22e0:	9d 1e       	adc	r9, r29
    22e2:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <__flp>
    22e6:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <__flp+0x1>
    22ea:	51 2c       	mov	r5, r1
    22ec:	41 2c       	mov	r4, r1
    22ee:	f1 2c       	mov	r15, r1
    22f0:	e1 2c       	mov	r14, r1
    22f2:	10 97       	sbiw	r26, 0x00	; 0
    22f4:	31 f5       	brne	.+76     	; 0x2342 <realloc+0x122>
    22f6:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <__brkval>
    22fa:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <__brkval+0x1>
    22fe:	88 15       	cp	r24, r8
    2300:	99 05       	cpc	r25, r9
    2302:	09 f0       	breq	.+2      	; 0x2306 <realloc+0xe6>
    2304:	5c c0       	rjmp	.+184    	; 0x23be <realloc+0x19e>
    2306:	46 16       	cp	r4, r22
    2308:	57 06       	cpc	r5, r23
    230a:	08 f0       	brcs	.+2      	; 0x230e <realloc+0xee>
    230c:	58 c0       	rjmp	.+176    	; 0x23be <realloc+0x19e>
    230e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2312:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	41 f4       	brne	.+16     	; 0x232a <realloc+0x10a>
    231a:	8d b7       	in	r24, 0x3d	; 61
    231c:	9e b7       	in	r25, 0x3e	; 62
    231e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2322:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2326:	84 1b       	sub	r24, r20
    2328:	95 0b       	sbc	r25, r21
    232a:	e8 17       	cp	r30, r24
    232c:	f9 07       	cpc	r31, r25
    232e:	08 f0       	brcs	.+2      	; 0x2332 <realloc+0x112>
    2330:	55 c0       	rjmp	.+170    	; 0x23dc <realloc+0x1bc>
    2332:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <__brkval+0x1>
    2336:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <__brkval>
    233a:	f9 01       	movw	r30, r18
    233c:	71 83       	std	Z+1, r23	; 0x01
    233e:	60 83       	st	Z, r22
    2340:	b8 cf       	rjmp	.-144    	; 0x22b2 <realloc+0x92>
    2342:	8d 91       	ld	r24, X+
    2344:	9c 91       	ld	r25, X
    2346:	11 97       	sbiw	r26, 0x01	; 1
    2348:	12 96       	adiw	r26, 0x02	; 2
    234a:	6c 90       	ld	r6, X
    234c:	12 97       	sbiw	r26, 0x02	; 2
    234e:	13 96       	adiw	r26, 0x03	; 3
    2350:	7c 90       	ld	r7, X
    2352:	13 97       	sbiw	r26, 0x03	; 3
    2354:	a8 15       	cp	r26, r8
    2356:	b9 05       	cpc	r27, r9
    2358:	59 f5       	brne	.+86     	; 0x23b0 <realloc+0x190>
    235a:	6c 01       	movw	r12, r24
    235c:	42 e0       	ldi	r20, 0x02	; 2
    235e:	c4 0e       	add	r12, r20
    2360:	d1 1c       	adc	r13, r1
    2362:	ca 14       	cp	r12, r10
    2364:	db 04       	cpc	r13, r11
    2366:	20 f1       	brcs	.+72     	; 0x23b0 <realloc+0x190>
    2368:	ac 01       	movw	r20, r24
    236a:	4a 19       	sub	r20, r10
    236c:	5b 09       	sbc	r21, r11
    236e:	da 01       	movw	r26, r20
    2370:	12 96       	adiw	r26, 0x02	; 2
    2372:	15 97       	sbiw	r26, 0x05	; 5
    2374:	80 f0       	brcs	.+32     	; 0x2396 <realloc+0x176>
    2376:	62 82       	std	Z+2, r6	; 0x02
    2378:	73 82       	std	Z+3, r7	; 0x03
    237a:	51 83       	std	Z+1, r21	; 0x01
    237c:	40 83       	st	Z, r20
    237e:	d9 01       	movw	r26, r18
    2380:	6d 93       	st	X+, r22
    2382:	7c 93       	st	X, r23
    2384:	e1 14       	cp	r14, r1
    2386:	f1 04       	cpc	r15, r1
    2388:	71 f0       	breq	.+28     	; 0x23a6 <realloc+0x186>
    238a:	d7 01       	movw	r26, r14
    238c:	13 96       	adiw	r26, 0x03	; 3
    238e:	fc 93       	st	X, r31
    2390:	ee 93       	st	-X, r30
    2392:	12 97       	sbiw	r26, 0x02	; 2
    2394:	8e cf       	rjmp	.-228    	; 0x22b2 <realloc+0x92>
    2396:	22 96       	adiw	r28, 0x02	; 2
    2398:	8c 0f       	add	r24, r28
    239a:	9d 1f       	adc	r25, r29
    239c:	f9 01       	movw	r30, r18
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	f3 01       	movw	r30, r6
    23a4:	ef cf       	rjmp	.-34     	; 0x2384 <realloc+0x164>
    23a6:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <__flp+0x1>
    23aa:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <__flp>
    23ae:	81 cf       	rjmp	.-254    	; 0x22b2 <realloc+0x92>
    23b0:	48 16       	cp	r4, r24
    23b2:	59 06       	cpc	r5, r25
    23b4:	08 f4       	brcc	.+2      	; 0x23b8 <realloc+0x198>
    23b6:	2c 01       	movw	r4, r24
    23b8:	7d 01       	movw	r14, r26
    23ba:	d3 01       	movw	r26, r6
    23bc:	9a cf       	rjmp	.-204    	; 0x22f2 <realloc+0xd2>
    23be:	cb 01       	movw	r24, r22
    23c0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <malloc>
    23c4:	7c 01       	movw	r14, r24
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	49 f0       	breq	.+18     	; 0x23dc <realloc+0x1bc>
    23ca:	ae 01       	movw	r20, r28
    23cc:	b8 01       	movw	r22, r16
    23ce:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <memcpy>
    23d2:	c8 01       	movw	r24, r16
    23d4:	0e 94 87 10 	call	0x210e	; 0x210e <free>
    23d8:	87 01       	movw	r16, r14
    23da:	6b cf       	rjmp	.-298    	; 0x22b2 <realloc+0x92>
    23dc:	10 e0       	ldi	r17, 0x00	; 0
    23de:	00 e0       	ldi	r16, 0x00	; 0
    23e0:	68 cf       	rjmp	.-304    	; 0x22b2 <realloc+0x92>

000023e2 <memcpy>:
memcpy():
    23e2:	fb 01       	movw	r30, r22
    23e4:	dc 01       	movw	r26, r24
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <memcpy+0xa>
    23e8:	01 90       	ld	r0, Z+
    23ea:	0d 92       	st	X+, r0
    23ec:	41 50       	subi	r20, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	d8 f7       	brcc	.-10     	; 0x23e8 <memcpy+0x6>
    23f2:	08 95       	ret

000023f4 <strcmp>:
strcmp():
    23f4:	fb 01       	movw	r30, r22
    23f6:	dc 01       	movw	r26, r24
    23f8:	8d 91       	ld	r24, X+
    23fa:	01 90       	ld	r0, Z+
    23fc:	80 19       	sub	r24, r0
    23fe:	01 10       	cpse	r0, r1
    2400:	d9 f3       	breq	.-10     	; 0x23f8 <strcmp+0x4>
    2402:	99 0b       	sbc	r25, r25
    2404:	08 95       	ret

00002406 <strcpy>:
strcpy():
    2406:	fb 01       	movw	r30, r22
    2408:	dc 01       	movw	r26, r24
    240a:	01 90       	ld	r0, Z+
    240c:	0d 92       	st	X+, r0
    240e:	00 20       	and	r0, r0
    2410:	e1 f7       	brne	.-8      	; 0x240a <strcpy+0x4>
    2412:	08 95       	ret

00002414 <strncmp>:
strncmp():
    2414:	fb 01       	movw	r30, r22
    2416:	dc 01       	movw	r26, r24
    2418:	41 50       	subi	r20, 0x01	; 1
    241a:	50 40       	sbci	r21, 0x00	; 0
    241c:	30 f0       	brcs	.+12     	; 0x242a <strncmp+0x16>
    241e:	8d 91       	ld	r24, X+
    2420:	01 90       	ld	r0, Z+
    2422:	80 19       	sub	r24, r0
    2424:	19 f4       	brne	.+6      	; 0x242c <strncmp+0x18>
    2426:	00 20       	and	r0, r0
    2428:	b9 f7       	brne	.-18     	; 0x2418 <strncmp+0x4>
    242a:	88 1b       	sub	r24, r24
    242c:	99 0b       	sbc	r25, r25
    242e:	08 95       	ret

00002430 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    2430:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    2432:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    2434:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2438:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    243a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    243e:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    2440:	c8 3a       	cpi	r28, 0xA8	; 168
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    2442:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    2444:	c9 f7       	brne	.-14     	; 0x2438 <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2446:	f8 94       	cli

00002448 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2448:	ff cf       	rjmp	.-2      	; 0x2448 <__stop_program>
