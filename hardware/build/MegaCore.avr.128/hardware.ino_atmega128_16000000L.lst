
/tmp/arduino/sketches/516C1C931CA76763B5C74B1BFC2CB13E/hardware.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__dtors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__vector_16>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_18>
      4c:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_19>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      6c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      70:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      74:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      7c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      80:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	39 00       	.word	0x0039	; ????
      90:	36 00       	.word	0x0036	; ????
      92:	33 00       	.word	0x0033	; ????
      94:	30 00       	.word	0x0030	; ????
      96:	21 00       	.word	0x0021	; ????
      98:	20 00       	.word	0x0020	; ????
      9a:	63 00       	.word	0x0063	; ????

0000009c <digital_pin_to_timer_PGM>:
      9c:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

000000d1 <port_to_output_PGM>:
      d1:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

000000e1 <port_to_mode_PGM>:
      e1:	00 00 3a 00 37 00 34 00 31 00 22 00 61 00 64 00     ..:.7.4.1.".a.d.

000000f1 <digital_pin_to_port_PGM>:
      f1:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
     101:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     111:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
     121:	06 06 06 06 06                                      .....

00000126 <digital_pin_to_bit_mask_PGM>:
     126:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     136:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     146:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     156:	08 10 20 40 80 00                                   .. @..

0000015c <__ctors_start>:
__ctors_start():
     15c:	2b 07       	cpc	r18, r27

0000015e <__ctors_end>:
__dtors_start():
     15e:	4d 0d       	add	r20, r13

00000160 <__dtors_end>:
__dtors_end():
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	d0 e1       	ldi	r29, 0x10	; 16
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     16c:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     16e:	aa e1       	ldi	r26, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     170:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     176:	af 34       	cpi	r26, 0x4F	; 79
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     178:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>

0000017c <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     17c:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     17e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     180:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     182:	e2 e3       	ldi	r30, 0x32	; 50
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     184:	f4 e2       	ldi	r31, 0x24	; 36
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     186:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     188:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     18c:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     18e:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     190:	aa 31       	cpi	r26, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     192:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0x10>

00000196 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     196:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     198:	cf ea       	ldi	r28, 0xAF	; 175
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     19a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     19e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1a0:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1a2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1a6:	ce 3a       	cpi	r28, 0xAE	; 174
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1a8:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 db 07 	call	0xfb6	; 0xfb6 <main>
     1b0:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__do_global_dtors>

000001b4 <__bad_interrupt>:
__vector_22():
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <pinMode.constprop.87>:
pinMode():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	ea 5d       	subi	r30, 0xDA	; 218
     1be:	fe 4f       	sbci	r31, 0xFE	; 254
     1c0:	24 91       	lpm	r18, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     1c2:	8f 50       	subi	r24, 0x0F	; 15
     1c4:	9f 4f       	sbci	r25, 0xFF	; 255
     1c6:	fc 01       	movw	r30, r24
     1c8:	84 91       	lpm	r24, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     1ca:	88 23       	and	r24, r24
     1cc:	99 f0       	breq	.+38     	; 0x1f4 <pinMode.constprop.87+0x3c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	fc 01       	movw	r30, r24
     1d6:	ef 51       	subi	r30, 0x1F	; 31
     1d8:	ff 4f       	sbci	r31, 0xFF	; 255
     1da:	a5 91       	lpm	r26, Z+
     1dc:	b4 91       	lpm	r27, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     1de:	fc 01       	movw	r30, r24
     1e0:	ef 52       	subi	r30, 0x2F	; 47
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	85 91       	lpm	r24, Z+
     1e6:	94 91       	lpm	r25, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     1e8:	8f b7       	in	r24, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     1ea:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     1ec:	ec 91       	ld	r30, X
     1ee:	e2 2b       	or	r30, r18
     1f0:	ec 93       	st	X, r30
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     1f2:	8f bf       	out	0x3f, r24	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:59
  }
}
     1f4:	08 95       	ret

000001f6 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]>:
dataForThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:226
    OCR1A = intencity;
}

const stend::warmer_data_t& warmerData::dataForThermalDelta(uint8_t thermalDelta) {

  if(thermalDelta == 0) {
     1f6:	81 11       	cpse	r24, r1
     1f8:	14 c0       	rjmp	.+40     	; 0x222 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x2c>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:228
    
    m_warmerData.pwm = 0;
     1fa:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <pid+0x39>
     1fe:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <pid+0x38>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:229
    m_warmerData.adc = 0;
     202:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <pid+0x3b>
     206:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:307
      case 100:
        m_warmerData.pwm = 411;  
        break;
  }

  m_warmerData.resolution = ADC_RESOLUTION_x1;
     20a:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <pid+0x3c>
keepThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:75
  }
}

void pidRegulator::keepThermalDelta(uint8_t thermalDelta) {

  m_warmerData = m_pidParams.dataForThermalDelta(thermalDelta);
     20e:	87 e0       	ldi	r24, 0x07	; 7
     210:	ee e3       	ldi	r30, 0x3E	; 62
     212:	f3 e0       	ldi	r31, 0x03	; 3
     214:	a6 e0       	ldi	r26, 0x06	; 6
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 90       	ld	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	8a 95       	dec	r24
     21e:	e1 f7       	brne	.-8      	; 0x218 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x22>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:76
}
     220:	08 95       	ret
dataForThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:234
    m_warmerData.adc = 0;
    m_warmerData.resolution = ADC_RESOLUTION_x1;
    return m_warmerData;   
  }

  if(thermalDelta == m_warmerData.prevDelta) {
     222:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <pid+0x3d>
     226:	82 17       	cp	r24, r18
     228:	91 f3       	breq	.-28     	; 0x20e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x18>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:238
    return m_warmerData;
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	28 17       	cp	r18, r24
     22e:	08 f0       	brcs	.+2      	; 0x232 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x3c>
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <pid+0x3e>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:239
  m_warmerData.prevDelta = thermalDelta;
     236:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pid+0x3d>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241

  switch(thermalDelta) {
     23a:	82 33       	cpi	r24, 0x32	; 50
     23c:	09 f4       	brne	.+2      	; 0x240 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x4a>
     23e:	61 c0       	rjmp	.+194    	; 0x302 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x10c>
     240:	08 f5       	brcc	.+66     	; 0x284 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x8e>
     242:	84 31       	cpi	r24, 0x14	; 20
     244:	09 f4       	brne	.+2      	; 0x248 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x52>
     246:	4b c0       	rjmp	.+150    	; 0x2de <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xe8>
     248:	78 f4       	brcc	.+30     	; 0x268 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x72>
     24a:	8a 30       	cpi	r24, 0x0A	; 10
     24c:	d9 f1       	breq	.+118    	; 0x2c4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xce>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:274
      case 100:
        m_warmerData.adc = 161;
        break;
  }

  switch(thermalDelta) {
     24e:	8c 33       	cpi	r24, 0x3C	; 60
     250:	09 f4       	brne	.+2      	; 0x254 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x5e>
     252:	66 c0       	rjmp	.+204    	; 0x320 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x12a>
     254:	08 f0       	brcs	.+2      	; 0x258 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x62>
     256:	80 c0       	rjmp	.+256    	; 0x358 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x162>
     258:	8e 31       	cpi	r24, 0x1E	; 30
     25a:	09 f4       	brne	.+2      	; 0x25e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x68>
     25c:	4f c0       	rjmp	.+158    	; 0x2fc <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x106>
     25e:	08 f0       	brcs	.+2      	; 0x262 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x6c>
     260:	74 c0       	rjmp	.+232    	; 0x34a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x154>
     262:	84 31       	cpi	r24, 0x14	; 20
     264:	91 f6       	brne	.-92     	; 0x20a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x14>
     266:	41 c0       	rjmp	.+130    	; 0x2ea <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xf4>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
     268:	8e 31       	cpi	r24, 0x1E	; 30
     26a:	09 f4       	brne	.+2      	; 0x26e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x78>
     26c:	41 c0       	rjmp	.+130    	; 0x2f0 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xfa>
     26e:	88 32       	cpi	r24, 0x28	; 40
     270:	71 f7       	brne	.-36     	; 0x24e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x58>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:252
        break;
      case 30:
        m_warmerData.adc = 112;
        break;
      case 40:
        m_warmerData.adc = 121;
     272:	89 e7       	ldi	r24, 0x79	; 121
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     27a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:285
        break;
      case 30:
        m_warmerData.pwm = 183;  
        break;
      case 40:
        m_warmerData.pwm = 212;  
     27e:	84 ed       	ldi	r24, 0xD4	; 212
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 c0       	rjmp	.+80     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
     284:	80 35       	cpi	r24, 0x50	; 80
     286:	09 f4       	brne	.+2      	; 0x28a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x94>
     288:	4e c0       	rjmp	.+156    	; 0x326 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x130>
     28a:	70 f4       	brcc	.+28     	; 0x2a8 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xb2>
     28c:	8c 33       	cpi	r24, 0x3C	; 60
     28e:	09 f4       	brne	.+2      	; 0x292 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x9c>
     290:	41 c0       	rjmp	.+130    	; 0x314 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x11e>
     292:	86 34       	cpi	r24, 0x46	; 70
     294:	e1 f6       	brne	.-72     	; 0x24e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x58>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:261
        break;
      case 60:
        m_warmerData.adc = 127;
        break;
      case 70:
        m_warmerData.adc = 133;
     296:	85 e8       	ldi	r24, 0x85	; 133
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     29e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:294
        break;
      case 60:
        m_warmerData.pwm = 246;  
        break;
      case 70:
        m_warmerData.pwm = 270;  
     2a2:	8e e0       	ldi	r24, 0x0E	; 14
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	16 c0       	rjmp	.+44     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:241
  }
  
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
     2a8:	8a 35       	cpi	r24, 0x5A	; 90
     2aa:	09 f4       	brne	.+2      	; 0x2ae <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xb8>
     2ac:	45 c0       	rjmp	.+138    	; 0x338 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x142>
     2ae:	84 36       	cpi	r24, 0x64	; 100
     2b0:	71 f6       	brne	.-100    	; 0x24e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x58>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:270
        break;
      case 90:
        m_warmerData.adc = 151;
        break;
      case 100:
        m_warmerData.adc = 161;
     2b2:	81 ea       	ldi	r24, 0xA1	; 161
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2ba:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:303
        break;
      case 90:
        m_warmerData.pwm = 350;  
        break;
      case 100:
        m_warmerData.pwm = 411;  
     2be:	8b e9       	ldi	r24, 0x9B	; 155
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:243
  m_warmerData.warmDirection = (thermalDelta > m_warmerData.prevDelta) ? PID_WARM_UP : PID_COOL_DOWN;
  m_warmerData.prevDelta = thermalDelta;

  switch(thermalDelta) {
      case 10:
        m_warmerData.adc = 63;
     2c4:	8f e3       	ldi	r24, 0x3F	; 63
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2cc:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:276
        break;
  }

  switch(thermalDelta) {
      case 10:
        m_warmerData.pwm = 100;  
     2d0:	84 e6       	ldi	r24, 0x64	; 100
     2d2:	90 e0       	ldi	r25, 0x00	; 0
/home/stend/Документы/stend/hardware/pid_regulator.cpp:303
        break;
      case 90:
        m_warmerData.pwm = 350;  
        break;
      case 100:
        m_warmerData.pwm = 411;  
     2d4:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <pid+0x39>
     2d8:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <pid+0x38>
     2dc:	96 cf       	rjmp	.-212    	; 0x20a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x14>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:246
  switch(thermalDelta) {
      case 10:
        m_warmerData.adc = 63;
        break;
      case 20:
        m_warmerData.adc = 87;
     2de:	87 e5       	ldi	r24, 0x57	; 87
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2e6:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:279
  switch(thermalDelta) {
      case 10:
        m_warmerData.pwm = 100;  
        break;
      case 20:
        m_warmerData.pwm = 135;  
     2ea:	87 e8       	ldi	r24, 0x87	; 135
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	f2 cf       	rjmp	.-28     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:249
        break;
      case 20:
        m_warmerData.adc = 87;
        break;
      case 30:
        m_warmerData.adc = 112;
     2f0:	80 e7       	ldi	r24, 0x70	; 112
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     2f8:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:282
        break;
      case 20:
        m_warmerData.pwm = 135;  
        break;
      case 30:
        m_warmerData.pwm = 183;  
     2fc:	87 eb       	ldi	r24, 0xB7	; 183
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	e9 cf       	rjmp	.-46     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:255
        break;
      case 40:
        m_warmerData.adc = 121;
        break;
      case 50:
        m_warmerData.adc = 124;
     302:	8c e7       	ldi	r24, 0x7C	; 124
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     30a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:288
        break;
      case 40:
        m_warmerData.pwm = 212;  
        break;
      case 50:
        m_warmerData.pwm = 229;  
     30e:	85 ee       	ldi	r24, 0xE5	; 229
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	e0 cf       	rjmp	.-64     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:258
        break;
      case 50:
        m_warmerData.adc = 124;
        break;
      case 60:
        m_warmerData.adc = 127;
     314:	8f e7       	ldi	r24, 0x7F	; 127
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     31c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:291
        break;
      case 50:
        m_warmerData.pwm = 229;  
        break;
      case 60:
        m_warmerData.pwm = 246;  
     320:	86 ef       	ldi	r24, 0xF6	; 246
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	d7 cf       	rjmp	.-82     	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:264
        break;
      case 70:
        m_warmerData.adc = 133;
        break;
      case 80:
        m_warmerData.adc = 141;
     326:	8d e8       	ldi	r24, 0x8D	; 141
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     32e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:297
        break;
      case 70:
        m_warmerData.pwm = 270;  
        break;
      case 80:
        m_warmerData.pwm = 295;  
     332:	87 e2       	ldi	r24, 0x27	; 39
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	ce cf       	rjmp	.-100    	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:267
        break;
      case 80:
        m_warmerData.adc = 141;
        break;
      case 90:
        m_warmerData.adc = 151;
     338:	87 e9       	ldi	r24, 0x97	; 151
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <pid+0x3b>
     340:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <pid+0x3a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:300
        break;
      case 80:
        m_warmerData.pwm = 295;  
        break;
      case 90:
        m_warmerData.pwm = 350;  
     344:	8e e5       	ldi	r24, 0x5E	; 94
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	c5 cf       	rjmp	.-118    	; 0x2d4 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xde>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:274
      case 100:
        m_warmerData.adc = 161;
        break;
  }

  switch(thermalDelta) {
     34a:	88 32       	cpi	r24, 0x28	; 40
     34c:	09 f4       	brne	.+2      	; 0x350 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x15a>
     34e:	97 cf       	rjmp	.-210    	; 0x27e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x88>
     350:	82 33       	cpi	r24, 0x32	; 50
     352:	09 f0       	breq	.+2      	; 0x356 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x160>
     354:	5a cf       	rjmp	.-332    	; 0x20a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x14>
     356:	db cf       	rjmp	.-74     	; 0x30e <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x118>
     358:	80 35       	cpi	r24, 0x50	; 80
     35a:	59 f3       	breq	.-42     	; 0x332 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x13c>
     35c:	20 f4       	brcc	.+8      	; 0x366 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x170>
     35e:	86 34       	cpi	r24, 0x46	; 70
     360:	09 f0       	breq	.+2      	; 0x364 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x16e>
     362:	53 cf       	rjmp	.-346    	; 0x20a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x14>
     364:	9e cf       	rjmp	.-196    	; 0x2a2 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xac>
     366:	8a 35       	cpi	r24, 0x5A	; 90
     368:	69 f3       	breq	.-38     	; 0x344 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x14e>
     36a:	84 36       	cpi	r24, 0x64	; 100
     36c:	09 f0       	breq	.+2      	; 0x370 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x17a>
     36e:	4d cf       	rjmp	.-358    	; 0x20a <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0x14>
     370:	a6 cf       	rjmp	.-180    	; 0x2be <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]+0xc8>

00000372 <turnOffPWM>:
turnOffPWM():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     372:	81 50       	subi	r24, 0x01	; 1
     374:	8c 30       	cpi	r24, 0x0C	; 12
     376:	88 f5       	brcc	.+98     	; 0x3da <turnOffPWM+0x68>
     378:	e8 2f       	mov	r30, r24
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 53       	subi	r30, 0x3E	; 62
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__tablejump2__>
     384:	ea 01       	movw	r28, r20
     386:	ea 01       	movw	r28, r20
     388:	ed 01       	movw	r28, r26
     38a:	ce 01       	movw	r24, r28
     38c:	d2 01       	movw	r26, r4
     38e:	d5 01       	movw	r26, r10
     390:	d8 01       	movw	r26, r16
     392:	ed 01       	movw	r28, r26
     394:	ed 01       	movw	r28, r26
     396:	dc 01       	movw	r26, r24
     398:	e2 01       	movw	r28, r4
     39a:	e6 01       	movw	r28, r12
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     39c:	8f b5       	in	r24, 0x2f	; 47
     39e:	8f 77       	andi	r24, 0x7F	; 127
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     3a0:	8f bd       	out	0x2f, r24	; 47
     3a2:	08 95       	ret
     3a4:	8f b5       	in	r24, 0x2f	; 47
     3a6:	8f 7d       	andi	r24, 0xDF	; 223
     3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <turnOffPWM+0x2e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
     3aa:	8f b5       	in	r24, 0x2f	; 47
     3ac:	87 7f       	andi	r24, 0xF7	; 247
     3ae:	f8 cf       	rjmp	.-16     	; 0x3a0 <turnOffPWM+0x2e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     3b0:	85 b5       	in	r24, 0x25	; 37
     3b2:	8f 7d       	andi	r24, 0xDF	; 223
     3b4:	85 bd       	out	0x25, r24	; 37
     3b6:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     3b8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3bc:	8f 77       	andi	r24, 0x7F	; 127
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     3be:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3c2:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     3c4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3c8:	8f 7d       	andi	r24, 0xDF	; 223
     3ca:	f9 cf       	rjmp	.-14     	; 0x3be <turnOffPWM+0x4c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
     3cc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3d0:	87 7f       	andi	r24, 0xF7	; 247
     3d2:	f5 cf       	rjmp	.-22     	; 0x3be <turnOffPWM+0x4c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
     3d4:	83 b7       	in	r24, 0x33	; 51
     3d6:	8f 7d       	andi	r24, 0xDF	; 223
     3d8:	83 bf       	out	0x33, r24	; 51
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     3da:	08 95       	ret

000003dc <digitalRead.constprop.53>:
digitalRead():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:214
  }

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:216
{
  uint8_t timer = digitalPinToTimer(pin);
     3e0:	e0 ea       	ldi	r30, 0xA0	; 160
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	84 91       	lpm	r24, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     3e6:	ea e2       	ldi	r30, 0x2A	; 42
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	d4 91       	lpm	r29, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     3ec:	e5 ef       	ldi	r30, 0xF5	; 245
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	c4 91       	lpm	r28, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     3f2:	cc 23       	and	r28, r28
     3f4:	a1 f0       	breq	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     3f6:	81 11       	cpse	r24, r1
     3f8:	0e 94 b9 01 	call	0x372	; 0x372 <turnOffPWM>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     3fc:	ec 2f       	mov	r30, r28
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	e4 57       	subi	r30, 0x74	; 116
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	a5 91       	lpm	r26, Z+
     40a:	b4 91       	lpm	r27, Z
     40c:	ec 91       	ld	r30, X
     40e:	ed 23       	and	r30, r29
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	80 e0       	ldi	r24, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fa cf       	rjmp	.-12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

00000424 <digitalWrite>:
digitalWrite():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     42a:	28 2f       	mov	r18, r24
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	e4 56       	subi	r30, 0x64	; 100
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	84 91       	lpm	r24, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     436:	f9 01       	movw	r30, r18
     438:	ea 5d       	subi	r30, 0xDA	; 218
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	d4 91       	lpm	r29, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     43e:	f9 01       	movw	r30, r18
     440:	ef 50       	subi	r30, 0x0F	; 15
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	c4 91       	lpm	r28, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     446:	cc 23       	and	r28, r28
     448:	a9 f0       	breq	.+42     	; 0x474 <digitalWrite+0x50>
     44a:	16 2f       	mov	r17, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     44c:	81 11       	cpse	r24, r1
     44e:	0e 94 b9 01 	call	0x372	; 0x372 <turnOffPWM>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     452:	ec 2f       	mov	r30, r28
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	ee 0f       	add	r30, r30
     458:	ff 1f       	adc	r31, r31
     45a:	ef 52       	subi	r30, 0x2F	; 47
     45c:	ff 4f       	sbci	r31, 0xFF	; 255
     45e:	a5 91       	lpm	r26, Z+
     460:	b4 91       	lpm	r27, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     462:	8f b7       	in	r24, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     464:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     466:	ec 91       	ld	r30, X
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     468:	11 11       	cpse	r17, r1
     46a:	08 c0       	rjmp	.+16     	; 0x47c <digitalWrite+0x58>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     46c:	d0 95       	com	r29
     46e:	de 23       	and	r29, r30
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     470:	dc 93       	st	X, r29
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     472:	8f bf       	out	0x3f, r24	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     47c:	de 2b       	or	r29, r30
     47e:	f8 cf       	rjmp	.-16     	; 0x470 <digitalWrite+0x4c>

00000480 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.79]>:
swSPI_transfer():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:261
  digitalWrite(_select, HIGH);
}


//  MSBFIRST
uint8_t MCP_DAC::swSPI_transfer(uint8_t val)
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	e8 2e       	mov	r14, r24
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:263
{
  uint8_t clk = _clock;
     48e:	00 91 d4 02 	lds	r16, 0x02D4	; 0x8002d4 <light+0x1>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:264
  uint8_t dao = _dataOut;
     492:	f0 90 d3 02 	lds	r15, 0x02D3	; 0x8002d3 <light>
     496:	c8 e0       	ldi	r28, 0x08	; 8
     498:	d0 e0       	ldi	r29, 0x00	; 0
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:265
  for (uint8_t mask = 0x80; mask; mask >>= 1)
     49a:	10 e8       	ldi	r17, 0x80	; 128
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:267
  {
    digitalWrite(dao, (val & mask));
     49c:	6e 2d       	mov	r22, r14
     49e:	61 23       	and	r22, r17
     4a0:	8f 2d       	mov	r24, r15
     4a2:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:268
    digitalWrite(clk, HIGH);
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	80 2f       	mov	r24, r16
     4aa:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:269
    digitalWrite(clk, LOW);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	80 2f       	mov	r24, r16
     4b2:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:265
//  MSBFIRST
uint8_t MCP_DAC::swSPI_transfer(uint8_t val)
{
  uint8_t clk = _clock;
  uint8_t dao = _dataOut;
  for (uint8_t mask = 0x80; mask; mask >>= 1)
     4b6:	16 95       	lsr	r17
     4b8:	21 97       	sbiw	r28, 0x01	; 1
     4ba:	81 f7       	brne	.-32     	; 0x49c <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.79]+0x1c>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:272
    digitalWrite(dao, (val & mask));
    digitalWrite(clk, HIGH);
    digitalWrite(clk, LOW);
  }
  return 0;
}
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <MCP_DAC::transfer(unsigned int) [clone .constprop.78]>:
transfer():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:240

//////////////////////////////////////////////////////////////////
//
//  PROTECTED
//
void MCP_DAC::transfer(uint16_t data)
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	ec 01       	movw	r28, r24
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:243
{
  //  DATA TRANSFER
  digitalWrite(_select, LOW);
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <light+0x2>
     4d8:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:244
  if (_hwSPI)
     4dc:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <light+0x4>
     4e0:	88 23       	and	r24, r24
     4e2:	b9 f0       	breq	.+46     	; 0x512 <MCP_DAC::transfer(unsigned int) [clone .constprop.78]+0x46>
     4e4:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <light+0x15>
     4e8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <light+0x16>
beginTransaction():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     4ec:	9d b9       	out	0x0d, r25	; 13
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
     4ee:	8e b9       	out	0x0e, r24	; 14
transfer():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:212
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     4f0:	df b9       	out	0x0f, r29	; 15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     4f2:	00 00       	nop
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     4f4:	77 9b       	sbis	0x0e, 7	; 14
     4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <MCP_DAC::transfer(unsigned int) [clone .constprop.78]+0x28>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:221
    return SPDR;
     4f8:	8f b1       	in	r24, 0x0f	; 15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     4fa:	cf b9       	out	0x0f, r28	; 15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     4fc:	00 00       	nop
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     4fe:	77 9b       	sbis	0x0e, 7	; 14
     500:	fe cf       	rjmp	.-4      	; 0x4fe <MCP_DAC::transfer(unsigned int) [clone .constprop.78]+0x32>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:221
    return SPDR;
     502:	8f b1       	in	r24, 0x0f	; 15
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:256
  else      //  Software SPI
  {
    swSPI_transfer((uint8_t)(data >> 8));
    swSPI_transfer((uint8_t)(data & 0xFF));
  }
  digitalWrite(_select, HIGH);
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <light+0x2>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:257
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:256
  else      //  Software SPI
  {
    swSPI_transfer((uint8_t)(data >> 8));
    swSPI_transfer((uint8_t)(data & 0xFF));
  }
  digitalWrite(_select, HIGH);
     50e:	0c 94 12 02 	jmp	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:253
    mySPI->transfer((uint8_t)(data & 0xFF));
    mySPI->endTransaction();
  }
  else      //  Software SPI
  {
    swSPI_transfer((uint8_t)(data >> 8));
     512:	8d 2f       	mov	r24, r29
     514:	0e 94 40 02 	call	0x480	; 0x480 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.79]>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:254
    swSPI_transfer((uint8_t)(data & 0xFF));
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 40 02 	call	0x480	; 0x480 <MCP_DAC::swSPI_transfer(unsigned char) [clone .constprop.79]>
     51e:	f2 cf       	rjmp	.-28     	; 0x504 <MCP_DAC::transfer(unsigned int) [clone .constprop.78]+0x38>

00000520 <lightregulator::setintencity(unsigned char) [clone .part.1] [clone .constprop.74]>:
_ZN14lightregulator12setintencityEh.part.1():
/home/stend/Документы/stend/hardware/light_regulator.h:42
lightregulator::lightregulator() {};

void lightregulator::setintencity(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
     520:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <light+0x17>
     524:	0e 2e       	mov	r0, r30
     526:	00 0c       	add	r0, r0
     528:	ff 0b       	sbc	r31, r31
     52a:	ed 52       	subi	r30, 0x2D	; 45
     52c:	fd 4f       	sbci	r31, 0xFD	; 253
     52e:	81 8d       	ldd	r24, Z+25	; 0x19
     530:	90 e0       	ldi	r25, 0x00	; 0
fastWriteA():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:131
}


void MCP_DAC::fastWriteA(uint16_t value)
{
  transfer(0x3000 | value);
     532:	90 63       	ori	r25, 0x30	; 48
     534:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <MCP_DAC::transfer(unsigned int) [clone .constprop.78]>

00000538 <micros>:
micros():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     538:	3f b7       	in	r19, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     53a:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     53c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timer0_overflow_count>
     540:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timer0_overflow_count+0x1>
     544:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timer0_overflow_count+0x2>
     548:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timer0_overflow_count+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     54c:	22 b7       	in	r18, 0x32	; 50
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     54e:	06 b6       	in	r0, 0x36	; 54
     550:	00 fe       	sbrs	r0, 0
     552:	05 c0       	rjmp	.+10     	; 0x55e <micros+0x26>
     554:	2f 3f       	cpi	r18, 0xFF	; 255
     556:	19 f0       	breq	.+6      	; 0x55e <micros+0x26>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	a1 1d       	adc	r26, r1
     55c:	b1 1d       	adc	r27, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     55e:	3f bf       	out	0x3f, r19	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     560:	ba 2f       	mov	r27, r26
     562:	a9 2f       	mov	r26, r25
     564:	98 2f       	mov	r25, r24
     566:	88 27       	eor	r24, r24
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	62 0f       	add	r22, r18
     56e:	71 1d       	adc	r23, r1
     570:	81 1d       	adc	r24, r1
     572:	91 1d       	adc	r25, r1
     574:	42 e0       	ldi	r20, 0x02	; 2
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	88 1f       	adc	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	4a 95       	dec	r20
     580:	d1 f7       	brne	.-12     	; 0x576 <micros+0x3e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     582:	08 95       	ret

00000584 <millis>:
millis():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     584:	2f b7       	in	r18, 0x3f	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     586:	f8 94       	cli
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     588:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <timer0_millis>
     58c:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <timer0_millis+0x1>
     590:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <timer0_millis+0x2>
     594:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <timer0_millis+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     598:	2f bf       	out	0x3f, r18	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
     59a:	08 95       	ret

0000059c <String::StringIfHelper() const>:
StringIfHelper():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:51
{
  // use a function pointer to allow for "if (s)" without the
  // complications of an operator bool(). for more information, see:
  // http://www.artima.com/cppsource/safebool.html
  typedef void (String::*StringIfHelperType)() const;
  void StringIfHelper() const {}
     59c:	08 95       	ret

0000059e <Print::write(unsigned char const*, unsigned int)>:
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	6c 01       	movw	r12, r24
     5b4:	7b 01       	movw	r14, r22
     5b6:	8b 01       	movw	r16, r22
     5b8:	04 0f       	add	r16, r20
     5ba:	15 1f       	adc	r17, r21
     5bc:	eb 01       	movw	r28, r22
     5be:	5e 01       	movw	r10, r28
     5c0:	ae 18       	sub	r10, r14
     5c2:	bf 08       	sbc	r11, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     5c4:	c0 17       	cp	r28, r16
     5c6:	d1 07       	cpc	r29, r17
     5c8:	59 f0       	breq	.+22     	; 0x5e0 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     5ca:	69 91       	ld	r22, Y+
     5cc:	d6 01       	movw	r26, r12
     5ce:	ed 91       	ld	r30, X+
     5d0:	fc 91       	ld	r31, X
     5d2:	01 90       	ld	r0, Z+
     5d4:	f0 81       	ld	r31, Z
     5d6:	e0 2d       	mov	r30, r0
     5d8:	c6 01       	movw	r24, r12
     5da:	09 95       	icall
     5dc:	89 2b       	or	r24, r25
     5de:	79 f7       	brne	.-34     	; 0x5be <Print::write(unsigned char const*, unsigned int)+0x20>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     5e0:	c5 01       	movw	r24, r10
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	08 95       	ret

000005f8 <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     5f8:	fc 01       	movw	r30, r24
     5fa:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     5fc:	44 8d       	ldd	r20, Z+28	; 0x1c
     5fe:	25 2f       	mov	r18, r21
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	84 2f       	mov	r24, r20
     604:	90 e0       	ldi	r25, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     606:	82 1b       	sub	r24, r18
     608:	93 0b       	sbc	r25, r19
     60a:	54 17       	cp	r21, r20
     60c:	10 f0       	brcs	.+4      	; 0x612 <HardwareSerial::availableForWrite()+0x1a>
     60e:	cf 96       	adiw	r24, 0x3f	; 63
     610:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     612:	01 97       	sbiw	r24, 0x01	; 1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     614:	08 95       	ret

00000616 <HardwareSerial::read()>:
read():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     616:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     618:	91 8d       	ldd	r25, Z+25	; 0x19
     61a:	82 8d       	ldd	r24, Z+26	; 0x1a
     61c:	98 17       	cp	r25, r24
     61e:	61 f0       	breq	.+24     	; 0x638 <HardwareSerial::read()+0x22>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     620:	a2 8d       	ldd	r26, Z+26	; 0x1a
     622:	ae 0f       	add	r26, r30
     624:	bf 2f       	mov	r27, r31
     626:	b1 1d       	adc	r27, r1
     628:	5d 96       	adiw	r26, 0x1d	; 29
     62a:	8c 91       	ld	r24, X
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     62c:	92 8d       	ldd	r25, Z+26	; 0x1a
     62e:	9f 5f       	subi	r25, 0xFF	; 255
     630:	9f 73       	andi	r25, 0x3F	; 63
     632:	92 8f       	std	Z+26, r25	; 0x1a
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f ef       	ldi	r25, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     63c:	08 95       	ret

0000063e <Stream::timedRead() [clone .constprop.16]>:
timedRead():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:31
#include "Stream.h"

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:34
{
  int c;
  _startMillis = millis();
     642:	0e 94 c2 02 	call	0x584	; 0x584 <millis>
     646:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <Serial+0x8>
     64a:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <Serial+0x9>
     64e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Serial+0xa>
     652:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <Serial+0xb>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:36
  do {
    c = read();
     656:	86 e2       	ldi	r24, 0x26	; 38
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 0b 03 	call	0x616	; 0x616 <HardwareSerial::read()>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:37
    if (c >= 0) return c;
     65e:	97 ff       	sbrs	r25, 7
     660:	1d c0       	rjmp	.+58     	; 0x69c <Stream::timedRead() [clone .constprop.16]+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:38
  } while(millis() - _startMillis < _timeout);
     662:	0e 94 c2 02 	call	0x584	; 0x584 <millis>
     666:	00 91 2e 02 	lds	r16, 0x022E	; 0x80022e <Serial+0x8>
     66a:	10 91 2f 02 	lds	r17, 0x022F	; 0x80022f <Serial+0x9>
     66e:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <Serial+0xa>
     672:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <Serial+0xb>
     676:	60 1b       	sub	r22, r16
     678:	71 0b       	sbc	r23, r17
     67a:	82 0b       	sbc	r24, r18
     67c:	93 0b       	sbc	r25, r19
     67e:	00 91 2a 02 	lds	r16, 0x022A	; 0x80022a <Serial+0x4>
     682:	10 91 2b 02 	lds	r17, 0x022B	; 0x80022b <Serial+0x5>
     686:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <Serial+0x6>
     68a:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <Serial+0x7>
     68e:	60 17       	cp	r22, r16
     690:	71 07       	cpc	r23, r17
     692:	82 07       	cpc	r24, r18
     694:	93 07       	cpc	r25, r19
     696:	f8 f2       	brcs	.-66     	; 0x656 <Stream::timedRead() [clone .constprop.16]+0x18>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:39
  return -1;     // -1 indicates timeout
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	9f ef       	ldi	r25, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:40
}
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <HardwareSerial::peek()>:
peek():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     6a2:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     6a4:	91 8d       	ldd	r25, Z+25	; 0x19
     6a6:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a8:	98 17       	cp	r25, r24
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <HardwareSerial::peek()+0x16>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     6ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ae:	e8 0f       	add	r30, r24
     6b0:	f1 1d       	adc	r31, r1
     6b2:	85 8d       	ldd	r24, Z+29	; 0x1d
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     6bc:	08 95       	ret

000006be <HardwareSerial::available()>:
available():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     6be:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     6c0:	91 8d       	ldd	r25, Z+25	; 0x19
     6c2:	22 8d       	ldd	r18, Z+26	; 0x1a
     6c4:	89 2f       	mov	r24, r25
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	80 5c       	subi	r24, 0xC0	; 192
     6ca:	9f 4f       	sbci	r25, 0xFF	; 255
     6cc:	82 1b       	sub	r24, r18
     6ce:	91 09       	sbc	r25, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     6d0:	8f 73       	andi	r24, 0x3F	; 63
     6d2:	99 27       	eor	r25, r25
     6d4:	08 95       	ret

000006d6 <Serial0_available()>:
Serial0_available():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     6d6:	86 e2       	ldi	r24, 0x26	; 38
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 5f 03 	call	0x6be	; 0x6be <HardwareSerial::available()>
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	89 2b       	or	r24, r25
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <Serial0_available()+0x10>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     6e6:	82 2f       	mov	r24, r18
     6e8:	08 95       	ret

000006ea <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     6ea:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     6ec:	a4 8d       	ldd	r26, Z+28	; 0x1c
     6ee:	a8 0f       	add	r26, r24
     6f0:	b9 2f       	mov	r27, r25
     6f2:	b1 1d       	adc	r27, r1
     6f4:	a3 5a       	subi	r26, 0xA3	; 163
     6f6:	bf 4f       	sbci	r27, 0xFF	; 255
     6f8:	2c 91       	ld	r18, X
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     6fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	8f 73       	andi	r24, 0x3F	; 63
     702:	99 27       	eor	r25, r25
     704:	84 8f       	std	Z+28, r24	; 0x1c
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     706:	a6 89       	ldd	r26, Z+22	; 0x16
     708:	b7 89       	ldd	r27, Z+23	; 0x17
     70a:	2c 93       	st	X, r18
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     70c:	a0 89       	ldd	r26, Z+16	; 0x10
     70e:	b1 89       	ldd	r27, Z+17	; 0x11
     710:	8c 91       	ld	r24, X
     712:	83 70       	andi	r24, 0x03	; 3
     714:	80 64       	ori	r24, 0x40	; 64
     716:	8c 93       	st	X, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     718:	93 8d       	ldd	r25, Z+27	; 0x1b
     71a:	84 8d       	ldd	r24, Z+28	; 0x1c
     71c:	98 13       	cpse	r25, r24
     71e:	06 c0       	rjmp	.+12     	; 0x72c <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     720:	02 88       	ldd	r0, Z+18	; 0x12
     722:	f3 89       	ldd	r31, Z+19	; 0x13
     724:	e0 2d       	mov	r30, r0
     726:	80 81       	ld	r24, Z
     728:	8f 7d       	andi	r24, 0xDF	; 223
     72a:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     72c:	08 95       	ret

0000072e <HardwareSerial::write(unsigned char)>:
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	88 8f       	std	Y+24, r24	; 0x18
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     740:	9b 8d       	ldd	r25, Y+27	; 0x1b
     742:	8c 8d       	ldd	r24, Y+28	; 0x1c
     744:	98 13       	cpse	r25, r24
     746:	1a c0       	rjmp	.+52     	; 0x77c <HardwareSerial::write(unsigned char)+0x4e>
     748:	e8 89       	ldd	r30, Y+16	; 0x10
     74a:	f9 89       	ldd	r31, Y+17	; 0x11
     74c:	80 81       	ld	r24, Z
     74e:	85 ff       	sbrs	r24, 5
     750:	15 c0       	rjmp	.+42     	; 0x77c <HardwareSerial::write(unsigned char)+0x4e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     752:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     754:	f8 94       	cli
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     756:	ee 89       	ldd	r30, Y+22	; 0x16
     758:	ff 89       	ldd	r31, Y+23	; 0x17
     75a:	60 83       	st	Z, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     75c:	e8 89       	ldd	r30, Y+16	; 0x10
     75e:	f9 89       	ldd	r31, Y+17	; 0x11
     760:	80 81       	ld	r24, Z
     762:	83 70       	andi	r24, 0x03	; 3
     764:	80 64       	ori	r24, 0x40	; 64
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     766:	80 83       	st	Z, r24
__iRestore():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     768:	9f bf       	out	0x3f, r25	; 63
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	08 95       	ret
     77c:	f6 2e       	mov	r15, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     77e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	0f 5f       	subi	r16, 0xFF	; 255
     784:	1f 4f       	sbci	r17, 0xFF	; 255
     786:	0f 73       	andi	r16, 0x3F	; 63
     788:	11 27       	eor	r17, r17
     78a:	e0 2e       	mov	r14, r16
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     78c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     78e:	8e 11       	cpse	r24, r14
     790:	0c c0       	rjmp	.+24     	; 0x7aa <HardwareSerial::write(unsigned char)+0x7c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	07 fc       	sbrc	r0, 7
     796:	fa cf       	rjmp	.-12     	; 0x78c <HardwareSerial::write(unsigned char)+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     798:	e8 89       	ldd	r30, Y+16	; 0x10
     79a:	f9 89       	ldd	r31, Y+17	; 0x11
     79c:	80 81       	ld	r24, Z
     79e:	85 ff       	sbrs	r24, 5
     7a0:	f5 cf       	rjmp	.-22     	; 0x78c <HardwareSerial::write(unsigned char)+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 75 03 	call	0x6ea	; 0x6ea <HardwareSerial::_tx_udr_empty_irq()>
     7a8:	f1 cf       	rjmp	.-30     	; 0x78c <HardwareSerial::write(unsigned char)+0x5e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 2f       	mov	r31, r29
     7b0:	f1 1d       	adc	r31, r1
     7b2:	e3 5a       	subi	r30, 0xA3	; 163
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	f0 82       	st	Z, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7b8:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7ba:	f8 94       	cli
write():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     7bc:	0b 8f       	std	Y+27, r16	; 0x1b
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     7be:	ea 89       	ldd	r30, Y+18	; 0x12
     7c0:	fb 89       	ldd	r31, Y+19	; 0x13
     7c2:	80 81       	ld	r24, Z
     7c4:	80 62       	ori	r24, 0x20	; 32
     7c6:	cf cf       	rjmp	.-98     	; 0x766 <HardwareSerial::write(unsigned char)+0x38>

000007c8 <HardwareSerial::flush()>:
flush():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7ce:	88 8d       	ldd	r24, Y+24	; 0x18
     7d0:	88 23       	and	r24, r24
     7d2:	b9 f0       	breq	.+46     	; 0x802 <HardwareSerial::flush()+0x3a>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7d4:	aa 89       	ldd	r26, Y+18	; 0x12
     7d6:	bb 89       	ldd	r27, Y+19	; 0x13
     7d8:	e8 89       	ldd	r30, Y+16	; 0x10
     7da:	f9 89       	ldd	r31, Y+17	; 0x11
     7dc:	8c 91       	ld	r24, X
     7de:	85 fd       	sbrc	r24, 5
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <HardwareSerial::flush()+0x20>
     7e2:	80 81       	ld	r24, Z
     7e4:	86 fd       	sbrc	r24, 6
     7e6:	0d c0       	rjmp	.+26     	; 0x802 <HardwareSerial::flush()+0x3a>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	07 fc       	sbrc	r0, 7
     7ec:	f7 cf       	rjmp	.-18     	; 0x7dc <HardwareSerial::flush()+0x14>
     7ee:	8c 91       	ld	r24, X
     7f0:	85 ff       	sbrs	r24, 5
     7f2:	f2 cf       	rjmp	.-28     	; 0x7d8 <HardwareSerial::flush()+0x10>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     7f4:	80 81       	ld	r24, Z
     7f6:	85 ff       	sbrs	r24, 5
     7f8:	ed cf       	rjmp	.-38     	; 0x7d4 <HardwareSerial::flush()+0xc>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     7fa:	ce 01       	movw	r24, r28
     7fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <HardwareSerial::_tx_udr_empty_irq()>
     800:	e9 cf       	rjmp	.-46     	; 0x7d4 <HardwareSerial::flush()+0xc>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <serialEventRun()>:
serialEventRun():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	89 2b       	or	r24, r25
     80e:	29 f0       	breq	.+10     	; 0x81a <serialEventRun()+0x12>
     810:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Serial0_available()>
     814:	81 11       	cpse	r24, r1
     816:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	89 2b       	or	r24, r25
     820:	49 f0       	breq	.+18     	; 0x834 <serialEventRun()+0x2c>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	89 2b       	or	r24, r25
     828:	29 f0       	breq	.+10     	; 0x834 <serialEventRun()+0x2c>
     82a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     82e:	81 11       	cpse	r24, r1
     830:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     834:	08 95       	ret

00000836 <motorRouter::setPC(int) [clone .isra.6]>:
_ZN11motorRouter5setPCEi.isra.6():
/home/stend/Документы/stend/hardware/motor_regulator.h:36

private:

  void setPC(int value) {
    
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
     836:	95 b3       	in	r25, 0x15	; 21
     838:	90 7f       	andi	r25, 0xF0	; 240
     83a:	95 bb       	out	0x15, r25	; 21
/home/stend/Документы/stend/hardware/motor_regulator.h:37
    PORTC |= (value & 0x0F);
     83c:	95 b3       	in	r25, 0x15	; 21
     83e:	8f 70       	andi	r24, 0x0F	; 15
     840:	89 2b       	or	r24, r25
     842:	85 bb       	out	0x15, r24	; 21
/home/stend/Документы/stend/hardware/motor_regulator.h:38
  }
     844:	08 95       	ret

00000846 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15] [clone .constprop.60]>:
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.15():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:137
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
        return t;
    }

    template< typename T > const T &put( int idx, const T &t ){
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:140
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     84e:	18 81       	ld	r17, Y
operator*():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <eeprom_read_byte>
update():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     858:	18 17       	cp	r17, r24
     85a:	29 f0       	breq	.+10     	; 0x866 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15] [clone .constprop.60]+0x20>
_ZN5EERefaSEh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     85c:	61 2f       	mov	r22, r17
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <eeprom_write_byte>
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.15():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:140
    }

    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
     866:	19 81       	ldd	r17, Y+1	; 0x01
operator*():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <eeprom_read_byte>
update():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
     870:	18 17       	cp	r17, r24
     872:	29 f0       	breq	.+10     	; 0x87e <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15] [clone .constprop.60]+0x38>
_ZN5EERefaSEh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     874:	61 2f       	mov	r22, r17
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <eeprom_write_byte>
_ZN11EEPROMClass3putIiEERKT_iS3_.isra.15():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:142
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
        return t;
    }
     87e:	ce 01       	movw	r24, r28
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	08 95       	ret

00000888 <motorRouter::makeStepForward() [clone .constprop.56]>:
makeStepForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:129
    _delay_ms(TACKT);
  }

  void makeStepForward() {

    setPC(m_forwardStrobes[m_forwardIndex]);
     888:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <motor+0x8>
     88c:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <motor+0x9>
     890:	ec 53       	subi	r30, 0x3C	; 60
     892:	fd 4f       	sbci	r31, 0xFD	; 253
     894:	80 81       	ld	r24, Z
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 1b 04 	call	0x836	; 0x836 <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	89 ef       	ldi	r24, 0xF9	; 249
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	21 50       	subi	r18, 0x01	; 1
     8a4:	80 40       	sbci	r24, 0x00	; 0
     8a6:	90 40       	sbci	r25, 0x00	; 0
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <motorRouter::makeStepForward() [clone .constprop.56]+0x1a>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <motorRouter::makeStepForward() [clone .constprop.56]+0x24>
     8ac:	00 00       	nop
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
     8ae:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <motor+0x8>
     8b2:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <motor+0x9>
     8b6:	01 96       	adiw	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/motor_regulator.h:43
    
    if(m_forwardIndex > 3) {
     8b8:	84 30       	cpi	r24, 0x04	; 4
     8ba:	91 05       	cpc	r25, r1
     8bc:	70 f4       	brcc	.+28     	; 0x8da <motorRouter::makeStepForward() [clone .constprop.56]+0x52>
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
     8be:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <motor+0x9>
     8c2:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <motor+0x8>
makeStepForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:132
  void makeStepForward() {

    setPC(m_forwardStrobes[m_forwardIndex]);
    _delay_ms(TACKT);
    nextForwardStrobe();
    m_stepsCounter++;
     8c6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
     8ca:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <motor+0xd>
     8d4:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <motor+0xc>
/home/stend/Документы/stend/hardware/motor_regulator.h:133
  }
     8d8:	08 95       	ret
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:44
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    
    if(m_forwardIndex > 3) {
      m_forwardIndex = 0;
     8da:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <motor+0x9>
     8de:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <motor+0x8>
     8e2:	f1 cf       	rjmp	.-30     	; 0x8c6 <motorRouter::makeStepForward() [clone .constprop.56]+0x3e>

000008e4 <motorRouter::makeStepBackward() [clone .constprop.54]>:
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:136
    nextForwardStrobe();
    m_stepsCounter++;
  }
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
     8e4:	e0 91 ce 02 	lds	r30, 0x02CE	; 0x8002ce <motor+0xa>
     8e8:	f0 91 cf 02 	lds	r31, 0x02CF	; 0x8002cf <motor+0xb>
     8ec:	ec 53       	subi	r30, 0x3C	; 60
     8ee:	fd 4f       	sbci	r31, 0xFD	; 253
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 1b 04 	call	0x836	; 0x836 <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	89 ef       	ldi	r24, 0xF9	; 249
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <motorRouter::makeStepBackward() [clone .constprop.54]+0x1a>
     906:	00 c0       	rjmp	.+0      	; 0x908 <motorRouter::makeStepBackward() [clone .constprop.54]+0x24>
     908:	00 00       	nop
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
     90a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <motor+0xa>
     90e:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <motor+0xb>
     912:	01 96       	adiw	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/motor_regulator.h:43
    
    if(m_forwardIndex > 3) {
     914:	84 30       	cpi	r24, 0x04	; 4
     916:	91 05       	cpc	r25, r1
     918:	70 f4       	brcc	.+28     	; 0x936 <motorRouter::makeStepBackward() [clone .constprop.54]+0x52>
/home/stend/Документы/stend/hardware/motor_regulator.h:41
    PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
    PORTC |= (value & 0x0F);
  }
  
  void nextForwardStrobe() {
    m_forwardIndex++;
     91a:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <motor+0xb>
     91e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <motor+0xa>
makeStepBackward():
/home/stend/Документы/stend/hardware/motor_regulator.h:139
  void makeStepBackward() {

    setPC(m_backwardStrobes[m_backwardIndex]);
    _delay_ms(TACKT);
    nextBackwardStrobe();
    m_stepsCounter--;
     922:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
     926:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <motor+0xd>
     930:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <motor+0xc>
/home/stend/Документы/stend/hardware/motor_regulator.h:140
  }
     934:	08 95       	ret
_ZN11motorRouter17nextForwardStrobeEv.isra.7():
/home/stend/Документы/stend/hardware/motor_regulator.h:44
  
  void nextForwardStrobe() {
    m_forwardIndex++;
    
    if(m_forwardIndex > 3) {
      m_forwardIndex = 0;
     936:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <motor+0xb>
     93a:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <motor+0xa>
     93e:	f1 cf       	rjmp	.-30     	; 0x922 <motorRouter::makeStepBackward() [clone .constprop.54]+0x3e>

00000940 <motorRouter::stop() [clone .isra.12]>:
_ZN11motorRouter4stopEv.isra.12():
/home/stend/Документы/stend/hardware/motor_regulator.h:123
    return m_stepsCounter;
  }

  void stop() {
    
    setPC(0b0000);
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 1b 04 	call	0x836	; 0x836 <motorRouter::setPC(int) [clone .isra.6]>
_delay_ms():
/home/stend/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay.h:187
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	89 ef       	ldi	r24, 0xF9	; 249
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <motorRouter::stop() [clone .isra.12]+0xe>
     956:	00 c0       	rjmp	.+0      	; 0x958 <motorRouter::stop() [clone .isra.12]+0x18>
     958:	00 00       	nop
_ZN11motorRouter4stopEv.isra.12():
/home/stend/Документы/stend/hardware/motor_regulator.h:125
    _delay_ms(TACKT);
  }
     95a:	08 95       	ret

0000095c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>:
_ZN5Print5writeEPKc.part.2():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     95c:	fc 01       	movw	r30, r24
     95e:	01 90       	ld	r0, Z+
     960:	00 20       	and	r0, r0
     962:	e9 f7       	brne	.-6      	; 0x95e <Print::write(char const*) [clone .part.2] [clone .constprop.46]+0x2>
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	af 01       	movw	r20, r30
     968:	48 1b       	sub	r20, r24
     96a:	59 0b       	sbc	r21, r25
     96c:	bc 01       	movw	r22, r24
     96e:	86 e2       	ldi	r24, 0x26	; 38
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0c 94 cf 02 	jmp	0x59e	; 0x59e <Print::write(unsigned char const*, unsigned int)>

00000976 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]>:
printNumber():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	a1 97       	sbiw	r28, 0x21	; 33
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     996:	19 a2       	std	Y+33, r1	; 0x21
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     998:	42 30       	cpi	r20, 0x02	; 2
     99a:	08 f4       	brcc	.+2      	; 0x99e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]+0x28>
     99c:	4a e0       	ldi	r20, 0x0A	; 10
     99e:	8e 01       	movw	r16, r28
     9a0:	0f 5d       	subi	r16, 0xDF	; 223
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     9a4:	84 2e       	mov	r8, r20
     9a6:	91 2c       	mov	r9, r1
     9a8:	b1 2c       	mov	r11, r1
     9aa:	a1 2c       	mov	r10, r1
     9ac:	a5 01       	movw	r20, r10
     9ae:	94 01       	movw	r18, r8
     9b0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__udivmodsi4>
     9b4:	e6 2f       	mov	r30, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
     9b6:	b9 01       	movw	r22, r18
     9b8:	ca 01       	movw	r24, r20
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     9ba:	ea 30       	cpi	r30, 0x0A	; 10
     9bc:	f4 f4       	brge	.+60     	; 0x9fa <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]+0x84>
     9be:	e0 5d       	subi	r30, 0xD0	; 208
     9c0:	d8 01       	movw	r26, r16
     9c2:	ee 93       	st	-X, r30
     9c4:	8d 01       	movw	r16, r26
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
     9c6:	23 2b       	or	r18, r19
     9c8:	24 2b       	or	r18, r20
     9ca:	25 2b       	or	r18, r21
     9cc:	79 f7       	brne	.-34     	; 0x9ac <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]+0x36>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
write():
     9d2:	10 97       	sbiw	r26, 0x00	; 0
     9d4:	19 f0       	breq	.+6      	; 0x9dc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]+0x66>
     9d6:	cd 01       	movw	r24, r26
     9d8:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
printNumber():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     9dc:	a1 96       	adiw	r28, 0x21	; 33
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	bf 90       	pop	r11
     9f2:	af 90       	pop	r10
     9f4:	9f 90       	pop	r9
     9f6:	8f 90       	pop	r8
     9f8:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     9fa:	e9 5c       	subi	r30, 0xC9	; 201
     9fc:	e1 cf       	rjmp	.-62     	; 0x9c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]+0x4a>

000009fe <Print::println(char const*) [clone .constprop.43]>:
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
write():
     a02:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
     a06:	ec 01       	movw	r28, r24
     a08:	8d e2       	ldi	r24, 0x2D	; 45
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     a10:	8c 0f       	add	r24, r28
     a12:	9d 1f       	adc	r25, r29
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <Print::println(unsigned int, int) [clone .constprop.33]>:
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:166
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
print():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     a1e:	bc 01       	movw	r22, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     a24:	4a e0       	ldi	r20, 0x0A	; 10
     a26:	0e 94 bb 04 	call	0x976	; 0x976 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]>
     a2a:	ec 01       	movw	r28, r24
write():
     a2c:	8d e2       	ldi	r24, 0x2D	; 45
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
println():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     a34:	8c 0f       	add	r24, r28
     a36:	9d 1f       	adc	r25, r29
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <String::~String()>:
__base_dtor ():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	11 f0       	breq	.+4      	; 0xa4c <String::~String()+0xe>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
     a48:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:126
}
     a4c:	08 95       	ret

00000a4e <String::startsWith(String const&) const [clone .constprop.28]>:
startsWith():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:490
    if (tolower(*p1++) != tolower(*p2++)) return 0;
  } 
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
     a4e:	fc 01       	movw	r30, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:492
{
  if (len < s2.len) return 0;
     a50:	44 81       	ldd	r20, Z+4	; 0x04
     a52:	55 81       	ldd	r21, Z+5	; 0x05
     a54:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
     a58:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
     a5c:	84 17       	cp	r24, r20
     a5e:	95 07       	cpc	r25, r21
     a60:	80 f0       	brcs	.+32     	; 0xa82 <String::startsWith(String const&) const [clone .constprop.28]+0x34>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:498
  return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
  if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     a62:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
     a66:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	51 f0       	breq	.+20     	; 0xa82 <String::startsWith(String const&) const [clone .constprop.28]+0x34>
     a6e:	60 81       	ld	r22, Z
     a70:	71 81       	ldd	r23, Z+1	; 0x01
     a72:	61 15       	cp	r22, r1
     a74:	71 05       	cpc	r23, r1
     a76:	29 f0       	breq	.+10     	; 0xa82 <String::startsWith(String const&) const [clone .constprop.28]+0x34>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:499
  return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     a78:	0e 94 fe 11 	call	0x23fc	; 0x23fc <strncmp>
     a7c:	21 e0       	ldi	r18, 0x01	; 1
     a7e:	89 2b       	or	r24, r25
     a80:	09 f0       	breq	.+2      	; 0xa84 <String::startsWith(String const&) const [clone .constprop.28]+0x36>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:492
  return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
  if (len < s2.len) return 0;
     a82:	20 e0       	ldi	r18, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:494
  return startsWith(s2, 0);
}
     a84:	82 2f       	mov	r24, r18
     a86:	08 95       	ret

00000a88 <String::equals(char const*) const [clone .constprop.26]>:
equals():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:452
  return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
     a88:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
     a8c:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
     a90:	23 2b       	or	r18, r19
     a92:	39 f4       	brne	.+14     	; 0xaa2 <String::equals(char const*) const [clone .constprop.26]+0x1a>
     a94:	21 e0       	ldi	r18, 0x01	; 1
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	88 23       	and	r24, r24
     a9c:	61 f0       	breq	.+24     	; 0xab6 <String::equals(char const*) const [clone .constprop.26]+0x2e>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:454
  if (cstr == NULL) return buffer[0] == 0;
  return strcmp(buffer, cstr) == 0;
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	0a c0       	rjmp	.+20     	; 0xab6 <String::equals(char const*) const [clone .constprop.26]+0x2e>
     aa2:	bc 01       	movw	r22, r24
     aa4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
     aa8:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     aac:	0e 94 ee 11 	call	0x23dc	; 0x23dc <strcmp>
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	89 2b       	or	r24, r25
     ab4:	a1 f7       	brne	.-24     	; 0xa9e <String::equals(char const*) const [clone .constprop.26]+0x16>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:455
}
     ab6:	82 2f       	mov	r24, r18
     ab8:	08 95       	ret

00000aba <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]>:
resetAndRereadBuffer():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:136
  return m_resRaw;
}

void adcPIDWorker::resetAndRereadBuffer() {

  memset(m_buff, 0, sizeof(int16_t) * ADC_PID_BUFF_SIZE);
     aba:	e2 e2       	ldi	r30, 0x22	; 34
     abc:	f3 e0       	ldi	r31, 0x03	; 3
     abe:	84 e1       	ldi	r24, 0x14	; 20
     ac0:	df 01       	movw	r26, r30
     ac2:	1d 92       	st	X+, r1
     ac4:	8a 95       	dec	r24
     ac6:	e9 f7       	brne	.-6      	; 0xac2 <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]+0x8>
read():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:126

adcPIDWorker::adcPIDWorker() {};

int16_t adcPIDWorker::read() {

  ADCSRA |= (1 << ADSC);
     ac8:	36 9a       	sbi	0x06, 6	; 6
/home/stend/Документы/stend/hardware/pid_regulator.cpp:127
  while (!(ADCSRA & (1 << ADSC)));
     aca:	36 9b       	sbis	0x06, 6	; 6
     acc:	fe cf       	rjmp	.-4      	; 0xaca <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]+0x10>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:129

  m_resRaw = (uint16_t)(ADCL | ADCH << 8);
     ace:	94 b1       	in	r25, 0x04	; 4
     ad0:	85 b1       	in	r24, 0x05	; 5
     ad2:	89 27       	eor	r24, r25
     ad4:	98 27       	eor	r25, r24
     ad6:	89 27       	eor	r24, r25
     ad8:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <pid+0x35>
     adc:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <pid+0x34>
resetAndRereadBuffer():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:139
void adcPIDWorker::resetAndRereadBuffer() {

  memset(m_buff, 0, sizeof(int16_t) * ADC_PID_BUFF_SIZE);

  for(uint8_t i = 0; i < ADC_PID_BUFF_SIZE; i++) {
    m_buff[i] = read();
     ae0:	81 93       	st	Z+, r24
     ae2:	91 93       	st	Z+, r25
/home/stend/Документы/stend/hardware/pid_regulator.cpp:138

void adcPIDWorker::resetAndRereadBuffer() {

  memset(m_buff, 0, sizeof(int16_t) * ADC_PID_BUFF_SIZE);

  for(uint8_t i = 0; i < ADC_PID_BUFF_SIZE; i++) {
     ae4:	b3 e0       	ldi	r27, 0x03	; 3
     ae6:	e6 33       	cpi	r30, 0x36	; 54
     ae8:	fb 07       	cpc	r31, r27
     aea:	71 f7       	brne	.-36     	; 0xac8 <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]+0xe>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:141
    m_buff[i] = read();
  }
}
     aec:	08 95       	ret

00000aee <adcPIDWorker::readBufferized(bool) [clone .constprop.11]>:
readBufferized():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:172
  ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3) & ~(1 << MUX4);
}

int16_t adcPIDWorker::readBufferized(bool diffRead) {
  
  resetAndRereadBuffer();
     aee:	0e 94 5d 05 	call	0xaba	; 0xaba <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:173
  resetAndRereadBuffer();
     af2:	0e 94 5d 05 	call	0xaba	; 0xaba <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:174
  resetAndRereadBuffer();
     af6:	0e 94 5d 05 	call	0xaba	; 0xaba <adcPIDWorker::resetAndRereadBuffer() [clone .constprop.12]>
     afa:	e6 e2       	ldi	r30, 0x26	; 38
     afc:	f3 e0       	ldi	r31, 0x03	; 3
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	dc 01       	movw	r26, r24
/home/stend/Документы/stend/hardware/pid_regulator.cpp:180

  m_sum = 0;
  m_bufferizedValue = 0;

  for(uint8_t i = 2; i < ADC_PID_BUFF_SIZE; i++) {
    m_sum += m_buff[i];
     b04:	41 91       	ld	r20, Z+
     b06:	51 91       	ld	r21, Z+
     b08:	05 2e       	mov	r0, r21
     b0a:	00 0c       	add	r0, r0
     b0c:	66 0b       	sbc	r22, r22
     b0e:	77 0b       	sbc	r23, r23
     b10:	84 0f       	add	r24, r20
     b12:	95 1f       	adc	r25, r21
     b14:	a6 1f       	adc	r26, r22
     b16:	b7 1f       	adc	r27, r23
/home/stend/Документы/stend/hardware/pid_regulator.cpp:179
  resetAndRereadBuffer();

  m_sum = 0;
  m_bufferizedValue = 0;

  for(uint8_t i = 2; i < ADC_PID_BUFF_SIZE; i++) {
     b18:	23 e0       	ldi	r18, 0x03	; 3
     b1a:	e6 33       	cpi	r30, 0x36	; 54
     b1c:	f2 07       	cpc	r31, r18
     b1e:	91 f7       	brne	.-28     	; 0xb04 <adcPIDWorker::readBufferized(bool) [clone .constprop.11]+0x16>
     b20:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <pid+0x30>
     b24:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <pid+0x31>
     b28:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <pid+0x32>
     b2c:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <pid+0x33>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:183
    m_sum += m_buff[i];
  }

  m_bufferizedValue = (m_sum >> 3);
     b30:	23 e0       	ldi	r18, 0x03	; 3
     b32:	b5 95       	asr	r27
     b34:	a7 95       	ror	r26
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
     b3a:	2a 95       	dec	r18
     b3c:	d1 f7       	brne	.-12     	; 0xb32 <adcPIDWorker::readBufferized(bool) [clone .constprop.11]+0x44>
     b3e:	9c 01       	movw	r18, r24
     b40:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <pid+0x37>
     b44:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <pid+0x36>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:189

  if(diffRead == ADC_PID_REGULAR_READ) {
    return m_bufferizedValue;    
  }

  if(m_bufferizedValue > 512) {
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	42 e0       	ldi	r20, 0x02	; 2
     b4c:	94 07       	cpc	r25, r20
     b4e:	24 f0       	brlt	.+8      	; 0xb58 <adcPIDWorker::readBufferized(bool) [clone .constprop.11]+0x6a>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:190
    return 512 - m_bufferizedValue; 
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	32 e0       	ldi	r19, 0x02	; 2
     b54:	28 1b       	sub	r18, r24
     b56:	39 0b       	sbc	r19, r25
/home/stend/Документы/stend/hardware/pid_regulator.cpp:194
  }

  return m_bufferizedValue;
}
     b58:	c9 01       	movw	r24, r18
     b5a:	08 95       	ret

00000b5c <pidRegulator::readCurrentADCDiff() const [clone .constprop.7]>:
readCurrentADCDiff():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:88
  keepThermalDelta(0);
}

stend::ADC_diff_t pidRegulator::readCurrentADCDiff() const {

  if(m_warmerData.resolution == ADC_RESOLUTION_x1) {
     b5c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <pid+0x4>
     b60:	81 11       	cpse	r24, r1
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <pidRegulator::readCurrentADCDiff() const [clone .constprop.7]+0x14>
setResolutionX1():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:153
}

void adcPIDWorker::setResolutionX1() const {
  
  //ADC3 - ABC2 x 1 (MUX[4:0] = 0b11011)
  ADMUX &= ~(1 << MUX2);
     b64:	3a 98       	cbi	0x07, 2	; 7
/home/stend/Документы/stend/hardware/pid_regulator.cpp:154
  ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << MUX3) | (1 << MUX4);
     b66:	87 b1       	in	r24, 0x07	; 7
     b68:	8b 61       	ori	r24, 0x1B	; 27
setResolutionX10():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:161

void adcPIDWorker::setResolutionX10() const {
  
  //ADC3 - ABC2 x 10 (MUX[4:0] = 0b01101)
  ADMUX &= ~(1 << MUX1) & ~(1 << MUX4);
  ADMUX |= (1 << MUX0) | (1 << MUX2) | (1 << MUX3);
     b6a:	87 b9       	out	0x07, r24	; 7
readCurrentADCDiff():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:95
    m_pidADC.setResolutionX1();
    return m_pidADC.readBufferized(PID_DIFFERENTIAL_READ);
  }
  
  m_pidADC.setResolutionX10();
  return m_pidADC.readBufferized(PID_DIFFERENTIAL_READ);
     b6c:	0c 94 77 05 	jmp	0xaee	; 0xaee <adcPIDWorker::readBufferized(bool) [clone .constprop.11]>
setResolutionX10():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:160
}

void adcPIDWorker::setResolutionX10() const {
  
  //ADC3 - ABC2 x 10 (MUX[4:0] = 0b01101)
  ADMUX &= ~(1 << MUX1) & ~(1 << MUX4);
     b70:	87 b1       	in	r24, 0x07	; 7
     b72:	8d 7e       	andi	r24, 0xED	; 237
     b74:	87 b9       	out	0x07, r24	; 7
/home/stend/Документы/stend/hardware/pid_regulator.cpp:161
  ADMUX |= (1 << MUX0) | (1 << MUX2) | (1 << MUX3);
     b76:	87 b1       	in	r24, 0x07	; 7
     b78:	8d 60       	ori	r24, 0x0D	; 13
     b7a:	f7 cf       	rjmp	.-18     	; 0xb6a <pidRegulator::readCurrentADCDiff() const [clone .constprop.7]+0xe>

00000b7c <String::reserve(unsigned int)>:
reserve():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ec 01       	movw	r28, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     b86:	88 81       	ld	r24, Y
     b88:	99 81       	ldd	r25, Y+1	; 0x01
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	59 f0       	breq	.+22     	; 0xba4 <String::reserve(unsigned int)+0x28>
     b8e:	2a 81       	ldd	r18, Y+2	; 0x02
     b90:	3b 81       	ldd	r19, Y+3	; 0x03
     b92:	26 17       	cp	r18, r22
     b94:	37 07       	cpc	r19, r23
     b96:	30 f0       	brcs	.+12     	; 0xba4 <String::reserve(unsigned int)+0x28>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     b98:	81 e0       	ldi	r24, 0x01	; 1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret
     ba4:	8b 01       	movw	r16, r22
changeBuffer():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     ba6:	6f 5f       	subi	r22, 0xFF	; 255
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	0e 94 04 11 	call	0x2208	; 0x2208 <realloc>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <String::reserve(unsigned int)+0x4c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     bb2:	99 83       	std	Y+1, r25	; 0x01
     bb4:	88 83       	st	Y, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     bb6:	1b 83       	std	Y+3, r17	; 0x03
     bb8:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	23 2b       	or	r18, r19
     bc0:	59 f7       	brne	.-42     	; 0xb98 <String::reserve(unsigned int)+0x1c>
     bc2:	fc 01       	movw	r30, r24
     bc4:	10 82       	st	Z, r1
     bc6:	e8 cf       	rjmp	.-48     	; 0xb98 <String::reserve(unsigned int)+0x1c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	e7 cf       	rjmp	.-50     	; 0xb9a <String::reserve(unsigned int)+0x1e>

00000bcc <String::copy(char const*, unsigned int)>:
copy():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ec 01       	movw	r28, r24
     bda:	7b 01       	movw	r14, r22
     bdc:	8a 01       	movw	r16, r20
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:173
  if (!reserve(length)) {
     bde:	ba 01       	movw	r22, r20
     be0:	0e 94 be 05 	call	0xb7c	; 0xb7c <String::reserve(unsigned int)>
     be4:	28 81       	ld	r18, Y
     be6:	39 81       	ldd	r19, Y+1	; 0x01
     be8:	81 11       	cpse	r24, r1
     bea:	14 c0       	rjmp	.+40     	; 0xc14 <String::copy(char const*, unsigned int)+0x48>
invalidate():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     bec:	21 15       	cp	r18, r1
     bee:	31 05       	cpc	r19, r1
     bf0:	19 f0       	breq	.+6      	; 0xbf8 <String::copy(char const*, unsigned int)+0x2c>
     bf2:	c9 01       	movw	r24, r18
     bf4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     bf8:	19 82       	std	Y+1, r1	; 0x01
     bfa:	18 82       	st	Y, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     bfc:	1d 82       	std	Y+5, r1	; 0x05
     bfe:	1c 82       	std	Y+4, r1	; 0x04
     c00:	1b 82       	std	Y+3, r1	; 0x03
     c02:	1a 82       	std	Y+2, r1	; 0x02
copy():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     c04:	ce 01       	movw	r24, r28
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	08 95       	ret
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     c14:	1d 83       	std	Y+5, r17	; 0x05
     c16:	0c 83       	std	Y+4, r16	; 0x04
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     c18:	b7 01       	movw	r22, r14
     c1a:	c9 01       	movw	r24, r18
     c1c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <strcpy>
     c20:	f1 cf       	rjmp	.-30     	; 0xc04 <String::copy(char const*, unsigned int)+0x38>

00000c22 <String::String(char const*)>:
_ZN6String4initEv():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     c22:	fc 01       	movw	r30, r24
     c24:	11 82       	std	Z+1, r1	; 0x01
     c26:	10 82       	st	Z, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     c28:	13 82       	std	Z+3, r1	; 0x03
     c2a:	12 82       	std	Z+2, r1	; 0x02
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
     c2c:	15 82       	std	Z+5, r1	; 0x05
     c2e:	14 82       	std	Z+4, r1	; 0x04
__base_ctor ():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     c30:	fb 01       	movw	r30, r22
     c32:	01 90       	ld	r0, Z+
     c34:	00 20       	and	r0, r0
     c36:	e9 f7       	brne	.-6      	; 0xc32 <String::String(char const*)+0x10>
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	af 01       	movw	r20, r30
     c3c:	46 1b       	sub	r20, r22
     c3e:	57 0b       	sbc	r21, r23
     c40:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <String::copy(char const*, unsigned int)>

00000c44 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]>:
substring():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:615
    if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
  }
  return found;
}

String String::substring(unsigned int left, unsigned int right) const
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	7b 01       	movw	r14, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:617
{
  if (left > right) {
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	c8 2e       	mov	r12, r24
     c5c:	d1 2c       	mov	r13, r1
     c5e:	63 30       	cpi	r22, 0x03	; 3
     c60:	71 05       	cpc	r23, r1
     c62:	20 f4       	brcc	.+8      	; 0xc6c <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0x28>
     c64:	6b 01       	movw	r12, r22
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:619
    unsigned int temp = right;
    right = left;
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	e9 2e       	mov	r14, r25
     c6a:	f1 2c       	mov	r15, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:622
    left = temp;
  }
  String out;
     c6c:	6f e2       	ldi	r22, 0x2F	; 47
     c6e:	71 e0       	ldi	r23, 0x01	; 1
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 11 06 	call	0xc22	; 0xc22 <String::String(char const*)>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:623
  if (left >= len) return out;
     c76:	00 91 49 03 	lds	r16, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
     c7a:	10 91 4a 03 	lds	r17, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
     c7e:	c0 16       	cp	r12, r16
     c80:	d1 06       	cpc	r13, r17
     c82:	40 f5       	brcc	.+80     	; 0xcd4 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0x90>
     c84:	e0 16       	cp	r14, r16
     c86:	f1 06       	cpc	r15, r17
     c88:	08 f4       	brcc	.+2      	; 0xc8c <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0x48>
     c8a:	87 01       	movw	r16, r14
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
     c8c:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <stend::UARTbuffer>
     c90:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     c94:	e0 0f       	add	r30, r16
     c96:	f1 1f       	adc	r31, r17
     c98:	f0 80       	ld	r15, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
     c9a:	10 82       	st	Z, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
     c9c:	60 91 45 03 	lds	r22, 0x0345	; 0x800345 <stend::UARTbuffer>
     ca0:	70 91 46 03 	lds	r23, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     ca4:	6c 0d       	add	r22, r12
     ca6:	7d 1d       	adc	r23, r13
operator=():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
     ca8:	61 15       	cp	r22, r1
     caa:	71 05       	cpc	r23, r1
     cac:	e9 f0       	breq	.+58     	; 0xce8 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0xa4>
     cae:	fb 01       	movw	r30, r22
     cb0:	01 90       	ld	r0, Z+
     cb2:	00 20       	and	r0, r0
     cb4:	e9 f7       	brne	.-6      	; 0xcb0 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0x6c>
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	af 01       	movw	r20, r30
     cba:	46 1b       	sub	r20, r22
     cbc:	57 0b       	sbc	r21, r23
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <String::copy(char const*, unsigned int)>
substring():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
     cc4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
     cc8:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
     ccc:	08 0f       	add	r16, r24
     cce:	19 1f       	adc	r17, r25
     cd0:	f8 01       	movw	r30, r16
     cd2:	f0 82       	st	Z, r15
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:630
  return out;
}
     cd4:	ce 01       	movw	r24, r28
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	08 95       	ret
invalidate():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     ce8:	88 81       	ld	r24, Y
     cea:	99 81       	ldd	r25, Y+1	; 0x01
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	11 f0       	breq	.+4      	; 0xcf4 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0xb0>
     cf0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     cf4:	19 82       	std	Y+1, r1	; 0x01
     cf6:	18 82       	st	Y, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     cf8:	1d 82       	std	Y+5, r1	; 0x05
     cfa:	1c 82       	std	Y+4, r1	; 0x04
     cfc:	1b 82       	std	Y+3, r1	; 0x03
     cfe:	1a 82       	std	Y+2, r1	; 0x02
     d00:	e1 cf       	rjmp	.-62     	; 0xcc4 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]+0x80>

00000d02 <__vector_16>:
__vector_16():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
     d14:	af 93       	push	r26
     d16:	bf 93       	push	r27
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     d18:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer0_millis>
     d1c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer0_millis+0x1>
     d20:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer0_millis+0x2>
     d24:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer0_millis+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     d28:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <timer0_fract>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     d2c:	23 e0       	ldi	r18, 0x03	; 3
     d2e:	23 0f       	add	r18, r19
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     d30:	2d 37       	cpi	r18, 0x7D	; 125
     d32:	68 f1       	brcs	.+90     	; 0xd8e <__vector_16+0x8c>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     d34:	26 e8       	ldi	r18, 0x86	; 134
     d36:	23 0f       	add	r18, r19
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     d38:	02 96       	adiw	r24, 0x02	; 2
     d3a:	a1 1d       	adc	r26, r1
     d3c:	b1 1d       	adc	r27, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     d3e:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <timer0_fract>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     d42:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <timer0_millis>
     d46:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <timer0_millis+0x1>
     d4a:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <timer0_millis+0x2>
     d4e:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <timer0_millis+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     d52:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timer0_overflow_count>
     d56:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timer0_overflow_count+0x1>
     d5a:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timer0_overflow_count+0x2>
     d5e:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timer0_overflow_count+0x3>
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	a1 1d       	adc	r26, r1
     d66:	b1 1d       	adc	r27, r1
     d68:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <timer0_overflow_count>
     d6c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <timer0_overflow_count+0x1>
     d70:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <timer0_overflow_count+0x2>
     d74:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <timer0_overflow_count+0x3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	a1 1d       	adc	r26, r1
     d92:	b1 1d       	adc	r27, r1
     d94:	d4 cf       	rjmp	.-88     	; 0xd3e <__vector_16+0x3c>

00000d96 <__vector_19>:
__vector_19():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	0b b6       	in	r0, 0x3b	; 59
     da2:	0f 92       	push	r0
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     dbc:	86 e2       	ldi	r24, 0x26	; 38
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 75 03 	call	0x6ea	; 0x6ea <HardwareSerial::_tx_udr_empty_irq()>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_18>:
__vector_18():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	0b b6       	in	r0, 0x3b	; 59
     df6:	0f 92       	push	r0
     df8:	2f 93       	push	r18
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
_rx_complete_irq():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     e02:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <Serial+0x10>
     e06:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <Serial+0x11>
     e0a:	80 81       	ld	r24, Z
     e0c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <Serial+0x16>
     e10:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <Serial+0x17>
     e14:	82 fd       	sbrc	r24, 2
     e16:	1d c0       	rjmp	.+58     	; 0xe52 <__vector_18+0x68>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e18:	90 81       	ld	r25, Z
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e1a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <Serial+0x19>
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	8f 73       	andi	r24, 0x3F	; 63
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e22:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <Serial+0x1a>
     e26:	82 17       	cp	r24, r18
     e28:	41 f0       	breq	.+16     	; 0xe3a <__vector_18+0x50>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     e2a:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <Serial+0x19>
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ea 5d       	subi	r30, 0xDA	; 218
     e32:	fd 4f       	sbci	r31, 0xFD	; 253
     e34:	95 8f       	std	Z+29, r25	; 0x1d
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     e36:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <Serial+0x19>
__vector_18():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0b be       	out	0x3b, r0	; 59
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti
_rx_complete_irq():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e52:	80 81       	ld	r24, Z
     e54:	f2 cf       	rjmp	.-28     	; 0xe3a <__vector_18+0x50>

00000e56 <global constructors keyed to 65535_0_MCP_DAC.cpp.o.2610>:
_GLOBAL__I_65535_0_MCP_DAC.cpp.o.2610():
     e56:	e6 e2       	ldi	r30, 0x26	; 38
     e58:	f2 e0       	ldi	r31, 0x02	; 2
     e5a:	13 82       	std	Z+3, r1	; 0x03
     e5c:	12 82       	std	Z+2, r1	; 0x02
     e5e:	88 ee       	ldi	r24, 0xE8	; 232
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	a0 e0       	ldi	r26, 0x00	; 0
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	84 83       	std	Z+4, r24	; 0x04
     e68:	95 83       	std	Z+5, r25	; 0x05
     e6a:	a6 83       	std	Z+6, r26	; 0x06
     e6c:	b7 83       	std	Z+7, r27	; 0x07
     e6e:	8f e1       	ldi	r24, 0x1F	; 31
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
     e76:	80 e9       	ldi	r24, 0x90	; 144
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	95 87       	std	Z+13, r25	; 0x0d
     e7c:	84 87       	std	Z+12, r24	; 0x0c
     e7e:	89 e2       	ldi	r24, 0x29	; 41
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	97 87       	std	Z+15, r25	; 0x0f
     e84:	86 87       	std	Z+14, r24	; 0x0e
     e86:	8b e2       	ldi	r24, 0x2B	; 43
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	91 8b       	std	Z+17, r25	; 0x11
     e8c:	80 8b       	std	Z+16, r24	; 0x10
     e8e:	8a e2       	ldi	r24, 0x2A	; 42
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	93 8b       	std	Z+19, r25	; 0x13
     e94:	82 8b       	std	Z+18, r24	; 0x12
     e96:	85 e9       	ldi	r24, 0x95	; 149
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	95 8b       	std	Z+21, r25	; 0x15
     e9c:	84 8b       	std	Z+20, r24	; 0x14
     e9e:	8c e2       	ldi	r24, 0x2C	; 44
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	97 8b       	std	Z+23, r25	; 0x17
     ea4:	86 8b       	std	Z+22, r24	; 0x16
     ea6:	11 8e       	std	Z+25, r1	; 0x19
     ea8:	12 8e       	std	Z+26, r1	; 0x1a
     eaa:	13 8e       	std	Z+27, r1	; 0x1b
     eac:	14 8e       	std	Z+28, r1	; 0x1c
     eae:	6f e2       	ldi	r22, 0x2F	; 47
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	85 e4       	ldi	r24, 0x45	; 69
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 11 06 	call	0xc22	; 0xc22 <String::String(char const*)>
     eba:	e6 e0       	ldi	r30, 0x06	; 6
     ebc:	f3 e0       	ldi	r31, 0x03	; 3
     ebe:	11 82       	std	Z+1, r1	; 0x01
     ec0:	10 82       	st	Z, r1
     ec2:	13 82       	std	Z+3, r1	; 0x03
     ec4:	12 82       	std	Z+2, r1	; 0x02
     ec6:	14 82       	std	Z+4, r1	; 0x04
     ec8:	15 82       	std	Z+5, r1	; 0x05
     eca:	16 82       	std	Z+6, r1	; 0x06
     ecc:	17 82       	std	Z+7, r1	; 0x07
     ece:	10 86       	std	Z+8, r1	; 0x08
     ed0:	11 86       	std	Z+9, r1	; 0x09
     ed2:	12 86       	std	Z+10, r1	; 0x0a
     ed4:	13 86       	std	Z+11, r1	; 0x0b
     ed6:	14 86       	std	Z+12, r1	; 0x0c
     ed8:	15 86       	std	Z+13, r1	; 0x0d
     eda:	16 86       	std	Z+14, r1	; 0x0e
     edc:	17 86       	std	Z+15, r1	; 0x0f
     ede:	10 8a       	std	Z+16, r1	; 0x10
     ee0:	11 8a       	std	Z+17, r1	; 0x11
     ee2:	12 8a       	std	Z+18, r1	; 0x12
     ee4:	13 8a       	std	Z+19, r1	; 0x13
     ee6:	14 8a       	std	Z+20, r1	; 0x14
     ee8:	15 8a       	std	Z+21, r1	; 0x15
     eea:	16 8a       	std	Z+22, r1	; 0x16
     eec:	10 8e       	std	Z+24, r1	; 0x18
     eee:	17 8a       	std	Z+23, r1	; 0x17
     ef0:	12 8e       	std	Z+26, r1	; 0x1a
     ef2:	11 8e       	std	Z+25, r1	; 0x19
     ef4:	11 ae       	std	Z+57, r1	; 0x39
     ef6:	10 ae       	std	Z+56, r1	; 0x38
     ef8:	13 ae       	std	Z+59, r1	; 0x3b
     efa:	12 ae       	std	Z+58, r1	; 0x3a
     efc:	14 ae       	std	Z+60, r1	; 0x3c
     efe:	15 ae       	std	Z+61, r1	; 0x3d
     f00:	16 ae       	std	Z+62, r1	; 0x3e
     f02:	e3 ed       	ldi	r30, 0xD3	; 211
     f04:	f2 e0       	ldi	r31, 0x02	; 2
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	93 83       	std	Z+3, r25	; 0x03
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	54 e2       	ldi	r21, 0x24	; 36
     f0e:	64 ef       	ldi	r22, 0xF4	; 244
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	45 83       	std	Z+5, r20	; 0x05
     f14:	56 83       	std	Z+6, r21	; 0x06
     f16:	67 83       	std	Z+7, r22	; 0x07
     f18:	70 87       	std	Z+8, r23	; 0x08
     f1a:	11 8a       	std	Z+17, r1	; 0x11
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	82 8b       	std	Z+18, r24	; 0x12
     f20:	20 e5       	ldi	r18, 0x50	; 80
     f22:	25 8b       	std	Z+21, r18	; 0x15
     f24:	16 8a       	std	Z+22, r1	; 0x16
     f26:	23 ec       	ldi	r18, 0xC3	; 195
     f28:	32 e0       	ldi	r19, 0x02	; 2
     f2a:	34 8b       	std	Z+20, r19	; 0x14
     f2c:	23 8b       	std	Z+19, r18	; 0x13
     f2e:	90 83       	st	Z, r25
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	12 82       	std	Z+2, r1	; 0x02
     f34:	84 83       	std	Z+4, r24	; 0x04
     f36:	81 87       	std	Z+9, r24	; 0x09
     f38:	80 8b       	std	Z+16, r24	; 0x10
     f3a:	15 86       	std	Z+13, r1	; 0x0d
     f3c:	14 86       	std	Z+12, r1	; 0x0c
     f3e:	17 86       	std	Z+15, r1	; 0x0f
     f40:	16 86       	std	Z+14, r1	; 0x0e
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f e0       	ldi	r25, 0x0F	; 15
     f46:	93 87       	std	Z+11, r25	; 0x0b
     f48:	82 87       	std	Z+10, r24	; 0x0a
     f4a:	17 8a       	std	Z+23, r1	; 0x17
     f4c:	10 8e       	std	Z+24, r1	; 0x18
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	e6 e0       	ldi	r30, 0x06	; 6
     f52:	f1 e0       	ldi	r31, 0x01	; 1
     f54:	ac ee       	ldi	r26, 0xEC	; 236
     f56:	b2 e0       	ldi	r27, 0x02	; 2
     f58:	01 90       	ld	r0, Z+
     f5a:	0d 92       	st	X+, r0
     f5c:	8a 95       	dec	r24
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <global constructors keyed to 65535_0_MCP_DAC.cpp.o.2610+0x102>
     f60:	8d e0       	ldi	r24, 0x0D	; 13
     f62:	e6 e0       	ldi	r30, 0x06	; 6
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	a9 ef       	ldi	r26, 0xF9	; 249
     f68:	b2 e0       	ldi	r27, 0x02	; 2
     f6a:	01 90       	ld	r0, Z+
     f6c:	0d 92       	st	X+, r0
     f6e:	8a 95       	dec	r24
     f70:	e1 f7       	brne	.-8      	; 0xf6a <global constructors keyed to 65535_0_MCP_DAC.cpp.o.2610+0x114>
     f72:	e4 ec       	ldi	r30, 0xC4	; 196
     f74:	f2 e0       	ldi	r31, 0x02	; 2
     f76:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__malloc_margin+0xf>
     f7a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__malloc_margin+0x10>
     f7e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <__malloc_margin+0x11>
     f82:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <__malloc_margin+0x12>
     f86:	80 83       	st	Z, r24
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	a2 83       	std	Z+2, r26	; 0x02
     f8c:	b3 83       	std	Z+3, r27	; 0x03
     f8e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__malloc_margin+0x13>
     f92:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__malloc_margin+0x14>
     f96:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <__malloc_margin+0x15>
     f9a:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <__malloc_margin+0x16>
     f9e:	84 83       	std	Z+4, r24	; 0x04
     fa0:	95 83       	std	Z+5, r25	; 0x05
     fa2:	a6 83       	std	Z+6, r26	; 0x06
     fa4:	b7 83       	std	Z+7, r27	; 0x07
     fa6:	11 86       	std	Z+9, r1	; 0x09
     fa8:	10 86       	std	Z+8, r1	; 0x08
     faa:	13 86       	std	Z+11, r1	; 0x0b
     fac:	12 86       	std	Z+10, r1	; 0x0a
     fae:	15 86       	std	Z+13, r1	; 0x0d
     fb0:	14 86       	std	Z+12, r1	; 0x0c
     fb2:	16 86       	std	Z+14, r1	; 0x0e
     fb4:	08 95       	ret

00000fb6 <main>:
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	2a 97       	sbiw	r28, 0x0a	; 10
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
init():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     fca:	78 94       	sei
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
     fcc:	83 b7       	in	r24, 0x33	; 51
     fce:	8c 64       	ori	r24, 0x4C	; 76
     fd0:	83 bf       	out	0x33, r24	; 51
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     fd2:	87 b7       	in	r24, 0x37	; 55
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	87 bf       	out	0x37, r24	; 55
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	9e bd       	out	0x2e, r25	; 46
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     fdc:	8e b5       	in	r24, 0x2e	; 46
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	8e bd       	out	0x2e, r24	; 46
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     fe2:	8f b5       	in	r24, 0x2f	; 47
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	8f bd       	out	0x2f, r24	; 47
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     fe8:	85 b5       	in	r24, 0x25	; 37
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	85 bd       	out	0x25, r24	; 37
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     fee:	85 b5       	in	r24, 0x25	; 37
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	85 bd       	out	0x25, r24	; 37
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
     ff4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     ff8:	83 60       	ori	r24, 0x03	; 3
     ffa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
     ffe:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1008:	87 e8       	ldi	r24, 0x87	; 135
    100a:	86 b9       	out	0x06, r24	; 6
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    100c:	1a b8       	out	0x0a, r1	; 10
begin():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    100e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <Serial+0x10>
    1012:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <Serial+0x11>
    1016:	90 83       	st	Z, r25
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1018:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Serial+0xc>
    101c:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Serial+0xd>
    1020:	10 82       	st	Z, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1022:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <Serial+0xe>
    1026:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <Serial+0xf>
    102a:	8f ec       	ldi	r24, 0xCF	; 207
    102c:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    102e:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <Serial+0x18>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1032:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <Serial+0x14>
    1036:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <Serial+0x15>
    103a:	86 e0       	ldi	r24, 0x06	; 6
    103c:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    103e:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <Serial+0x12>
    1042:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <Serial+0x13>
    1046:	80 81       	ld	r24, Z
    1048:	88 69       	ori	r24, 0x98	; 152
    104a:	80 83       	st	Z, r24
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    104c:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <Serial+0x12>
    1050:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <Serial+0x13>
    1054:	80 81       	ld	r24, Z
    1056:	8f 7d       	andi	r24, 0xDF	; 223
    1058:	80 83       	st	Z, r24
init():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:200

pwmWorker::pwmWorker() {};

void pwmWorker::init() const {

    DDRB |= (1 << PB5);
    105a:	bd 9a       	sbi	0x17, 5	; 23
/home/stend/Документы/stend/hardware/pid_regulator.cpp:201
    PORTB &= ~(1 << PB5);
    105c:	c5 98       	cbi	0x18, 5	; 24
/home/stend/Документы/stend/hardware/pid_regulator.cpp:202
    OCR1A = 0;
    105e:	1b bc       	out	0x2b, r1	; 43
    1060:	1a bc       	out	0x2a, r1	; 42
/home/stend/Документы/stend/hardware/pid_regulator.cpp:205

    //Fast PWM with downcounting
    TCCR1A |= (1 << WGM11) | (1 << WGM10);
    1062:	8f b5       	in	r24, 0x2f	; 47
    1064:	83 60       	ori	r24, 0x03	; 3
    1066:	8f bd       	out	0x2f, r24	; 47
/home/stend/Документы/stend/hardware/pid_regulator.cpp:206
    TCCR1B |= (1 << WGM12);
    1068:	8e b5       	in	r24, 0x2e	; 46
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	8e bd       	out	0x2e, r24	; 46
/home/stend/Документы/stend/hardware/pid_regulator.cpp:208

    TCCR1A |= (1 << COM1A1);
    106e:	8f b5       	in	r24, 0x2f	; 47
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	8f bd       	out	0x2f, r24	; 47
/home/stend/Документы/stend/hardware/pid_regulator.cpp:211

    //Pre-scailer 256
    TCCR1B |= (1 << CS12);
    1074:	8e b5       	in	r24, 0x2e	; 46
    1076:	84 60       	ori	r24, 0x04	; 4
    1078:	8e bd       	out	0x2e, r24	; 46
/home/stend/Документы/stend/hardware/pid_regulator.cpp:212
    TCCR1B &= ~(1 << CS11) & ~(1 << CS10);
    107a:	8e b5       	in	r24, 0x2e	; 46
    107c:	8c 7f       	andi	r24, 0xFC	; 252
    107e:	8e bd       	out	0x2e, r24	; 46
/home/stend/Документы/stend/hardware/pid_regulator.cpp:145
  }
}

void adcPIDWorker::init() const {
  
  ADCSRA |= (1 << ADEN);
    1080:	37 9a       	sbi	0x06, 7	; 6
/home/stend/Документы/stend/hardware/pid_regulator.cpp:146
  ADCSRA &= ~(1 << ADPS2) & ~ (1 << ADPS1) & ~(1 << ADPS0);
    1082:	86 b1       	in	r24, 0x06	; 6
    1084:	88 7f       	andi	r24, 0xF8	; 248
    1086:	86 b9       	out	0x06, r24	; 6
/home/stend/Документы/stend/hardware/pid_regulator.cpp:147
  ADMUX |= (1 << REFS0);
    1088:	3e 9a       	sbi	0x07, 6	; 7
setup():
/home/stend/Документы/stend/hardware/hardware.ino:29
void setup() {
  
  Serial.begin(9600);

  pid.init();
  pid.keepThermalDelta(START_THERMAL_DELTA);
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]>
begin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:53
}


void MCP_DAC::begin(uint8_t select)
{
  _select = select;
    1090:	8b e2       	ldi	r24, 0x2B	; 43
    1092:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <light+0x2>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:54
  pinMode(_select, OUTPUT);
    1096:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pinMode.constprop.87>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:55
  digitalWrite(_select, HIGH);
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <light+0x2>
    10a0:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:57

  _spi_settings = SPISettings(_SPIspeed, MSBFIRST, SPI_MODE0);
    10a4:	00 91 d8 02 	lds	r16, 0x02D8	; 0x8002d8 <light+0x5>
    10a8:	10 91 d9 02 	lds	r17, 0x02D9	; 0x8002d9 <light+0x6>
    10ac:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <light+0x7>
    10b0:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <light+0x8>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:133
        clockDiv = 5;
      } else {
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	52 e1       	ldi	r21, 0x12	; 18
    10b8:	6a e7       	ldi	r22, 0x7A	; 122
    10ba:	70 e0       	ldi	r23, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:134
      clockDiv = 0;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:135
      while (clockDiv < 6 && clock < clockSetting) {
    10be:	04 17       	cp	r16, r20
    10c0:	15 07       	cpc	r17, r21
    10c2:	26 07       	cpc	r18, r22
    10c4:	37 07       	cpc	r19, r23
    10c6:	40 f4       	brcc	.+16     	; 0x10d8 <main+0x122>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:136
        clockSetting /= 2;
    10c8:	76 95       	lsr	r23
    10ca:	67 95       	ror	r22
    10cc:	57 95       	ror	r21
    10ce:	47 95       	ror	r20
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:137
        clockDiv++;
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:135
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    10d2:	86 30       	cpi	r24, 0x06	; 6
    10d4:	a1 f7       	brne	.-24     	; 0x10be <main+0x108>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:143
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    10d6:	87 e0       	ldi	r24, 0x07	; 7
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:150
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    10d8:	98 2f       	mov	r25, r24
    10da:	90 6a       	ori	r25, 0xA0	; 160
    10dc:	96 95       	lsr	r25
begin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:57
    10de:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <light+0x15>
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/SPI/src/SPI.h:151
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    10e2:	80 95       	com	r24
    10e4:	81 70       	andi	r24, 0x01	; 1
begin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:57
    10e6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <light+0x16>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:59

  if (_hwSPI)
    10ea:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <light+0x4>
    10ee:	81 11       	cpse	r24, r1
    10f0:	12 c0       	rjmp	.+36     	; 0x1116 <__stack+0x17>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:66
    //  mySPI->end();
    //  mySPI->begin();
  }
  else  //  software SPI
  {
    pinMode(_dataOut, OUTPUT);
    10f2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <light>
    10f6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pinMode.constprop.87>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:67
    pinMode(_clock,   OUTPUT);
    10fa:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <light+0x1>
    10fe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pinMode.constprop.87>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:68
    digitalWrite(_dataOut, LOW);
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <light>
    1108:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:69
    digitalWrite(_clock,   LOW);
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <light+0x1>
    1112:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
setLatchPin():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:173
}


void MCP_DAC::setLatchPin(uint8_t latchPin)
{
  _latchPin = latchPin;
    1116:	89 e2       	ldi	r24, 0x29	; 41
    1118:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <light+0x3>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:174
  pinMode(_latchPin, OUTPUT);
    111c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pinMode.constprop.87>
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:175
  digitalWrite(_latchPin, HIGH);
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <light+0x3>
    1126:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:75

void lightregulator::off(uint8_t emmiterNum) {
  
  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index = 0;
    112a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <light+0x17>
setintencity():
    112e:	0e 94 90 02 	call	0x520	; 0x520 <lightregulator::setintencity(unsigned char) [clone .part.1] [clone .constprop.74]>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:79
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 0;
    1132:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    1136:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <light+0x26>
    113a:	90 e0       	ldi	r25, 0x00	; 0
fastWriteB():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:137
}


void MCP_DAC::fastWriteB(uint16_t value)
{
  transfer(0xB000 | value);
    113c:	90 6b       	ori	r25, 0xB0	; 176
    113e:	0e 94 66 02 	call	0x4cc	; 0x4cc <MCP_DAC::transfer(unsigned int) [clone .constprop.78]>
init():
/home/stend/Документы/stend/hardware/motor_regulator.h:143
    nextBackwardStrobe();
    m_stepsCounter--;
  }

  void init() {
    DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3);
    1142:	84 b3       	in	r24, 0x14	; 20
    1144:	8f 60       	ori	r24, 0x0F	; 15
    1146:	84 bb       	out	0x14, r24	; 20
findZero():
/home/stend/Документы/stend/hardware/motor_regulator.h:77
    stop();
  }
  
  void findZero() {

    if(digitalRead(ZERO_SENSOR_PIN) == 1) { //Каретка не в нуле, сдаем назад
    1148:	0e 94 ee 01 	call	0x3dc	; 0x3dc <digitalRead.constprop.53>
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	09 f0       	breq	.+2      	; 0x1152 <__stack+0x53>
    1150:	b3 c0       	rjmp	.+358    	; 0x12b8 <__stack+0x1b9>
/home/stend/Документы/stend/hardware/motor_regulator.h:81

      while(true) {

        if(digitalRead(ZERO_SENSOR_PIN) == 0) {
    1152:	0e 94 ee 01 	call	0x3dc	; 0x3dc <digitalRead.constprop.53>
    1156:	89 2b       	or	r24, r25
    1158:	09 f0       	breq	.+2      	; 0x115c <__stack+0x5d>
    115a:	a9 c0       	rjmp	.+338    	; 0x12ae <__stack+0x1af>
/home/stend/Документы/stend/hardware/motor_regulator.h:82
          stop();
    115c:	0e 94 a0 04 	call	0x940	; 0x940 <motorRouter::stop() [clone .isra.12]>
_ZN11motorRouter12resetCounterEv():
/home/stend/Документы/stend/hardware/motor_regulator.h:114
public:
  
  motorRouter() {};

  void resetCounter() {
    m_stepsCounter = 0;
    1160:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <motor+0xd>
    1164:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <motor+0xc>
operator*():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <eeprom_read_byte>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.14():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:133

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1170:	89 83       	std	Y+1, r24	; 0x01
operator*():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <eeprom_read_byte>
_ZN11EEPROMClass3getIiEERT_iS2_.isra.14():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/libraries/EEPROM/src/EEPROM.h:133

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    117a:	8a 83       	std	Y+2, r24	; 0x02
gotoStartPosition():
/home/stend/Документы/stend/hardware/motor_regulator.h:62
  void gotoStartPosition() {

    resetCounter();

    int16_t steps;
    steps = EEPROM.get(0, steps);
    117c:	e9 80       	ldd	r14, Y+1	; 0x01
    117e:	fa 80       	ldd	r15, Y+2	; 0x02
main():
/home/stend/Документы/stend/hardware/motor_regulator.h:68

    if(steps == -1) {
      return;
    }

    for(int i = 0; i < steps; i++) {
    1180:	10 e0       	ldi	r17, 0x00	; 0
    1182:	00 e0       	ldi	r16, 0x00	; 0
gotoStartPosition():
/home/stend/Документы/stend/hardware/motor_regulator.h:64
    resetCounter();

    int16_t steps;
    steps = EEPROM.get(0, steps);

    if(steps == -1) {
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	e2 16       	cp	r14, r18
    1188:	f2 06       	cpc	r15, r18
    118a:	09 f0       	breq	.+2      	; 0x118e <__stack+0x8f>
    118c:	a3 c0       	rjmp	.+326    	; 0x12d4 <__stack+0x1d5>
setup():
/home/stend/Документы/stend/hardware/hardware.ino:34

  light.init();
  motor.init();

  Serial.println("STROK");
    118e:	80 e3       	ldi	r24, 0x30	; 48
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:25
  digitalWrite(A4T_VENT_PIN, LOW);
}

void pidRegulator::tickTackToe() {

  m_currentTime = millis();
    1196:	0e 94 c2 02 	call	0x584	; 0x584 <millis>
    119a:	5b 01       	movw	r10, r22
    119c:	6c 01       	movw	r12, r24
    119e:	60 93 15 03 	sts	0x0315, r22	; 0x800315 <pid+0xf>
    11a2:	b0 92 16 03 	sts	0x0316, r11	; 0x800316 <pid+0x10>
    11a6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pid+0x11>
    11aa:	d0 92 18 03 	sts	0x0318, r13	; 0x800318 <pid+0x12>
    11ae:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <pid+0x13>
    11b2:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <pid+0x14>
    11b6:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <pid+0x15>
    11ba:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <pid+0x16>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:27

  if(m_currentTime - m_previousTime >= PID_MEASURE_INTERVAL_MSEC) {
    11be:	9b 01       	movw	r18, r22
    11c0:	ac 01       	movw	r20, r24
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 90 0d 03 	lds	r10, 0x030D	; 0x80030d <pid+0x7>
    11ce:	b0 90 0e 03 	lds	r11, 0x030E	; 0x80030e <pid+0x8>
    11d2:	c0 90 0f 03 	lds	r12, 0x030F	; 0x80030f <pid+0x9>
    11d6:	d0 90 10 03 	lds	r13, 0x0310	; 0x800310 <pid+0xa>
    11da:	e0 90 11 03 	lds	r14, 0x0311	; 0x800311 <pid+0xb>
    11de:	f0 90 12 03 	lds	r15, 0x0312	; 0x800312 <pid+0xc>
    11e2:	00 91 13 03 	lds	r16, 0x0313	; 0x800313 <pid+0xd>
    11e6:	10 91 14 03 	lds	r17, 0x0314	; 0x800314 <pid+0xe>
    11ea:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__subdi3>
    11ee:	2f 32       	cpi	r18, 0x2F	; 47
    11f0:	35 47       	sbci	r19, 0x75	; 117
    11f2:	41 05       	cpc	r20, r1
    11f4:	51 05       	cpc	r21, r1
    11f6:	61 05       	cpc	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	81 05       	cpc	r24, r1
    11fc:	91 05       	cpc	r25, r1
    11fe:	11 f1       	breq	.+68     	; 0x1244 <__stack+0x145>
    1200:	08 f1       	brcs	.+66     	; 0x1244 <__stack+0x145>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:29

    if(m_warmerData.pwm == 0) {
    1202:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pid>
    1206:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pid+0x1>
    120a:	89 2b       	or	r24, r25
    120c:	09 f0       	breq	.+2      	; 0x1210 <__stack+0x111>
    120e:	6d c0       	rjmp	.+218    	; 0x12ea <__stack+0x1eb>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:30
      Serial.println("CTD0");
    1210:	86 e3       	ldi	r24, 0x36	; 54
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    1218:	1b bc       	out	0x2b, r1	; 43
    121a:	1a bc       	out	0x2a, r1	; 42
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:69
      else {    
        m_pwm.setIntencity(m_warmerData.pwm);
      }
    }

    m_previousTime = millis();
    121c:	0e 94 c2 02 	call	0x584	; 0x584 <millis>
    1220:	8b 01       	movw	r16, r22
    1222:	9c 01       	movw	r18, r24
    1224:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <pid+0x7>
    1228:	10 93 0e 03 	sts	0x030E, r17	; 0x80030e <pid+0x8>
    122c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <pid+0x9>
    1230:	30 93 10 03 	sts	0x0310, r19	; 0x800310 <pid+0xa>
    1234:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <pid+0xb>
    1238:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <pid+0xc>
    123c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pid+0xd>
    1240:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pid+0xe>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:98
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index++;
    if(m_inten2Index > LIGHT_INTENS_SIZE - 1) {
      m_inten2Index = LIGHT_INTENS_SIZE - 1;
    1244:	9c e0       	ldi	r25, 0x0C	; 12
    1246:	b9 2e       	mov	r11, r25
on():
/home/stend/Документы/stend/hardware/light_regulator.h:66

    m_inten1Index = 6;
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 6;
    1248:	26 e0       	ldi	r18, 0x06	; 6
    124a:	a2 2e       	mov	r10, r18
loop():
/home/stend/Документы/stend/hardware/hardware.ino:41

void loop() {

  pid.tickTackToe();

  while (Serial.available() > 0) {
    124c:	86 e2       	ldi	r24, 0x26	; 38
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	0e 94 5f 03 	call	0x6be	; 0x6be <HardwareSerial::available()>
    1254:	18 16       	cp	r1, r24
    1256:	19 06       	cpc	r1, r25
    1258:	0c f0       	brlt	.+2      	; 0x125c <__stack+0x15d>
    125a:	1c c4       	rjmp	.+2104   	; 0x1a94 <__stack+0x995>
readStringUntil():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:245
  return ret;
}

String Stream::readStringUntil(char terminator)
{
  String ret;
    125c:	6f e2       	ldi	r22, 0x2F	; 47
    125e:	71 e0       	ldi	r23, 0x01	; 1
    1260:	ce 01       	movw	r24, r28
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	0e 94 11 06 	call	0xc22	; 0xc22 <String::String(char const*)>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:246
  int c = timedRead();
    1268:	0e 94 1f 03 	call	0x63e	; 0x63e <Stream::timedRead() [clone .constprop.16]>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:247
  while (c >= 0 && c != terminator)
    126c:	97 fd       	sbrc	r25, 7
    126e:	d0 c1       	rjmp	.+928    	; 0x1610 <__stack+0x511>
    1270:	8a 30       	cpi	r24, 0x0A	; 10
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <__stack+0x179>
    1276:	cc c1       	rjmp	.+920    	; 0x1610 <__stack+0x511>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.cpp:249
  {
    ret += (char)c;
    1278:	8f 83       	std	Y+7, r24	; 0x07
concat():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:285

unsigned char String::concat(char c)
{
  char buf[2];
  buf[0] = c;
  buf[1] = 0;
    127a:	18 86       	std	Y+8, r1	; 0x08
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    127c:	0d 81       	ldd	r16, Y+5	; 0x05
    127e:	1e 81       	ldd	r17, Y+6	; 0x06
    1280:	0f 5f       	subi	r16, 0xFF	; 255
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    1284:	b8 01       	movw	r22, r16
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0e 94 be 05 	call	0xb7c	; 0xb7c <String::reserve(unsigned int)>
    128e:	88 23       	and	r24, r24
    1290:	59 f3       	breq	.-42     	; 0x1268 <__stack+0x169>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
    1292:	29 81       	ldd	r18, Y+1	; 0x01
    1294:	3a 81       	ldd	r19, Y+2	; 0x02
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	be 01       	movw	r22, r28
    129c:	69 5f       	subi	r22, 0xF9	; 249
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <strcpy>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:271
  len = newlen;
    12a8:	1e 83       	std	Y+6, r17	; 0x06
    12aa:	0d 83       	std	Y+5, r16	; 0x05
    12ac:	dd cf       	rjmp	.-70     	; 0x1268 <__stack+0x169>
findZero():
/home/stend/Документы/stend/hardware/motor_regulator.h:85

        if(digitalRead(ZERO_SENSOR_PIN) == 0) {
          stop();
          break;
        }
        makeStepBackward();
    12ae:	0e 94 72 04 	call	0x8e4	; 0x8e4 <motorRouter::makeStepBackward() [clone .constprop.54]>
    12b2:	4f cf       	rjmp	.-354    	; 0x1152 <__stack+0x53>
/home/stend/Документы/stend/hardware/motor_regulator.h:95

        if(digitalRead(ZERO_SENSOR_PIN) == 1) {
          stop();
          break;
        }
        makeStepForward();
    12b4:	0e 94 44 04 	call	0x888	; 0x888 <motorRouter::makeStepForward() [clone .constprop.56]>
/home/stend/Документы/stend/hardware/motor_regulator.h:91
      }
    }
    else { //Если в нуле, сдаем вперед
      while(true) {

        if(digitalRead(ZERO_SENSOR_PIN) == 1) {
    12b8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <digitalRead.constprop.53>
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	d1 f7       	brne	.-12     	; 0x12b4 <__stack+0x1b5>
/home/stend/Документы/stend/hardware/motor_regulator.h:92
          stop();
    12c0:	0e 94 a0 04 	call	0x940	; 0x940 <motorRouter::stop() [clone .isra.12]>
/home/stend/Документы/stend/hardware/motor_regulator.h:100
        makeStepForward();
      }

      while(true) {
        
        if(digitalRead(ZERO_SENSOR_PIN) == 0) {
    12c4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <digitalRead.constprop.53>
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f4       	brne	.+2      	; 0x12ce <__stack+0x1cf>
    12cc:	47 cf       	rjmp	.-370    	; 0x115c <__stack+0x5d>
/home/stend/Документы/stend/hardware/motor_regulator.h:104
          stop();
          break;
        }
        makeStepBackward();
    12ce:	0e 94 72 04 	call	0x8e4	; 0x8e4 <motorRouter::makeStepBackward() [clone .constprop.54]>
    12d2:	f8 cf       	rjmp	.-16     	; 0x12c4 <__stack+0x1c5>
gotoStartPosition():
/home/stend/Документы/stend/hardware/motor_regulator.h:68

    if(steps == -1) {
      return;
    }

    for(int i = 0; i < steps; i++) {
    12d4:	0e 15       	cp	r16, r14
    12d6:	1f 05       	cpc	r17, r15
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <__stack+0x1e5>
/home/stend/Документы/stend/hardware/motor_regulator.h:69
      makeStepForward();
    12da:	0e 94 44 04 	call	0x888	; 0x888 <motorRouter::makeStepForward() [clone .constprop.56]>
/home/stend/Документы/stend/hardware/motor_regulator.h:68

    if(steps == -1) {
      return;
    }

    for(int i = 0; i < steps; i++) {
    12de:	0f 5f       	subi	r16, 0xFF	; 255
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	f8 cf       	rjmp	.-16     	; 0x12d4 <__stack+0x1d5>
/home/stend/Документы/stend/hardware/motor_regulator.h:72
      makeStepForward();
    }

    stop();
    12e4:	0e 94 a0 04 	call	0x940	; 0x940 <motorRouter::stop() [clone .isra.12]>
    12e8:	52 cf       	rjmp	.-348    	; 0x118e <__stack+0x8f>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:37

      m_previousTime = millis();
      return;
    }

    m_ADCdiffRead = readCurrentADCDiff();
    12ea:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pidRegulator::readCurrentADCDiff() const [clone .constprop.7]>
    12ee:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <pid+0x18>
    12f2:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <pid+0x17>
write():
    12f6:	8b e3       	ldi	r24, 0x3B	; 59
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
readCurrentThermalDiff():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:111
   return m_pidADC.readBufferized(ADC_PID_REGULAR_READ);
}

uint8_t pidRegulator::readCurrentThermalDiff() {

  m_ADCdiffRead = readCurrentADCDiff();
    12fe:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pidRegulator::readCurrentADCDiff() const [clone .constprop.7]>
    1302:	8c 01       	movw	r16, r24
    1304:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <pid+0x18>
    1308:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <pid+0x17>
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:314
  return m_warmerData;
}

uint8_t warmerData::currentThermalDelta(stend::ADC_diff_t adcDiff, stend::ADC_resolution_t res) {

  if(res == ADC_RESOLUTION_x1) {
    130c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <pid+0x4>
    1310:	81 11       	cpse	r24, r1
    1312:	4d c1       	rjmp	.+666    	; 0x15ae <__stack+0x4af>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:317
    
    if(adcDiff < 63) {
      return MIN_POSSIBLE_VALUE;
    1314:	61 e0       	ldi	r22, 0x01	; 1
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:316

uint8_t warmerData::currentThermalDelta(stend::ADC_diff_t adcDiff, stend::ADC_resolution_t res) {

  if(res == ADC_RESOLUTION_x1) {
    
    if(adcDiff < 63) {
    1316:	0f 33       	cpi	r16, 0x3F	; 63
    1318:	11 05       	cpc	r17, r1
    131a:	0c f4       	brge	.+2      	; 0x131e <__stack+0x21f>
    131c:	99 c0       	rjmp	.+306    	; 0x1450 <__stack+0x351>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:320
      return MIN_POSSIBLE_VALUE;
    }

    if(adcDiff >= 185) {
    131e:	09 3b       	cpi	r16, 0xB9	; 185
    1320:	11 05       	cpc	r17, r1
    1322:	0c f0       	brlt	.+2      	; 0x1326 <__stack+0x227>
    1324:	44 c1       	rjmp	.+648    	; 0x15ae <__stack+0x4af>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:334
      case 112:
        return 30;
      case 121:
        return 40;
      case 124:
        return 50;
    1326:	62 e3       	ldi	r22, 0x32	; 50
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1328:	0c 37       	cpi	r16, 0x7C	; 124
    132a:	11 05       	cpc	r17, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <__stack+0x231>
    132e:	90 c0       	rjmp	.+288    	; 0x1450 <__stack+0x351>
    1330:	0c f0       	brlt	.+2      	; 0x1334 <__stack+0x235>
    1332:	ad c0       	rjmp	.+346    	; 0x148e <__stack+0x38f>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:328
      case 63:
        return 10;
      case 87:
        return 20;
    1334:	64 e1       	ldi	r22, 0x14	; 20
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1336:	07 35       	cpi	r16, 0x57	; 87
    1338:	11 05       	cpc	r17, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <__stack+0x23f>
    133c:	89 c0       	rjmp	.+274    	; 0x1450 <__stack+0x351>
    133e:	0c f0       	brlt	.+2      	; 0x1342 <__stack+0x243>
    1340:	7e c0       	rjmp	.+252    	; 0x143e <__stack+0x33f>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:326
      case 63:
        return 10;
    1342:	6a e0       	ldi	r22, 0x0A	; 10
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1344:	0f 33       	cpi	r16, 0x3F	; 63
    1346:	11 05       	cpc	r17, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <__stack+0x24d>
    134a:	82 c0       	rjmp	.+260    	; 0x1450 <__stack+0x351>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:350
    }

    stend::ADC_diff_t startADC, endADC;
    uint8_t startDelta, endDelta;

    if(adcDiff > 63 && adcDiff < 87) {
    134c:	c8 01       	movw	r24, r16
    134e:	80 54       	subi	r24, 0x40	; 64
    1350:	91 09       	sbc	r25, r1
    1352:	87 31       	cpi	r24, 0x17	; 23
    1354:	91 05       	cpc	r25, r1
    1356:	08 f4       	brcc	.+2      	; 0x135a <__stack+0x25b>
    1358:	b1 c0       	rjmp	.+354    	; 0x14bc <__stack+0x3bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:358
      endADC = 87;
      startDelta = 10;
      endDelta = 20;
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
    135a:	48 97       	sbiw	r24, 0x18	; 24
    135c:	88 31       	cpi	r24, 0x18	; 24
    135e:	91 05       	cpc	r25, r1
    1360:	08 f4       	brcc	.+2      	; 0x1364 <__stack+0x265>
    1362:	b7 c0       	rjmp	.+366    	; 0x14d2 <__stack+0x3d3>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:365
      endADC = 112;
      startDelta = 20;
      endDelta = 30;
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
    1364:	49 97       	sbiw	r24, 0x19	; 25
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	91 05       	cpc	r25, r1
    136a:	08 f4       	brcc	.+2      	; 0x136e <__stack+0x26f>
    136c:	bd c0       	rjmp	.+378    	; 0x14e8 <__stack+0x3e9>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:372
      endADC = 121;
      startDelta = 30;
      endDelta = 40;
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
    136e:	09 97       	sbiw	r24, 0x09	; 9
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	91 05       	cpc	r25, r1
    1374:	08 f4       	brcc	.+2      	; 0x1378 <__stack+0x279>
    1376:	c3 c0       	rjmp	.+390    	; 0x14fe <__stack+0x3ff>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:379
      endADC = 124;
      startDelta = 40;
      endDelta = 50;
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
    1378:	03 97       	sbiw	r24, 0x03	; 3
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	08 f4       	brcc	.+2      	; 0x1382 <__stack+0x283>
    1380:	c9 c0       	rjmp	.+402    	; 0x1514 <__stack+0x415>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:386
      endADC = 127;
      startDelta = 50;
      endDelta = 60;
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
    1382:	03 97       	sbiw	r24, 0x03	; 3
    1384:	85 30       	cpi	r24, 0x05	; 5
    1386:	91 05       	cpc	r25, r1
    1388:	08 f4       	brcc	.+2      	; 0x138c <__stack+0x28d>
    138a:	cf c0       	rjmp	.+414    	; 0x152a <__stack+0x42b>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:393
      endADC = 133;
      startDelta = 60;
      endDelta = 70;
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
    138c:	06 97       	sbiw	r24, 0x06	; 6
    138e:	87 30       	cpi	r24, 0x07	; 7
    1390:	91 05       	cpc	r25, r1
    1392:	08 f4       	brcc	.+2      	; 0x1396 <__stack+0x297>
    1394:	d5 c0       	rjmp	.+426    	; 0x1540 <__stack+0x441>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:400
      endADC = 141;
      startDelta = 70;
      endDelta = 80;
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
    1396:	08 97       	sbiw	r24, 0x08	; 8
    1398:	89 30       	cpi	r24, 0x09	; 9
    139a:	91 05       	cpc	r25, r1
    139c:	08 f4       	brcc	.+2      	; 0x13a0 <__stack+0x2a1>
    139e:	db c0       	rjmp	.+438    	; 0x1556 <__stack+0x457>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:407
      endADC = 151;
      startDelta = 80;
      endDelta = 90;
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
    13a0:	0a 97       	sbiw	r24, 0x0a	; 10
    13a2:	89 30       	cpi	r24, 0x09	; 9
    13a4:	91 05       	cpc	r25, r1
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <__stack+0x2ab>
    13a8:	e1 c0       	rjmp	.+450    	; 0x156c <__stack+0x46d>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:414
      endADC = 161;
      startDelta = 90;
      endDelta = 100;
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
    13aa:	0a 97       	sbiw	r24, 0x0a	; 10
    13ac:	8d 30       	cpi	r24, 0x0D	; 13
    13ae:	91 05       	cpc	r25, r1
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <__stack+0x2b5>
    13b2:	e7 c0       	rjmp	.+462    	; 0x1582 <__stack+0x483>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:421
      endADC = 175;
      startDelta = 100;
      endDelta = 110;
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
    13b4:	0e 97       	sbiw	r24, 0x0e	; 14
    13b6:	09 97       	sbiw	r24, 0x09	; 9
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <__stack+0x2bd>
    13ba:	ee c0       	rjmp	.+476    	; 0x1598 <__stack+0x499>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:430
      endDelta = 120;
      goto CALCULATE;      
    }

CALCULATE:
    float currentDelta = startDelta + (endDelta - startDelta) * 1.0 * (adcDiff - startADC)/(endADC - startADC); 
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	e8 2e       	mov	r14, r24
    13c0:	f1 2c       	mov	r15, r1
    13c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c4:	69 2f       	mov	r22, r25
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	6e 19       	sub	r22, r14
    13ca:	7f 09       	sbc	r23, r15
    13cc:	07 2e       	mov	r0, r23
    13ce:	00 0c       	add	r0, r0
    13d0:	88 0b       	sbc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
    13d8:	5b 01       	movw	r10, r22
    13da:	6c 01       	movw	r12, r24
    13dc:	b8 01       	movw	r22, r16
    13de:	68 19       	sub	r22, r8
    13e0:	79 09       	sbc	r23, r9
    13e2:	07 2e       	mov	r0, r23
    13e4:	00 0c       	add	r0, r0
    13e6:	88 0b       	sbc	r24, r24
    13e8:	99 0b       	sbc	r25, r25
    13ea:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	c6 01       	movw	r24, r12
    13f4:	b5 01       	movw	r22, r10
    13f6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__mulsf3>
    13fa:	5b 01       	movw	r10, r22
    13fc:	6c 01       	movw	r12, r24
    13fe:	b3 01       	movw	r22, r6
    1400:	68 19       	sub	r22, r8
    1402:	79 09       	sbc	r23, r9
    1404:	07 2e       	mov	r0, r23
    1406:	00 0c       	add	r0, r0
    1408:	88 0b       	sbc	r24, r24
    140a:	99 0b       	sbc	r25, r25
    140c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
    1410:	9b 01       	movw	r18, r22
    1412:	ac 01       	movw	r20, r24
    1414:	c6 01       	movw	r24, r12
    1416:	b5 01       	movw	r22, r10
    1418:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__divsf3>
    141c:	5b 01       	movw	r10, r22
    141e:	6c 01       	movw	r12, r24
    1420:	b7 01       	movw	r22, r14
    1422:	ff 0c       	add	r15, r15
    1424:	88 0b       	sbc	r24, r24
    1426:	99 0b       	sbc	r25, r25
    1428:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatsisf>
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	c6 01       	movw	r24, r12
    1432:	b5 01       	movw	r22, r10
    1434:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__addsf3>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:431
    return currentDelta;
    1438:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fixunssfsi>
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <__stack+0x351>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:330
      case 63:
        return 10;
      case 87:
        return 20;
      case 112:
        return 30;
    143e:	6e e1       	ldi	r22, 0x1E	; 30
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1440:	00 37       	cpi	r16, 0x70	; 112
    1442:	11 05       	cpc	r17, r1
    1444:	29 f0       	breq	.+10     	; 0x1450 <__stack+0x351>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:332
      case 87:
        return 20;
      case 112:
        return 30;
      case 121:
        return 40;
    1446:	68 e2       	ldi	r22, 0x28	; 40
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1448:	09 37       	cpi	r16, 0x79	; 121
    144a:	11 05       	cpc	r17, r1
    144c:	09 f0       	breq	.+2      	; 0x1450 <__stack+0x351>
    144e:	7e cf       	rjmp	.-260    	; 0x134c <__stack+0x24d>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:40
    }

    m_ADCdiffRead = readCurrentADCDiff();
    
    Serial.print("CTD");
    Serial.println((uint16_t)readCurrentThermalDiff());
    1450:	86 2f       	mov	r24, r22
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Print::println(unsigned int, int) [clone .constprop.33]>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:42

    if(m_warmerData.warmDirection == PID_COOL_DOWN) {
    1458:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <pid+0x6>
    145c:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <pid+0x2>
    1460:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <pid+0x3>
    1464:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <pid+0x17>
    1468:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <pid+0x18>
    146c:	81 11       	cpse	r24, r1
    146e:	c1 c0       	rjmp	.+386    	; 0x15f2 <__stack+0x4f3>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:44

      if(m_ADCdiffRead > m_warmerData.adc - PID_THRESHOLD) {
    1470:	25 50       	subi	r18, 0x05	; 5
    1472:	31 09       	sbc	r19, r1
    1474:	24 17       	cp	r18, r20
    1476:	35 07       	cpc	r19, r21
    1478:	08 f0       	brcs	.+2      	; 0x147c <__stack+0x37d>
    147a:	9b c0       	rjmp	.+310    	; 0x15b2 <__stack+0x4b3>
turnONVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:16
  m_pwm.init();
  m_pidADC.init();  
}

void pidRegulator::turnONVentilator() const {
  digitalWrite(A4T_VENT_PIN, HIGH);
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    1484:	e1 e0       	ldi	r30, 0x01	; 1
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	fb bd       	out	0x2b, r31	; 43
    148a:	ea bd       	out	0x2a, r30	; 42
    148c:	c7 ce       	rjmp	.-626    	; 0x121c <__stack+0x11d>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:340
      case 127:
        return 60;
      case 133:
        return 70;
      case 141:
        return 80;
    148e:	60 e5       	ldi	r22, 0x50	; 80
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    1490:	0d 38       	cpi	r16, 0x8D	; 141
    1492:	11 05       	cpc	r17, r1
    1494:	e9 f2       	breq	.-70     	; 0x1450 <__stack+0x351>
    1496:	4c f4       	brge	.+18     	; 0x14aa <__stack+0x3ab>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:336
      case 121:
        return 40;
      case 124:
        return 50;
      case 127:
        return 60;
    1498:	6c e3       	ldi	r22, 0x3C	; 60
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    149a:	0f 37       	cpi	r16, 0x7F	; 127
    149c:	11 05       	cpc	r17, r1
    149e:	c1 f2       	breq	.-80     	; 0x1450 <__stack+0x351>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:338
      case 124:
        return 50;
      case 127:
        return 60;
      case 133:
        return 70;
    14a0:	66 e4       	ldi	r22, 0x46	; 70
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    14a2:	05 38       	cpi	r16, 0x85	; 133
    14a4:	11 05       	cpc	r17, r1
    14a6:	a1 f2       	breq	.-88     	; 0x1450 <__stack+0x351>
    14a8:	51 cf       	rjmp	.-350    	; 0x134c <__stack+0x24d>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:342
      case 133:
        return 70;
      case 141:
        return 80;
      case 151:
        return 90;
    14aa:	6a e5       	ldi	r22, 0x5A	; 90
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    14ac:	07 39       	cpi	r16, 0x97	; 151
    14ae:	11 05       	cpc	r17, r1
    14b0:	79 f2       	breq	.-98     	; 0x1450 <__stack+0x351>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:344
      case 141:
        return 80;
      case 151:
        return 90;
      case 161:
        return 100;
    14b2:	64 e6       	ldi	r22, 0x64	; 100
currentThermalDelta():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:324

    if(adcDiff >= 185) {
      return MAX_POSSIBLE_VALUE;
    }

    switch(adcDiff) {
    14b4:	01 3a       	cpi	r16, 0xA1	; 161
    14b6:	11 05       	cpc	r17, r1
    14b8:	59 f2       	breq	.-106    	; 0x1450 <__stack+0x351>
    14ba:	48 cf       	rjmp	.-368    	; 0x134c <__stack+0x24d>
main():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:355
    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
      endADC = 87;
      startDelta = 10;
      endDelta = 20;
    14bc:	f4 e1       	ldi	r31, 0x14	; 20
    14be:	fa 87       	std	Y+10, r31	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:354

    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
      endADC = 87;
      startDelta = 10;
    14c0:	2a e0       	ldi	r18, 0x0A	; 10
    14c2:	29 87       	std	Y+9, r18	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:353
    uint8_t startDelta, endDelta;

    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
      endADC = 87;
    14c4:	b7 e5       	ldi	r27, 0x57	; 87
    14c6:	6b 2e       	mov	r6, r27
    14c8:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:352
    stend::ADC_diff_t startADC, endADC;
    uint8_t startDelta, endDelta;

    if(adcDiff > 63 && adcDiff < 87) {

      startADC = 63;
    14ca:	8f e3       	ldi	r24, 0x3F	; 63
    14cc:	88 2e       	mov	r8, r24
    14ce:	91 2c       	mov	r9, r1
    14d0:	75 cf       	rjmp	.-278    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:362
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
      endADC = 112;
      startDelta = 20;
      endDelta = 30;
    14d2:	8e e1       	ldi	r24, 0x1E	; 30
    14d4:	8a 87       	std	Y+10, r24	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:361
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
      endADC = 112;
      startDelta = 20;
    14d6:	94 e1       	ldi	r25, 0x14	; 20
    14d8:	99 87       	std	Y+9, r25	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:360
      endDelta = 20;
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
      endADC = 112;
    14da:	f0 e7       	ldi	r31, 0x70	; 112
    14dc:	6f 2e       	mov	r6, r31
    14de:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:359
      startDelta = 10;
      endDelta = 20;
      goto CALCULATE;
    }
    else if(adcDiff > 87 && adcDiff < 112) {
      startADC = 87;
    14e0:	a7 e5       	ldi	r26, 0x57	; 87
    14e2:	8a 2e       	mov	r8, r26
    14e4:	91 2c       	mov	r9, r1
    14e6:	6a cf       	rjmp	.-300    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:369
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
      endADC = 121;
      startDelta = 30;
      endDelta = 40;
    14e8:	e8 e2       	ldi	r30, 0x28	; 40
    14ea:	ea 87       	std	Y+10, r30	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:368
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
      endADC = 121;
      startDelta = 30;
    14ec:	fe e1       	ldi	r31, 0x1E	; 30
    14ee:	f9 87       	std	Y+9, r31	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:367
      endDelta = 30;
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
      endADC = 121;
    14f0:	79 e7       	ldi	r23, 0x79	; 121
    14f2:	67 2e       	mov	r6, r23
    14f4:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:366
      startDelta = 20;
      endDelta = 30;
      goto CALCULATE;      
    }
    else if(adcDiff > 112 && adcDiff < 121) {
      startADC = 112;
    14f6:	e0 e7       	ldi	r30, 0x70	; 112
    14f8:	8e 2e       	mov	r8, r30
    14fa:	91 2c       	mov	r9, r1
    14fc:	5f cf       	rjmp	.-322    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:376
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
      endADC = 124;
      startDelta = 40;
      endDelta = 50;
    14fe:	22 e3       	ldi	r18, 0x32	; 50
    1500:	2a 87       	std	Y+10, r18	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:375
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
      endADC = 124;
      startDelta = 40;
    1502:	88 e2       	ldi	r24, 0x28	; 40
    1504:	89 87       	std	Y+9, r24	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:374
      endDelta = 40;
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
      endADC = 124;
    1506:	5c e7       	ldi	r21, 0x7C	; 124
    1508:	65 2e       	mov	r6, r21
    150a:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:373
      startDelta = 30;
      endDelta = 40;
      goto CALCULATE;      
    }
    else if(adcDiff > 121 && adcDiff < 124) {
      startADC = 121;
    150c:	69 e7       	ldi	r22, 0x79	; 121
    150e:	86 2e       	mov	r8, r22
    1510:	91 2c       	mov	r9, r1
    1512:	54 cf       	rjmp	.-344    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:383
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
      endADC = 127;
      startDelta = 50;
      endDelta = 60;
    1514:	9c e3       	ldi	r25, 0x3C	; 60
    1516:	9a 87       	std	Y+10, r25	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:382
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
      endADC = 127;
      startDelta = 50;
    1518:	e2 e3       	ldi	r30, 0x32	; 50
    151a:	e9 87       	std	Y+9, r30	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:381
      endDelta = 50;
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
      endADC = 127;
    151c:	3f e7       	ldi	r19, 0x7F	; 127
    151e:	63 2e       	mov	r6, r19
    1520:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:380
      startDelta = 40;
      endDelta = 50;
      goto CALCULATE;      
    }
    else if(adcDiff > 124 && adcDiff < 127) {
      startADC = 124;
    1522:	4c e7       	ldi	r20, 0x7C	; 124
    1524:	84 2e       	mov	r8, r20
    1526:	91 2c       	mov	r9, r1
    1528:	49 cf       	rjmp	.-366    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:390
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
      endADC = 133;
      startDelta = 60;
      endDelta = 70;
    152a:	f6 e4       	ldi	r31, 0x46	; 70
    152c:	fa 87       	std	Y+10, r31	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:389
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
      endADC = 133;
      startDelta = 60;
    152e:	2c e3       	ldi	r18, 0x3C	; 60
    1530:	29 87       	std	Y+9, r18	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:388
      endDelta = 60;
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
      endADC = 133;
    1532:	95 e8       	ldi	r25, 0x85	; 133
    1534:	69 2e       	mov	r6, r25
    1536:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:387
      startDelta = 50;
      endDelta = 60;
      goto CALCULATE;      
    }
    else if(adcDiff > 127 && adcDiff < 133) {
      startADC = 127;
    1538:	2f e7       	ldi	r18, 0x7F	; 127
    153a:	82 2e       	mov	r8, r18
    153c:	91 2c       	mov	r9, r1
    153e:	3e cf       	rjmp	.-388    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:397
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
      endADC = 141;
      startDelta = 70;
      endDelta = 80;
    1540:	80 e5       	ldi	r24, 0x50	; 80
    1542:	8a 87       	std	Y+10, r24	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:396
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
      endADC = 141;
      startDelta = 70;
    1544:	96 e4       	ldi	r25, 0x46	; 70
    1546:	99 87       	std	Y+9, r25	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:395
      endDelta = 70;
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
      endADC = 141;
    1548:	bd e8       	ldi	r27, 0x8D	; 141
    154a:	6b 2e       	mov	r6, r27
    154c:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:394
      startDelta = 60;
      endDelta = 70;
      goto CALCULATE;      
    }
    else if(adcDiff > 133 && adcDiff < 141) {
      startADC = 133;
    154e:	85 e8       	ldi	r24, 0x85	; 133
    1550:	88 2e       	mov	r8, r24
    1552:	91 2c       	mov	r9, r1
    1554:	33 cf       	rjmp	.-410    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:404
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
      endADC = 151;
      startDelta = 80;
      endDelta = 90;
    1556:	ea e5       	ldi	r30, 0x5A	; 90
    1558:	ea 87       	std	Y+10, r30	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:403
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
      endADC = 151;
      startDelta = 80;
    155a:	f0 e5       	ldi	r31, 0x50	; 80
    155c:	f9 87       	std	Y+9, r31	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:402
      endDelta = 80;
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
      endADC = 151;
    155e:	f7 e9       	ldi	r31, 0x97	; 151
    1560:	6f 2e       	mov	r6, r31
    1562:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:401
      startDelta = 70;
      endDelta = 80;
      goto CALCULATE;      
    }
    else if(adcDiff > 141 && adcDiff < 151) {
      startADC = 141;
    1564:	ad e8       	ldi	r26, 0x8D	; 141
    1566:	8a 2e       	mov	r8, r26
    1568:	91 2c       	mov	r9, r1
    156a:	28 cf       	rjmp	.-432    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:411
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
      endADC = 161;
      startDelta = 90;
      endDelta = 100;
    156c:	24 e6       	ldi	r18, 0x64	; 100
    156e:	2a 87       	std	Y+10, r18	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:410
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
      endADC = 161;
      startDelta = 90;
    1570:	8a e5       	ldi	r24, 0x5A	; 90
    1572:	89 87       	std	Y+9, r24	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:409
      endDelta = 90;
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
      endADC = 161;
    1574:	71 ea       	ldi	r23, 0xA1	; 161
    1576:	67 2e       	mov	r6, r23
    1578:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:408
      startDelta = 80;
      endDelta = 90;
      goto CALCULATE;      
    }
    else if(adcDiff > 151 && adcDiff < 161) {
      startADC = 151;
    157a:	e7 e9       	ldi	r30, 0x97	; 151
    157c:	8e 2e       	mov	r8, r30
    157e:	91 2c       	mov	r9, r1
    1580:	1d cf       	rjmp	.-454    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:418
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
      endADC = 175;
      startDelta = 100;
      endDelta = 110;
    1582:	9e e6       	ldi	r25, 0x6E	; 110
    1584:	9a 87       	std	Y+10, r25	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:417
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
      endADC = 175;
      startDelta = 100;
    1586:	e4 e6       	ldi	r30, 0x64	; 100
    1588:	e9 87       	std	Y+9, r30	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:416
      endDelta = 100;
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
      endADC = 175;
    158a:	5f ea       	ldi	r21, 0xAF	; 175
    158c:	65 2e       	mov	r6, r21
    158e:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:415
      startDelta = 90;
      endDelta = 100;
      goto CALCULATE;      
    }
    else if(adcDiff > 161 && adcDiff < 175) {
      startADC = 161;
    1590:	61 ea       	ldi	r22, 0xA1	; 161
    1592:	86 2e       	mov	r8, r22
    1594:	91 2c       	mov	r9, r1
    1596:	12 cf       	rjmp	.-476    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:425
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
      endADC = 185;
      startDelta = 110;
      endDelta = 120;
    1598:	f8 e7       	ldi	r31, 0x78	; 120
    159a:	fa 87       	std	Y+10, r31	; 0x0a
/home/stend/Документы/stend/hardware/pid_regulator.cpp:424
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
      endADC = 185;
      startDelta = 110;
    159c:	2e e6       	ldi	r18, 0x6E	; 110
    159e:	29 87       	std	Y+9, r18	; 0x09
/home/stend/Документы/stend/hardware/pid_regulator.cpp:423
      endDelta = 110;
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
      endADC = 185;
    15a0:	39 eb       	ldi	r19, 0xB9	; 185
    15a2:	63 2e       	mov	r6, r19
    15a4:	71 2c       	mov	r7, r1
/home/stend/Документы/stend/hardware/pid_regulator.cpp:422
      startDelta = 100;
      endDelta = 110;
      goto CALCULATE;      
    }
    else if(adcDiff > 175 && adcDiff < 185) {
      startADC = 175;
    15a6:	4f ea       	ldi	r20, 0xAF	; 175
    15a8:	84 2e       	mov	r8, r20
    15aa:	91 2c       	mov	r9, r1
    15ac:	07 cf       	rjmp	.-498    	; 0x13bc <__stack+0x2bd>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:434
CALCULATE:
    float currentDelta = startDelta + (endDelta - startDelta) * 1.0 * (adcDiff - startADC)/(endADC - startADC); 
    return currentDelta;
  }
  else {
    return MAX_POSSIBLE_VALUE;
    15ae:	6f ef       	ldi	r22, 0xFF	; 255
    15b0:	4f cf       	rjmp	.-354    	; 0x1450 <__stack+0x351>
turnOFFVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:20
void pidRegulator::turnONVentilator() const {
  digitalWrite(A4T_VENT_PIN, HIGH);
}

void pidRegulator::turnOFFVentilator() const {
  digitalWrite(A4T_VENT_PIN, LOW);
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
tickTackToe():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:51
          m_pwm.setIntencity(1);
      }
      else {
        turnOFFVentilator();

        if(m_ADCdiffRead > m_warmerData.adc) {
    15ba:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <pid+0x17>
    15be:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <pid+0x18>
    15c2:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <pid+0x2>
    15c6:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <pid+0x3>
    15ca:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pid>
    15ce:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pid+0x1>
    15d2:	24 17       	cp	r18, r20
    15d4:	35 07       	cpc	r19, r21
    15d6:	30 f4       	brcc	.+12     	; 0x15e4 <__stack+0x4e5>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:52
          m_pwm.setIntencity(m_warmerData.pwm - PID_STEP);
    15d8:	02 97       	sbiw	r24, 0x02	; 2
    15da:	81 15       	cp	r24, r1
    15dc:	f4 e0       	ldi	r31, 0x04	; 4
    15de:	9f 07       	cpc	r25, r31
    15e0:	a0 f0       	brcs	.+40     	; 0x160a <__stack+0x50b>
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <__stack+0x4ed>
    15e4:	81 15       	cp	r24, r1
    15e6:	24 e0       	ldi	r18, 0x04	; 4
    15e8:	92 07       	cpc	r25, r18
    15ea:	78 f0       	brcs	.+30     	; 0x160a <__stack+0x50b>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	93 e0       	ldi	r25, 0x03	; 3
    15f0:	0c c0       	rjmp	.+24     	; 0x160a <__stack+0x50b>
    15f2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pid>
    15f6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pid+0x1>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:61
        }
      }
    }
    else if(m_warmerData.warmDirection == PID_WARM_UP) {

      if(m_ADCdiffRead > m_warmerData.adc) {
    15fa:	24 17       	cp	r18, r20
    15fc:	35 07       	cpc	r19, r21
    15fe:	68 f7       	brcc	.-38     	; 0x15da <__stack+0x4db>
/home/stend/Документы/stend/hardware/pid_regulator.cpp:62
        m_pwm.setIntencity(m_warmerData.pwm - PID_STEP);
    1600:	02 97       	sbiw	r24, 0x02	; 2
    1602:	81 15       	cp	r24, r1
    1604:	e4 e0       	ldi	r30, 0x04	; 4
    1606:	9e 07       	cpc	r25, r30
    1608:	88 f7       	brcc	.-30     	; 0x15ec <__stack+0x4ed>
setIntencity():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:221

    if(intencity > 1023) {
        intencity = 1023;
    }

    OCR1A = intencity;
    160a:	9b bd       	out	0x2b, r25	; 43
    160c:	8a bd       	out	0x2a, r24	; 42
    160e:	06 ce       	rjmp	.-1012   	; 0x121c <__stack+0x11d>
move():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:196
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
  if (buffer) {
    1610:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <stend::UARTbuffer>
    1614:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <stend::UARTbuffer+0x1>
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	09 f4       	brne	.+2      	; 0x161e <__stack+0x51f>
    161c:	64 c0       	rjmp	.+200    	; 0x16e6 <__stack+0x5e7>
    161e:	69 81       	ldd	r22, Y+1	; 0x01
    1620:	7a 81       	ldd	r23, Y+2	; 0x02
_ZNK6StringcvMS_KFvvEEv.isra.0():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    1622:	61 15       	cp	r22, r1
    1624:	71 05       	cpc	r23, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <__stack+0x52b>
    1628:	5c c0       	rjmp	.+184    	; 0x16e2 <__stack+0x5e3>
move():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
    162a:	40 91 47 03 	lds	r20, 0x0347	; 0x800347 <stend::UARTbuffer+0x2>
    162e:	50 91 48 03 	lds	r21, 0x0348	; 0x800348 <stend::UARTbuffer+0x3>
    1632:	2d 81       	ldd	r18, Y+5	; 0x05
    1634:	3e 81       	ldd	r19, Y+6	; 0x06
    1636:	42 17       	cp	r20, r18
    1638:	53 07       	cpc	r21, r19
    163a:	08 f4       	brcc	.+2      	; 0x163e <__stack+0x53f>
    163c:	52 c0       	rjmp	.+164    	; 0x16e2 <__stack+0x5e3>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
    163e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <strcpy>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <stend::UARTbuffer+0x5>
    164a:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <stend::UARTbuffer+0x4>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
    164e:	1e 82       	std	Y+6, r1	; 0x06
    1650:	1d 82       	std	Y+5, r1	; 0x05
loop():
/home/stend/Документы/stend/hardware/hardware.ino:43
    
    stend::UARTbuffer = Serial.readStringUntil('\n');
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
/home/stend/Документы/stend/hardware/hardware.ino:45

    if(stend::UARTbuffer.length() == 0) {
    165a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    165e:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    1662:	89 2b       	or	r24, r25
    1664:	09 f4       	brne	.+2      	; 0x1668 <__stack+0x569>
    1666:	f2 cd       	rjmp	.-1052   	; 0x124c <__stack+0x14d>
/home/stend/Документы/stend/hardware/hardware.ino:50
      continue;
    }
    
    /* Установка температурной дельты - STD30 - 3 градуса и т.д.*/
    if(stend::UARTbuffer.startsWith("STD")) { 
    1668:	6f e3       	ldi	r22, 0x3F	; 63
    166a:	71 e0       	ldi	r23, 0x01	; 1
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	0e 94 11 06 	call	0xc22	; 0xc22 <String::String(char const*)>
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	0e 94 27 05 	call	0xa4e	; 0xa4e <String::startsWith(String const&) const [clone .constprop.28]>
    167c:	18 2f       	mov	r17, r24
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
    1686:	11 23       	and	r17, r17
    1688:	09 f4       	brne	.+2      	; 0x168c <__stack+0x58d>
    168a:	44 c0       	rjmp	.+136    	; 0x1714 <__stack+0x615>
/home/stend/Документы/stend/hardware/hardware.ino:53

      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedDelta = static_cast<uint8_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
    168c:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    1690:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    1694:	77 27       	eor	r23, r23
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	0e 94 22 06 	call	0xc44	; 0xc44 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]>
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
    16a2:	60 e0       	ldi	r22, 0x00	; 0
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	11 f0       	breq	.+4      	; 0x16ac <__stack+0x5ad>
    16a8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <atol>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:53
    16ac:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <stend::setedDelta>
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
write():
    16b8:	83 e4       	ldi	r24, 0x43	; 67
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
print():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    16c0:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <stend::setedDelta>
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	80 e0       	ldi	r24, 0x00	; 0
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    16ca:	4a e0       	ldi	r20, 0x0A	; 10
    16cc:	0e 94 bb 04 	call	0x976	; 0x976 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.37]>
write():
    16d0:	8d e2       	ldi	r24, 0x2D	; 45
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:57

      Serial.print("STDOK");
      Serial.println(stend::setedDelta);
      pid.keepThermalDelta(stend::setedDelta);
    16d8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <stend::setedDelta>
on():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:79

  m_warmerData = m_pidParams.dataForThermalDelta(thermalDelta);
}

void pidRegulator::on() {
  keepThermalDelta(PID_ON_THERMAL_DELTA);
    16dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <pidRegulator::keepThermalDelta(unsigned char) [clone .constprop.41]>
    16e0:	b5 cd       	rjmp	.-1174   	; 0x124c <__stack+0x14d>
move():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
    16e2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <free>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <stend::UARTbuffer+0x1>
    16ee:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <stend::UARTbuffer>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <stend::UARTbuffer+0x3>
    16fa:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <stend::UARTbuffer+0x2>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <stend::UARTbuffer+0x5>
    1706:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <stend::UARTbuffer+0x4>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
    170a:	1a 82       	std	Y+2, r1	; 0x02
    170c:	19 82       	std	Y+1, r1	; 0x01
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
    170e:	1c 82       	std	Y+4, r1	; 0x04
    1710:	1b 82       	std	Y+3, r1	; 0x03
    1712:	9d cf       	rjmp	.-198    	; 0x164e <__stack+0x54f>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
  int compareTo(const String &s) const;
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1714:	89 e4       	ldi	r24, 0x49	; 73
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:61
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - ВКЛ */
    if(stend::UARTbuffer == "LT1ON") {
    171c:	88 23       	and	r24, r24
    171e:	49 f0       	breq	.+18     	; 0x1732 <__stack+0x633>
/home/stend/Документы/stend/hardware/hardware.ino:62
      Serial.println("LT1ONOK");
    1720:	8f e4       	ldi	r24, 0x4F	; 79
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
on():

void lightregulator::on(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index = 6;
    1728:	a0 92 ea 02 	sts	0x02EA, r10	; 0x8002ea <light+0x17>
setintencity():
    172c:	0e 94 90 02 	call	0x520	; 0x520 <lightregulator::setintencity(unsigned char) [clone .part.1] [clone .constprop.74]>
    1730:	8d cd       	rjmp	.-1254   	; 0x124c <__stack+0x14d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1732:	87 e5       	ldi	r24, 0x57	; 87
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:66
      light.on(FIRST_EMMITER);
      continue;
    }
    if(stend::UARTbuffer == "LT2ON") {
    173a:	88 23       	and	r24, r24
    173c:	69 f0       	breq	.+26     	; 0x1758 <__stack+0x659>
/home/stend/Документы/stend/hardware/hardware.ino:67
      Serial.println("LT1ONOK");
    173e:	8f e4       	ldi	r24, 0x4F	; 79
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
on():
/home/stend/Документы/stend/hardware/light_regulator.h:66
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 6;
    1746:	a0 92 eb 02 	sts	0x02EB, r10	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    174a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <light+0x2c>
    174e:	90 e0       	ldi	r25, 0x00	; 0
fastWriteB():
/home/stend/Документы/stend/hardware/MCP_DAC.cpp:137
    1750:	90 6b       	ori	r25, 0xB0	; 176
    1752:	0e 94 66 02 	call	0x4cc	; 0x4cc <MCP_DAC::transfer(unsigned int) [clone .constprop.78]>
    1756:	7a cd       	rjmp	.-1292   	; 0x124c <__stack+0x14d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1758:	8d e5       	ldi	r24, 0x5D	; 93
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:72
      light.on(SECOND_EMMITER);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - ВЫКЛ */
    if(stend::UARTbuffer == "LT1OFF") {
    1760:	88 23       	and	r24, r24
    1762:	39 f0       	breq	.+14     	; 0x1772 <__stack+0x673>
/home/stend/Документы/stend/hardware/hardware.ino:73
      Serial.println("LTOFFOK");
    1764:	84 e6       	ldi	r24, 0x64	; 100
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:75

void lightregulator::off(uint8_t emmiterNum) {
  
  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index = 0;
    176c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <light+0x17>
    1770:	dd cf       	rjmp	.-70     	; 0x172c <__stack+0x62d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1772:	8c e6       	ldi	r24, 0x6C	; 108
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:77
      light.off(FIRST_EMMITER);
      continue;
    }
    if(stend::UARTbuffer == "LT2OFF") {
    177a:	88 23       	and	r24, r24
    177c:	49 f0       	breq	.+18     	; 0x1790 <__stack+0x691>
/home/stend/Документы/stend/hardware/hardware.ino:78
      Serial.println("LTOFFOK");
    177e:	84 e6       	ldi	r24, 0x64	; 100
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
off():
/home/stend/Документы/stend/hardware/light_regulator.h:79
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index = 0;
    1786:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    178a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <light+0x26>
    178e:	df cf       	rjmp	.-66     	; 0x174e <__stack+0x64f>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1790:	83 e7       	ldi	r24, 0x73	; 115
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:83
      light.off(SECOND_EMMITER);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - увеличить интенсивность */
    if(stend::UARTbuffer == "LT1U") {
    1798:	88 23       	and	r24, r24
    179a:	79 f0       	breq	.+30     	; 0x17ba <__stack+0x6bb>
/home/stend/Документы/stend/hardware/hardware.ino:84
      Serial.println("LT1UOK");
    179c:	88 e7       	ldi	r24, 0x78	; 120
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:88

void lightregulator::riseUp(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index++;
    17a4:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <light+0x17>
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
/home/stend/Документы/stend/hardware/light_regulator.h:89
    if(m_inten1Index > LIGHT_INTENS_SIZE - 1) {
    17aa:	8d 30       	cpi	r24, 0x0D	; 13
    17ac:	1c f4       	brge	.+6      	; 0x17b4 <__stack+0x6b5>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:108

void lightregulator::slowDown(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index--;
    17ae:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <light+0x17>
    17b2:	bc cf       	rjmp	.-136    	; 0x172c <__stack+0x62d>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:90

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index++;
    if(m_inten1Index > LIGHT_INTENS_SIZE - 1) {
      m_inten1Index = LIGHT_INTENS_SIZE - 1;
    17b4:	b0 92 ea 02 	sts	0x02EA, r11	; 0x8002ea <light+0x17>
    17b8:	b9 cf       	rjmp	.-142    	; 0x172c <__stack+0x62d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    17ba:	8f e7       	ldi	r24, 0x7F	; 127
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:88
      light.riseUp(FIRST_EMMITER);
      continue;
    }
    if(stend::UARTbuffer == "LT2U") {
    17c2:	88 23       	and	r24, r24
    17c4:	b9 f0       	breq	.+46     	; 0x17f4 <__stack+0x6f5>
/home/stend/Документы/stend/hardware/hardware.ino:89
      Serial.println("LT2UOK");
    17c6:	84 e8       	ldi	r24, 0x84	; 132
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:96
    }

    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index++;
    17ce:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <light+0x18>
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
/home/stend/Документы/stend/hardware/light_regulator.h:97
    if(m_inten2Index > LIGHT_INTENS_SIZE - 1) {
    17d4:	8d 30       	cpi	r24, 0x0D	; 13
    17d6:	1c f4       	brge	.+6      	; 0x17de <__stack+0x6df>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:116
    }

    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index--;
    17d8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <light+0x18>
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <__stack+0x6e3>
riseUp():
/home/stend/Документы/stend/hardware/light_regulator.h:98
    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index++;
    if(m_inten2Index > LIGHT_INTENS_SIZE - 1) {
      m_inten2Index = LIGHT_INTENS_SIZE - 1;
    17de:	b0 92 eb 02 	sts	0x02EB, r11	; 0x8002eb <light+0x18>
setintencity():
/home/stend/Документы/stend/hardware/light_regulator.h:45

  if(emmiterNum == FIRST_EMMITER) {
    m_mcp4922.fastWriteA(m_intens_1[m_inten1Index]);
  }
  else {
    m_mcp4922.fastWriteB(m_intens_2[m_inten2Index]);
    17e2:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <light+0x18>
    17e6:	0e 2e       	mov	r0, r30
    17e8:	00 0c       	add	r0, r0
    17ea:	ff 0b       	sbc	r31, r31
    17ec:	ed 52       	subi	r30, 0x2D	; 45
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	86 a1       	ldd	r24, Z+38	; 0x26
    17f2:	ad cf       	rjmp	.-166    	; 0x174e <__stack+0x64f>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    17f4:	8b e8       	ldi	r24, 0x8B	; 139
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:94
      light.riseUp(SECOND_EMMITER);
      continue;
    }
    /* ИЗЛУЧАТЕЛИ - снизить интенсивность */
    if(stend::UARTbuffer == "LT1D") {
    17fc:	88 23       	and	r24, r24
    17fe:	51 f0       	breq	.+20     	; 0x1814 <__stack+0x715>
/home/stend/Документы/stend/hardware/hardware.ino:95
      Serial.println("LT1DOK");
    1800:	80 e9       	ldi	r24, 0x90	; 144
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:108

void lightregulator::slowDown(uint8_t emmiterNum) {

  if(emmiterNum == FIRST_EMMITER) {

    m_inten1Index--;
    1808:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <light+0x17>
    180c:	81 50       	subi	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/light_regulator.h:109
    if(m_inten1Index < 0) {
    180e:	87 fd       	sbrc	r24, 7
    1810:	ad cf       	rjmp	.-166    	; 0x176c <__stack+0x66d>
    1812:	cd cf       	rjmp	.-102    	; 0x17ae <__stack+0x6af>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1814:	87 e9       	ldi	r24, 0x97	; 151
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:99
      light.slowDown(FIRST_EMMITER);
      continue;
    }
    if(stend::UARTbuffer == "LT2D") {
    181c:	88 23       	and	r24, r24
    181e:	61 f0       	breq	.+24     	; 0x1838 <__stack+0x739>
/home/stend/Документы/stend/hardware/hardware.ino:100
      Serial.println("LT2DOK");
    1820:	8c e9       	ldi	r24, 0x9C	; 156
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
slowDown():
/home/stend/Документы/stend/hardware/light_regulator.h:116
    }

    setintencity(FIRST_EMMITER);
  }
  else {
    m_inten2Index--;
    1828:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <light+0x18>
    182c:	81 50       	subi	r24, 0x01	; 1
/home/stend/Документы/stend/hardware/light_regulator.h:117
    if(m_inten2Index < 0) {
    182e:	87 ff       	sbrs	r24, 7
    1830:	d3 cf       	rjmp	.-90     	; 0x17d8 <__stack+0x6d9>
/home/stend/Документы/stend/hardware/light_regulator.h:118
      m_inten2Index = 0;
    1832:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <light+0x18>
    1836:	d5 cf       	rjmp	.-86     	; 0x17e2 <__stack+0x6e3>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1838:	83 ea       	ldi	r24, 0xA3	; 163
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:105
      light.slowDown(SECOND_EMMITER);
      continue;
    }
    /* АЧТ ВКЛ */
    if(stend::UARTbuffer == "BBON") {
    1840:	88 23       	and	r24, r24
    1842:	31 f0       	breq	.+12     	; 0x1850 <__stack+0x751>
/home/stend/Документы/stend/hardware/hardware.ino:106
      Serial.println("BBONOK");
    1844:	88 ea       	ldi	r24, 0xA8	; 168
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
on():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:79
    184c:	82 e3       	ldi	r24, 0x32	; 50
    184e:	46 cf       	rjmp	.-372    	; 0x16dc <__stack+0x5dd>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1850:	8f ea       	ldi	r24, 0xAF	; 175
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:111
      pid.on();
      continue;
    }
    /* АЧТ ВЫКЛ */
    if(stend::UARTbuffer == "BBOFF") {
    1858:	88 23       	and	r24, r24
    185a:	31 f0       	breq	.+12     	; 0x1868 <__stack+0x769>
/home/stend/Документы/stend/hardware/hardware.ino:112
      Serial.println("BBOFFOK");
    185c:	85 eb       	ldi	r24, 0xB5	; 181
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
off():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:83
}

void pidRegulator::off() {
  keepThermalDelta(0);
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	3a cf       	rjmp	.-396    	; 0x16dc <__stack+0x5dd>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1868:	8d eb       	ldi	r24, 0xBD	; 189
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:117
      pid.off();
      continue;
    }
    /* Вентилятор ВКЛ */
    if(stend::UARTbuffer == "VON") {
    1870:	88 23       	and	r24, r24
    1872:	49 f0       	breq	.+18     	; 0x1886 <__stack+0x787>
/home/stend/Документы/stend/hardware/hardware.ino:118
      Serial.println("VONOK");
    1874:	81 ec       	ldi	r24, 0xC1	; 193
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
turnONVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:16
  m_pwm.init();
  m_pidADC.init();  
}

void pidRegulator::turnONVentilator() const {
  digitalWrite(A4T_VENT_PIN, HIGH);
    187c:	61 e0       	ldi	r22, 0x01	; 1
turnOFFVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:20
}

void pidRegulator::turnOFFVentilator() const {
  digitalWrite(A4T_VENT_PIN, LOW);
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	0e 94 12 02 	call	0x424	; 0x424 <digitalWrite>
    1884:	e3 cc       	rjmp	.-1594   	; 0x124c <__stack+0x14d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1886:	87 ec       	ldi	r24, 0xC7	; 199
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:123
      pid.turnONVentilator();
      continue;
    }
    /* Вентилятор ВЫКЛ */
    if(stend::UARTbuffer == "VOFF") {
    188e:	88 23       	and	r24, r24
    1890:	31 f0       	breq	.+12     	; 0x189e <__stack+0x79f>
/home/stend/Документы/stend/hardware/hardware.ino:124
      Serial.println("VOFFOK");
    1892:	8c ec       	ldi	r24, 0xCC	; 204
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
turnOFFVentilator():
/home/stend/Документы/stend/hardware/pid_regulator.cpp:20
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	f0 cf       	rjmp	.-32     	; 0x187e <__stack+0x77f>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    189e:	83 ed       	ldi	r24, 0xD3	; 211
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:129
      pid.turnOFFVentilator();
      continue;
    }
    /* Перезагрузка устройства */
    if(stend::UARTbuffer == "RST") {
    18a6:	88 23       	and	r24, r24
    18a8:	61 f1       	breq	.+88     	; 0x1902 <__stack+0x803>
/home/stend/Документы/stend/hardware/hardware.ino:130
      Serial.println("RSTOK");
    18aa:	87 ed       	ldi	r24, 0xD7	; 215
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
delay():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
    18b2:	0e 94 9c 02 	call	0x538	; 0x538 <micros>
    18b6:	6b 01       	movw	r12, r22
    18b8:	7c 01       	movw	r14, r24
    18ba:	88 e8       	ldi	r24, 0x88	; 136
    18bc:	28 2e       	mov	r2, r24
    18be:	83 e1       	ldi	r24, 0x13	; 19
    18c0:	38 2e       	mov	r3, r24
    18c2:	41 2c       	mov	r4, r1
    18c4:	51 2c       	mov	r5, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    18c6:	0e 94 9c 02 	call	0x538	; 0x538 <micros>
    18ca:	6c 19       	sub	r22, r12
    18cc:	7d 09       	sbc	r23, r13
    18ce:	8e 09       	sbc	r24, r14
    18d0:	9f 09       	sbc	r25, r15
    18d2:	68 3e       	cpi	r22, 0xE8	; 232
    18d4:	73 40       	sbci	r23, 0x03	; 3
    18d6:	81 05       	cpc	r24, r1
    18d8:	91 05       	cpc	r25, r1
    18da:	a8 f3       	brcs	.-22     	; 0x18c6 <__stack+0x7c7>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	22 1a       	sub	r2, r18
    18e0:	31 08       	sbc	r3, r1
    18e2:	41 08       	sbc	r4, r1
    18e4:	51 08       	sbc	r5, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    18e6:	88 ee       	ldi	r24, 0xE8	; 232
    18e8:	c8 0e       	add	r12, r24
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	d8 1e       	adc	r13, r24
    18ee:	e1 1c       	adc	r14, r1
    18f0:	f1 1c       	adc	r15, r1
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    18f2:	21 14       	cp	r2, r1
    18f4:	31 04       	cpc	r3, r1
    18f6:	41 04       	cpc	r4, r1
    18f8:	51 04       	cpc	r5, r1
    18fa:	29 f7       	brne	.-54     	; 0x18c6 <__stack+0x7c7>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:132
      delay(5000);
      stend::resetFunc();
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	e0 e0       	ldi	r30, 0x00	; 0
    1900:	09 95       	icall
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1902:	8d ed       	ldi	r24, 0xDD	; 221
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:135
    }
    /* Передвинуть миру вперед на один шаг */
    if(stend::UARTbuffer == "MFS") {
    190a:	88 23       	and	r24, r24
    190c:	49 f0       	breq	.+18     	; 0x1920 <__stack+0x821>
/home/stend/Документы/stend/hardware/hardware.ino:136
      Serial.println("MFSOK");
    190e:	81 ee       	ldi	r24, 0xE1	; 225
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
/home/stend/Документы/stend/hardware/hardware.ino:137
      motor.makeStepForward();
    1916:	0e 94 44 04 	call	0x888	; 0x888 <motorRouter::makeStepForward() [clone .constprop.56]>
goForward():
/home/stend/Документы/stend/hardware/motor_regulator.h:162
    
    for(uint16_t i = 0; i < steps; i++) {
      makeStepForward();
    }

    stop();
    191a:	0e 94 a0 04 	call	0x940	; 0x940 <motorRouter::stop() [clone .isra.12]>
    191e:	96 cc       	rjmp	.-1748   	; 0x124c <__stack+0x14d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1920:	87 ee       	ldi	r24, 0xE7	; 231
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:142
      motor.stop();
      continue;
    }
    /* Передвинуть миру назад на один шаг */
    if(stend::UARTbuffer == "MBS") {
    1928:	88 23       	and	r24, r24
    192a:	39 f0       	breq	.+14     	; 0x193a <__stack+0x83b>
/home/stend/Документы/stend/hardware/hardware.ino:143
      Serial.println("MBSOK");
    192c:	8b ee       	ldi	r24, 0xEB	; 235
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
/home/stend/Документы/stend/hardware/hardware.ino:144
      motor.makeStepBackward();
    1934:	0e 94 72 04 	call	0x8e4	; 0x8e4 <motorRouter::makeStepBackward() [clone .constprop.54]>
    1938:	f0 cf       	rjmp	.-32     	; 0x191a <__stack+0x81b>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    193a:	81 ef       	ldi	r24, 0xF1	; 241
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:150
      motor.stop();
      continue;
    }

    /* Установить "нулевое" положение миры */
    if(stend::UARTbuffer == "MSZ") {
    1942:	88 23       	and	r24, r24
    1944:	79 f0       	breq	.+30     	; 0x1964 <__stack+0x865>
/home/stend/Документы/stend/hardware/hardware.ino:151
      Serial.println("MSZOK");
    1946:	85 ef       	ldi	r24, 0xF5	; 245
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
savecurrentPositionAsStart():
/home/stend/Документы/stend/hardware/motor_regulator.h:149
    findZero();
    gotoStartPosition();
  }

  void savecurrentPositionAsStart() const {
    EEPROM.put(0, getCounter());
    194e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <motor+0xc>
    1952:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <motor+0xd>
_ZNK11motorRouter18eraseStartPositionEv.isra.16():
/home/stend/Документы/stend/hardware/motor_regulator.h:153
  }
  
  void eraseStartPosition() const {
    EEPROM.put(0, -1);
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	0e 94 23 04 	call	0x846	; 0x846 <int const& EEPROMClass::put<int>(int, int const&) [clone .isra.15] [clone .constprop.60]>
    1962:	74 cc       	rjmp	.-1816   	; 0x124c <__stack+0x14d>
_ZNK6StringeqEPKc():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.h:143
    1964:	8b ef       	ldi	r24, 0xFB	; 251
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	0e 94 44 05 	call	0xa88	; 0xa88 <String::equals(char const*) const [clone .constprop.26]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:157
      motor.savecurrentPositionAsStart();
      continue;
    }
    
    /* Сбросить "нулевое" положение миры */
    if(stend::UARTbuffer == "MRZ") {
    196c:	88 23       	and	r24, r24
    196e:	39 f0       	breq	.+14     	; 0x197e <__stack+0x87f>
/home/stend/Документы/stend/hardware/hardware.ino:158
      Serial.println("MRZOK");
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Print::println(char const*) [clone .constprop.43]>
_ZNK11motorRouter18eraseStartPositionEv.isra.16():
/home/stend/Документы/stend/hardware/motor_regulator.h:153
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	ec cf       	rjmp	.-40     	; 0x1956 <__stack+0x857>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:164
      motor.eraseStartPosition();
      continue;
    }

    /* Передвинуть миру вперед (+) или назад (-) */
    if(stend::UARTbuffer.startsWith("MMF")) {
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	0e 94 11 06 	call	0xc22	; 0xc22 <String::String(char const*)>
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 27 05 	call	0xa4e	; 0xa4e <String::startsWith(String const&) const [clone .constprop.28]>
    1992:	18 2f       	mov	r17, r24
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
    199c:	11 23       	and	r17, r17
    199e:	a1 f1       	breq	.+104    	; 0x1a08 <__stack+0x909>
/home/stend/Документы/stend/hardware/hardware.ino:167
            
      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedMiraSteps = static_cast<uint16_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
    19a0:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    19a4:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    19a8:	77 27       	eor	r23, r23
    19aa:	ce 01       	movw	r24, r28
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	0e 94 22 06 	call	0xc44	; 0xc44 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]>
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	19 f1       	breq	.+70     	; 0x1a00 <__stack+0x901>
    19ba:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <atol>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:167
    19be:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <__data_end+0x1>
    19c2:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <__data_end>
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
write():
    19ce:	89 e0       	ldi	r24, 0x09	; 9
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:170
      
      Serial.print("MMFOK");
      Serial.println(stend::setedMiraSteps);
    19d6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
    19da:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
    19de:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Print::println(unsigned int, int) [clone .constprop.33]>
/home/stend/Документы/stend/hardware/hardware.ino:171
      motor.goForward(stend::setedMiraSteps);
    19e2:	e0 90 1a 02 	lds	r14, 0x021A	; 0x80021a <__data_end>
    19e6:	f0 90 1b 02 	lds	r15, 0x021B	; 0x80021b <__data_end+0x1>
main():
/home/stend/Документы/stend/hardware/motor_regulator.h:158
  }

  void goForward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	00 e0       	ldi	r16, 0x00	; 0
goForward():
    19ee:	e0 16       	cp	r14, r16
    19f0:	f1 06       	cpc	r15, r17
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__stack+0x8f7>
    19f4:	92 cf       	rjmp	.-220    	; 0x191a <__stack+0x81b>
/home/stend/Документы/stend/hardware/motor_regulator.h:159
      makeStepForward();
    19f6:	0e 94 44 04 	call	0x888	; 0x888 <motorRouter::makeStepForward() [clone .constprop.56]>
/home/stend/Документы/stend/hardware/motor_regulator.h:158
    EEPROM.put(0, -1);
  }

  void goForward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    19fa:	0f 5f       	subi	r16, 0xFF	; 255
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	f7 cf       	rjmp	.-18     	; 0x19ee <__stack+0x8ef>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	cb 01       	movw	r24, r22
    1a06:	db cf       	rjmp	.-74     	; 0x19be <__stack+0x8bf>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:174
      continue;
    }
    if(stend::UARTbuffer.startsWith("MMB")) {
    1a08:	6f e0       	ldi	r22, 0x0F	; 15
    1a0a:	72 e0       	ldi	r23, 0x02	; 2
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 11 06 	call	0xc22	; 0xc22 <String::String(char const*)>
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	0e 94 27 05 	call	0xa4e	; 0xa4e <String::startsWith(String const&) const [clone .constprop.28]>
    1a1c:	18 2f       	mov	r17, r24
    1a1e:	ce 01       	movw	r24, r28
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
    1a26:	11 23       	and	r17, r17
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__stack+0x92d>
    1a2a:	10 cc       	rjmp	.-2016   	; 0x124c <__stack+0x14d>
/home/stend/Документы/stend/hardware/hardware.ino:177
      
      stend::lastIndex = stend::UARTbuffer.length();
      stend::setedMiraSteps = static_cast<uint16_t>(stend::UARTbuffer.substring(stend::firstIndex, stend::lastIndex).toInt());
    1a2c:	60 91 49 03 	lds	r22, 0x0349	; 0x800349 <stend::UARTbuffer+0x4>
    1a30:	70 91 4a 03 	lds	r23, 0x034A	; 0x80034a <stend::UARTbuffer+0x5>
    1a34:	77 27       	eor	r23, r23
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	0e 94 22 06 	call	0xc44	; 0xc44 <String::substring(unsigned int, unsigned int) const [clone .constprop.31]>
toInt():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	19 f1       	breq	.+70     	; 0x1a8c <__stack+0x98d>
    1a46:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <atol>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:177
    1a4a:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <__data_end+0x1>
    1a4e:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <__data_end>
    1a52:	ce 01       	movw	r24, r28
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	0e 94 1f 05 	call	0xa3e	; 0xa3e <String::~String()>
write():
    1a5a:	83 e1       	ldi	r24, 0x13	; 19
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 ae 04 	call	0x95c	; 0x95c <Print::write(char const*) [clone .part.2] [clone .constprop.46]>
loop():
/home/stend/Документы/stend/hardware/hardware.ino:180
      
      Serial.print("MMBOK");
      Serial.println(stend::setedMiraSteps);
    1a62:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
    1a66:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x1>
    1a6a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Print::println(unsigned int, int) [clone .constprop.33]>
/home/stend/Документы/stend/hardware/hardware.ino:181
      motor.goBackward(stend::setedMiraSteps);
    1a6e:	e0 90 1a 02 	lds	r14, 0x021A	; 0x80021a <__data_end>
    1a72:	f0 90 1b 02 	lds	r15, 0x021B	; 0x80021b <__data_end+0x1>
main():
/home/stend/Документы/stend/hardware/motor_regulator.h:167
    stop();
  }

  void goBackward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	00 e0       	ldi	r16, 0x00	; 0
goBackward():
    1a7a:	e0 16       	cp	r14, r16
    1a7c:	f1 06       	cpc	r15, r17
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <__stack+0x983>
    1a80:	4c cf       	rjmp	.-360    	; 0x191a <__stack+0x81b>
/home/stend/Документы/stend/hardware/motor_regulator.h:168
      makeStepBackward();
    1a82:	0e 94 72 04 	call	0x8e4	; 0x8e4 <motorRouter::makeStepBackward() [clone .constprop.54]>
/home/stend/Документы/stend/hardware/motor_regulator.h:167
    stop();
  }

  void goBackward(uint16_t steps) {
    
    for(uint16_t i = 0; i < steps; i++) {
    1a86:	0f 5f       	subi	r16, 0xFF	; 255
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	f7 cf       	rjmp	.-18     	; 0x1a7a <__stack+0x97b>
main():
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	cb 01       	movw	r24, r22
    1a92:	db cf       	rjmp	.-74     	; 0x1a4a <__stack+0x94b>
/home/stend/.arduino15/packages/MegaCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1a94:	0e 94 04 04 	call	0x808	; 0x808 <serialEventRun()>
    1a98:	7e cb       	rjmp	.-2308   	; 0x1196 <__stack+0x97>

00001a9a <_GLOBAL__sub_D__ZN14lightregulatorC2Ev>:
__static_initialization_and_destruction_0():
/home/stend/Документы/stend/hardware/hardware.ino:10
#define DELTAS_SIZE 10
#define START_THERMAL_DELTA 0

namespace stend {

  String UARTbuffer;
    1a9a:	85 e4       	ldi	r24, 0x45	; 69
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <String::~String()>

00001aa2 <atol>:
atol():
    1aa2:	1f 93       	push	r17
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	99 27       	eor	r25, r25
    1aa8:	88 27       	eor	r24, r24
    1aaa:	bc 01       	movw	r22, r24
    1aac:	e8 94       	clt
    1aae:	11 91       	ld	r17, Z+
    1ab0:	10 32       	cpi	r17, 0x20	; 32
    1ab2:	e9 f3       	breq	.-6      	; 0x1aae <atol+0xc>
    1ab4:	19 30       	cpi	r17, 0x09	; 9
    1ab6:	10 f0       	brcs	.+4      	; 0x1abc <atol+0x1a>
    1ab8:	1e 30       	cpi	r17, 0x0E	; 14
    1aba:	c8 f3       	brcs	.-14     	; 0x1aae <atol+0xc>
    1abc:	1b 32       	cpi	r17, 0x2B	; 43
    1abe:	51 f0       	breq	.+20     	; 0x1ad4 <atol+0x32>
    1ac0:	1d 32       	cpi	r17, 0x2D	; 45
    1ac2:	49 f4       	brne	.+18     	; 0x1ad6 <atol+0x34>
    1ac4:	68 94       	set
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <atol+0x32>
    1ac8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsi_const_10>
    1acc:	61 0f       	add	r22, r17
    1ace:	71 1d       	adc	r23, r1
    1ad0:	81 1d       	adc	r24, r1
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	11 91       	ld	r17, Z+
    1ad6:	10 53       	subi	r17, 0x30	; 48
    1ad8:	1a 30       	cpi	r17, 0x0A	; 10
    1ada:	b0 f3       	brcs	.-20     	; 0x1ac8 <atol+0x26>
    1adc:	3e f4       	brtc	.+14     	; 0x1aec <atol+0x4a>
    1ade:	90 95       	com	r25
    1ae0:	80 95       	com	r24
    1ae2:	70 95       	com	r23
    1ae4:	61 95       	neg	r22
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	1f 91       	pop	r17
    1aee:	08 95       	ret

00001af0 <__mulsi_const_10>:
__mulsi_const_10():
    1af0:	59 2f       	mov	r21, r25
    1af2:	48 2f       	mov	r20, r24
    1af4:	37 2f       	mov	r19, r23
    1af6:	26 2f       	mov	r18, r22
    1af8:	66 0f       	add	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	88 1f       	adc	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	66 0f       	add	r22, r22
    1b02:	77 1f       	adc	r23, r23
    1b04:	88 1f       	adc	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	62 0f       	add	r22, r18
    1b0a:	73 1f       	adc	r23, r19
    1b0c:	84 1f       	adc	r24, r20
    1b0e:	95 1f       	adc	r25, r21
    1b10:	66 0f       	add	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	08 95       	ret

00001b1a <__floatunsisf>:
__floatunsisf():
    1b1a:	e8 94       	clt
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <__floatsisf+0x12>

00001b1e <__floatsisf>:
    1b1e:	97 fb       	bst	r25, 7
    1b20:	3e f4       	brtc	.+14     	; 0x1b30 <__floatsisf+0x12>
    1b22:	90 95       	com	r25
    1b24:	80 95       	com	r24
    1b26:	70 95       	com	r23
    1b28:	61 95       	neg	r22
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	99 23       	and	r25, r25
    1b32:	a9 f0       	breq	.+42     	; 0x1b5e <__floatsisf+0x40>
    1b34:	f9 2f       	mov	r31, r25
    1b36:	96 e9       	ldi	r25, 0x96	; 150
    1b38:	bb 27       	eor	r27, r27
    1b3a:	93 95       	inc	r25
    1b3c:	f6 95       	lsr	r31
    1b3e:	87 95       	ror	r24
    1b40:	77 95       	ror	r23
    1b42:	67 95       	ror	r22
    1b44:	b7 95       	ror	r27
    1b46:	f1 11       	cpse	r31, r1
    1b48:	f8 cf       	rjmp	.-16     	; 0x1b3a <__floatsisf+0x1c>
    1b4a:	fa f4       	brpl	.+62     	; 0x1b8a <__floatsisf+0x6c>
    1b4c:	bb 0f       	add	r27, r27
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <__floatsisf+0x36>
    1b50:	60 ff       	sbrs	r22, 0
    1b52:	1b c0       	rjmp	.+54     	; 0x1b8a <__floatsisf+0x6c>
    1b54:	6f 5f       	subi	r22, 0xFF	; 255
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	16 c0       	rjmp	.+44     	; 0x1b8a <__floatsisf+0x6c>
    1b5e:	88 23       	and	r24, r24
    1b60:	11 f0       	breq	.+4      	; 0x1b66 <__floatsisf+0x48>
    1b62:	96 e9       	ldi	r25, 0x96	; 150
    1b64:	11 c0       	rjmp	.+34     	; 0x1b88 <__floatsisf+0x6a>
    1b66:	77 23       	and	r23, r23
    1b68:	21 f0       	breq	.+8      	; 0x1b72 <__floatsisf+0x54>
    1b6a:	9e e8       	ldi	r25, 0x8E	; 142
    1b6c:	87 2f       	mov	r24, r23
    1b6e:	76 2f       	mov	r23, r22
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <__floatsisf+0x5e>
    1b72:	66 23       	and	r22, r22
    1b74:	71 f0       	breq	.+28     	; 0x1b92 <__floatsisf+0x74>
    1b76:	96 e8       	ldi	r25, 0x86	; 134
    1b78:	86 2f       	mov	r24, r22
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	2a f0       	brmi	.+10     	; 0x1b8a <__floatsisf+0x6c>
    1b80:	9a 95       	dec	r25
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	da f7       	brpl	.-10     	; 0x1b80 <__floatsisf+0x62>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	97 f9       	bld	r25, 7
    1b92:	08 95       	ret

00001b94 <__mulsf3>:
__mulsf3():
    1b94:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__mulsf3x>
    1b98:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_round>
    1b9c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_pscA>
    1ba0:	38 f0       	brcs	.+14     	; 0x1bb0 <__mulsf3+0x1c>
    1ba2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fp_pscB>
    1ba6:	20 f0       	brcs	.+8      	; 0x1bb0 <__mulsf3+0x1c>
    1ba8:	95 23       	and	r25, r21
    1baa:	11 f0       	breq	.+4      	; 0x1bb0 <__mulsf3+0x1c>
    1bac:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__fp_inf>
    1bb0:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_nan>
    1bb4:	11 24       	eor	r1, r1
    1bb6:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__fp_szero>

00001bba <__mulsf3x>:
__mulsf3x():
    1bba:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_split3>
    1bbe:	70 f3       	brcs	.-36     	; 0x1b9c <__mulsf3+0x8>

00001bc0 <__mulsf3_pse>:
    1bc0:	95 9f       	mul	r25, r21
    1bc2:	c1 f3       	breq	.-16     	; 0x1bb4 <__mulsf3+0x20>
    1bc4:	95 0f       	add	r25, r21
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	55 1f       	adc	r21, r21
    1bca:	62 9f       	mul	r22, r18
    1bcc:	f0 01       	movw	r30, r0
    1bce:	72 9f       	mul	r23, r18
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	f0 0d       	add	r31, r0
    1bd4:	b1 1d       	adc	r27, r1
    1bd6:	63 9f       	mul	r22, r19
    1bd8:	aa 27       	eor	r26, r26
    1bda:	f0 0d       	add	r31, r0
    1bdc:	b1 1d       	adc	r27, r1
    1bde:	aa 1f       	adc	r26, r26
    1be0:	64 9f       	mul	r22, r20
    1be2:	66 27       	eor	r22, r22
    1be4:	b0 0d       	add	r27, r0
    1be6:	a1 1d       	adc	r26, r1
    1be8:	66 1f       	adc	r22, r22
    1bea:	82 9f       	mul	r24, r18
    1bec:	22 27       	eor	r18, r18
    1bee:	b0 0d       	add	r27, r0
    1bf0:	a1 1d       	adc	r26, r1
    1bf2:	62 1f       	adc	r22, r18
    1bf4:	73 9f       	mul	r23, r19
    1bf6:	b0 0d       	add	r27, r0
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	62 1f       	adc	r22, r18
    1bfc:	83 9f       	mul	r24, r19
    1bfe:	a0 0d       	add	r26, r0
    1c00:	61 1d       	adc	r22, r1
    1c02:	22 1f       	adc	r18, r18
    1c04:	74 9f       	mul	r23, r20
    1c06:	33 27       	eor	r19, r19
    1c08:	a0 0d       	add	r26, r0
    1c0a:	61 1d       	adc	r22, r1
    1c0c:	23 1f       	adc	r18, r19
    1c0e:	84 9f       	mul	r24, r20
    1c10:	60 0d       	add	r22, r0
    1c12:	21 1d       	adc	r18, r1
    1c14:	82 2f       	mov	r24, r18
    1c16:	76 2f       	mov	r23, r22
    1c18:	6a 2f       	mov	r22, r26
    1c1a:	11 24       	eor	r1, r1
    1c1c:	9f 57       	subi	r25, 0x7F	; 127
    1c1e:	50 40       	sbci	r21, 0x00	; 0
    1c20:	9a f0       	brmi	.+38     	; 0x1c48 <__mulsf3_pse+0x88>
    1c22:	f1 f0       	breq	.+60     	; 0x1c60 <__mulsf3_pse+0xa0>
    1c24:	88 23       	and	r24, r24
    1c26:	4a f0       	brmi	.+18     	; 0x1c3a <__mulsf3_pse+0x7a>
    1c28:	ee 0f       	add	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	bb 1f       	adc	r27, r27
    1c2e:	66 1f       	adc	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	91 50       	subi	r25, 0x01	; 1
    1c36:	50 40       	sbci	r21, 0x00	; 0
    1c38:	a9 f7       	brne	.-22     	; 0x1c24 <__mulsf3_pse+0x64>
    1c3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	80 f0       	brcs	.+32     	; 0x1c60 <__mulsf3_pse+0xa0>
    1c40:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__fp_inf>
    1c44:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__fp_szero>
    1c48:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4a:	e4 f3       	brlt	.-8      	; 0x1c44 <__mulsf3_pse+0x84>
    1c4c:	98 3e       	cpi	r25, 0xE8	; 232
    1c4e:	d4 f3       	brlt	.-12     	; 0x1c44 <__mulsf3_pse+0x84>
    1c50:	86 95       	lsr	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	b7 95       	ror	r27
    1c58:	f7 95       	ror	r31
    1c5a:	e7 95       	ror	r30
    1c5c:	9f 5f       	subi	r25, 0xFF	; 255
    1c5e:	c1 f7       	brne	.-16     	; 0x1c50 <__mulsf3_pse+0x90>
    1c60:	fe 2b       	or	r31, r30
    1c62:	88 0f       	add	r24, r24
    1c64:	91 1d       	adc	r25, r1
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	97 f9       	bld	r25, 7
    1c6c:	08 95       	ret

00001c6e <__fp_inf>:
    1c6e:	97 f9       	bld	r25, 7
    1c70:	9f 67       	ori	r25, 0x7F	; 127
    1c72:	80 e8       	ldi	r24, 0x80	; 128
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	08 95       	ret

00001c7a <__fp_nan>:
    1c7a:	9f ef       	ldi	r25, 0xFF	; 255
    1c7c:	80 ec       	ldi	r24, 0xC0	; 192
    1c7e:	08 95       	ret

00001c80 <__fp_pscA>:
    1c80:	00 24       	eor	r0, r0
    1c82:	0a 94       	dec	r0
    1c84:	16 16       	cp	r1, r22
    1c86:	17 06       	cpc	r1, r23
    1c88:	18 06       	cpc	r1, r24
    1c8a:	09 06       	cpc	r0, r25
__fp_pscA():
    1c8c:	08 95       	ret

00001c8e <__fp_pscB>:
__fp_pscB():
    1c8e:	00 24       	eor	r0, r0
    1c90:	0a 94       	dec	r0
    1c92:	12 16       	cp	r1, r18
    1c94:	13 06       	cpc	r1, r19
    1c96:	14 06       	cpc	r1, r20
    1c98:	05 06       	cpc	r0, r21
    1c9a:	08 95       	ret

00001c9c <__fp_round>:
__fp_round():
    1c9c:	09 2e       	mov	r0, r25
    1c9e:	03 94       	inc	r0
    1ca0:	00 0c       	add	r0, r0
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <__fp_round+0xc>
    1ca4:	88 23       	and	r24, r24
    1ca6:	52 f0       	brmi	.+20     	; 0x1cbc <__fp_round+0x20>
    1ca8:	bb 0f       	add	r27, r27
    1caa:	40 f4       	brcc	.+16     	; 0x1cbc <__fp_round+0x20>
    1cac:	bf 2b       	or	r27, r31
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <__fp_round+0x18>
    1cb0:	60 ff       	sbrs	r22, 0
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <__fp_round+0x20>
    1cb4:	6f 5f       	subi	r22, 0xFF	; 255
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	08 95       	ret

00001cbe <__fp_split3>:
__fp_split3():
    1cbe:	57 fd       	sbrc	r21, 7
    1cc0:	90 58       	subi	r25, 0x80	; 128
    1cc2:	44 0f       	add	r20, r20
    1cc4:	55 1f       	adc	r21, r21
    1cc6:	59 f0       	breq	.+22     	; 0x1cde <__fp_splitA+0x10>
    1cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cca:	71 f0       	breq	.+28     	; 0x1ce8 <__fp_splitA+0x1a>
    1ccc:	47 95       	ror	r20

00001cce <__fp_splitA>:
    1cce:	88 0f       	add	r24, r24
    1cd0:	97 fb       	bst	r25, 7
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	61 f0       	breq	.+24     	; 0x1cee <__fp_splitA+0x20>
    1cd6:	9f 3f       	cpi	r25, 0xFF	; 255
    1cd8:	79 f0       	breq	.+30     	; 0x1cf8 <__fp_splitA+0x2a>
    1cda:	87 95       	ror	r24
    1cdc:	08 95       	ret
    1cde:	12 16       	cp	r1, r18
    1ce0:	13 06       	cpc	r1, r19
    1ce2:	14 06       	cpc	r1, r20
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	f2 cf       	rjmp	.-28     	; 0x1ccc <__fp_split3+0xe>
    1ce8:	46 95       	lsr	r20
    1cea:	f1 df       	rcall	.-30     	; 0x1cce <__fp_splitA>
    1cec:	08 c0       	rjmp	.+16     	; 0x1cfe <__fp_splitA+0x30>
    1cee:	16 16       	cp	r1, r22
    1cf0:	17 06       	cpc	r1, r23
    1cf2:	18 06       	cpc	r1, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	f1 cf       	rjmp	.-30     	; 0x1cda <__fp_splitA+0xc>
    1cf8:	86 95       	lsr	r24
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	61 05       	cpc	r22, r1
    1cfe:	08 94       	sec
    1d00:	08 95       	ret

00001d02 <__fp_zero>:
__fp_zero():
    1d02:	e8 94       	clt

00001d04 <__fp_szero>:
    1d04:	bb 27       	eor	r27, r27
    1d06:	66 27       	eor	r22, r22
    1d08:	77 27       	eor	r23, r23
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	97 f9       	bld	r25, 7
    1d0e:	08 95       	ret

00001d10 <eeprom_read_byte>:
eeprom_read_byte():
    1d10:	e1 99       	sbic	0x1c, 1	; 28
    1d12:	fe cf       	rjmp	.-4      	; 0x1d10 <eeprom_read_byte>
    1d14:	9f bb       	out	0x1f, r25	; 31
    1d16:	8e bb       	out	0x1e, r24	; 30
    1d18:	e0 9a       	sbi	0x1c, 0	; 28
    1d1a:	99 27       	eor	r25, r25
    1d1c:	8d b3       	in	r24, 0x1d	; 29
    1d1e:	08 95       	ret

00001d20 <eeprom_write_byte>:
eeprom_write_byte():
    1d20:	26 2f       	mov	r18, r22

00001d22 <eeprom_write_r18>:
    1d22:	e1 99       	sbic	0x1c, 1	; 28
    1d24:	fe cf       	rjmp	.-4      	; 0x1d22 <eeprom_write_r18>
    1d26:	9f bb       	out	0x1f, r25	; 31
    1d28:	8e bb       	out	0x1e, r24	; 30
    1d2a:	2d bb       	out	0x1d, r18	; 29
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	e2 9a       	sbi	0x1c, 2	; 28
    1d32:	e1 9a       	sbi	0x1c, 1	; 28
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	08 95       	ret

00001d3a <__subsf3>:
__subsf3():
    1d3a:	50 58       	subi	r21, 0x80	; 128

00001d3c <__addsf3>:
    1d3c:	bb 27       	eor	r27, r27
    1d3e:	aa 27       	eor	r26, r26
    1d40:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3x>
    1d44:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_round>
__addsf3():
    1d48:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_pscA>
    1d4c:	38 f0       	brcs	.+14     	; 0x1d5c <__addsf3+0x20>
    1d4e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fp_pscB>
    1d52:	20 f0       	brcs	.+8      	; 0x1d5c <__addsf3+0x20>
    1d54:	39 f4       	brne	.+14     	; 0x1d64 <__addsf3+0x28>
    1d56:	9f 3f       	cpi	r25, 0xFF	; 255
    1d58:	19 f4       	brne	.+6      	; 0x1d60 <__addsf3+0x24>
    1d5a:	26 f4       	brtc	.+8      	; 0x1d64 <__addsf3+0x28>
    1d5c:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_nan>
    1d60:	0e f4       	brtc	.+2      	; 0x1d64 <__addsf3+0x28>
    1d62:	e0 95       	com	r30
    1d64:	e7 fb       	bst	r30, 7
    1d66:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__fp_inf>

00001d6a <__addsf3x>:
__addsf3x():
    1d6a:	e9 2f       	mov	r30, r25
    1d6c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_split3>
    1d70:	58 f3       	brcs	.-42     	; 0x1d48 <__addsf3+0xc>
    1d72:	ba 17       	cp	r27, r26
    1d74:	62 07       	cpc	r22, r18
    1d76:	73 07       	cpc	r23, r19
    1d78:	84 07       	cpc	r24, r20
    1d7a:	95 07       	cpc	r25, r21
    1d7c:	20 f0       	brcs	.+8      	; 0x1d86 <__addsf3x+0x1c>
    1d7e:	79 f4       	brne	.+30     	; 0x1d9e <__addsf3x+0x34>
    1d80:	a6 f5       	brtc	.+104    	; 0x1dea <__addsf3x+0x80>
    1d82:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_zero>
    1d86:	0e f4       	brtc	.+2      	; 0x1d8a <__addsf3x+0x20>
    1d88:	e0 95       	com	r30
    1d8a:	0b 2e       	mov	r0, r27
    1d8c:	ba 2f       	mov	r27, r26
    1d8e:	a0 2d       	mov	r26, r0
    1d90:	0b 01       	movw	r0, r22
    1d92:	b9 01       	movw	r22, r18
    1d94:	90 01       	movw	r18, r0
    1d96:	0c 01       	movw	r0, r24
    1d98:	ca 01       	movw	r24, r20
    1d9a:	a0 01       	movw	r20, r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	ff 27       	eor	r31, r31
    1da0:	59 1b       	sub	r21, r25
    1da2:	99 f0       	breq	.+38     	; 0x1dca <__addsf3x+0x60>
    1da4:	59 3f       	cpi	r21, 0xF9	; 249
    1da6:	50 f4       	brcc	.+20     	; 0x1dbc <__addsf3x+0x52>
    1da8:	50 3e       	cpi	r21, 0xE0	; 224
    1daa:	68 f1       	brcs	.+90     	; 0x1e06 <__addsf3x+0x9c>
    1dac:	1a 16       	cp	r1, r26
    1dae:	f0 40       	sbci	r31, 0x00	; 0
    1db0:	a2 2f       	mov	r26, r18
    1db2:	23 2f       	mov	r18, r19
    1db4:	34 2f       	mov	r19, r20
    1db6:	44 27       	eor	r20, r20
    1db8:	58 5f       	subi	r21, 0xF8	; 248
    1dba:	f3 cf       	rjmp	.-26     	; 0x1da2 <__addsf3x+0x38>
    1dbc:	46 95       	lsr	r20
    1dbe:	37 95       	ror	r19
    1dc0:	27 95       	ror	r18
    1dc2:	a7 95       	ror	r26
    1dc4:	f0 40       	sbci	r31, 0x00	; 0
    1dc6:	53 95       	inc	r21
    1dc8:	c9 f7       	brne	.-14     	; 0x1dbc <__addsf3x+0x52>
    1dca:	7e f4       	brtc	.+30     	; 0x1dea <__addsf3x+0x80>
    1dcc:	1f 16       	cp	r1, r31
    1dce:	ba 0b       	sbc	r27, r26
    1dd0:	62 0b       	sbc	r22, r18
    1dd2:	73 0b       	sbc	r23, r19
    1dd4:	84 0b       	sbc	r24, r20
    1dd6:	ba f0       	brmi	.+46     	; 0x1e06 <__addsf3x+0x9c>
    1dd8:	91 50       	subi	r25, 0x01	; 1
    1dda:	a1 f0       	breq	.+40     	; 0x1e04 <__addsf3x+0x9a>
    1ddc:	ff 0f       	add	r31, r31
    1dde:	bb 1f       	adc	r27, r27
    1de0:	66 1f       	adc	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	c2 f7       	brpl	.-16     	; 0x1dd8 <__addsf3x+0x6e>
    1de8:	0e c0       	rjmp	.+28     	; 0x1e06 <__addsf3x+0x9c>
    1dea:	ba 0f       	add	r27, r26
    1dec:	62 1f       	adc	r22, r18
    1dee:	73 1f       	adc	r23, r19
    1df0:	84 1f       	adc	r24, r20
    1df2:	48 f4       	brcc	.+18     	; 0x1e06 <__addsf3x+0x9c>
    1df4:	87 95       	ror	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	b7 95       	ror	r27
    1dfc:	f7 95       	ror	r31
    1dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <__addsf3x+0x9a>
    1e02:	b0 cf       	rjmp	.-160    	; 0x1d64 <__addsf3+0x28>
    1e04:	93 95       	inc	r25
    1e06:	88 0f       	add	r24, r24
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <__addsf3x+0xa2>
    1e0a:	99 27       	eor	r25, r25
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	97 95       	ror	r25
    1e10:	87 95       	ror	r24
    1e12:	08 95       	ret

00001e14 <__divsf3>:
    1e14:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divsf3x>
    1e18:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__fp_round>
    1e1c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__fp_pscB>
    1e20:	58 f0       	brcs	.+22     	; 0x1e38 <__divsf3+0x24>
    1e22:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_pscA>
    1e26:	40 f0       	brcs	.+16     	; 0x1e38 <__divsf3+0x24>
    1e28:	29 f4       	brne	.+10     	; 0x1e34 <__divsf3+0x20>
    1e2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e2c:	29 f0       	breq	.+10     	; 0x1e38 <__divsf3+0x24>
    1e2e:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__fp_inf>
    1e32:	51 11       	cpse	r21, r1
    1e34:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__fp_szero>
__divsf3():
    1e38:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__fp_nan>

00001e3c <__divsf3x>:
__divsf3x():
    1e3c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__fp_split3>
    1e40:	68 f3       	brcs	.-38     	; 0x1e1c <__divsf3+0x8>

00001e42 <__divsf3_pse>:
    1e42:	99 23       	and	r25, r25
    1e44:	b1 f3       	breq	.-20     	; 0x1e32 <__divsf3+0x1e>
    1e46:	55 23       	and	r21, r21
    1e48:	91 f3       	breq	.-28     	; 0x1e2e <__divsf3+0x1a>
    1e4a:	95 1b       	sub	r25, r21
    1e4c:	55 0b       	sbc	r21, r21
    1e4e:	bb 27       	eor	r27, r27
    1e50:	aa 27       	eor	r26, r26
    1e52:	62 17       	cp	r22, r18
    1e54:	73 07       	cpc	r23, r19
    1e56:	84 07       	cpc	r24, r20
    1e58:	38 f0       	brcs	.+14     	; 0x1e68 <__divsf3_pse+0x26>
    1e5a:	9f 5f       	subi	r25, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	22 0f       	add	r18, r18
    1e60:	33 1f       	adc	r19, r19
    1e62:	44 1f       	adc	r20, r20
    1e64:	aa 1f       	adc	r26, r26
    1e66:	a9 f3       	breq	.-22     	; 0x1e52 <__divsf3_pse+0x10>
    1e68:	35 d0       	rcall	.+106    	; 0x1ed4 <__divsf3_pse+0x92>
    1e6a:	0e 2e       	mov	r0, r30
    1e6c:	3a f0       	brmi	.+14     	; 0x1e7c <__divsf3_pse+0x3a>
    1e6e:	e0 e8       	ldi	r30, 0x80	; 128
    1e70:	32 d0       	rcall	.+100    	; 0x1ed6 <__divsf3_pse+0x94>
    1e72:	91 50       	subi	r25, 0x01	; 1
    1e74:	50 40       	sbci	r21, 0x00	; 0
    1e76:	e6 95       	lsr	r30
    1e78:	00 1c       	adc	r0, r0
    1e7a:	ca f7       	brpl	.-14     	; 0x1e6e <__divsf3_pse+0x2c>
    1e7c:	2b d0       	rcall	.+86     	; 0x1ed4 <__divsf3_pse+0x92>
    1e7e:	fe 2f       	mov	r31, r30
    1e80:	29 d0       	rcall	.+82     	; 0x1ed4 <__divsf3_pse+0x92>
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	26 17       	cp	r18, r22
    1e8c:	37 07       	cpc	r19, r23
    1e8e:	48 07       	cpc	r20, r24
    1e90:	ab 07       	cpc	r26, r27
    1e92:	b0 e8       	ldi	r27, 0x80	; 128
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <__divsf3_pse+0x56>
    1e96:	bb 0b       	sbc	r27, r27
    1e98:	80 2d       	mov	r24, r0
    1e9a:	bf 01       	movw	r22, r30
    1e9c:	ff 27       	eor	r31, r31
    1e9e:	93 58       	subi	r25, 0x83	; 131
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	3a f0       	brmi	.+14     	; 0x1eb2 <__divsf3_pse+0x70>
    1ea4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea6:	51 05       	cpc	r21, r1
    1ea8:	78 f0       	brcs	.+30     	; 0x1ec8 <__divsf3_pse+0x86>
    1eaa:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__fp_inf>
    1eae:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__fp_szero>
    1eb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb4:	e4 f3       	brlt	.-8      	; 0x1eae <__divsf3_pse+0x6c>
    1eb6:	98 3e       	cpi	r25, 0xE8	; 232
    1eb8:	d4 f3       	brlt	.-12     	; 0x1eae <__divsf3_pse+0x6c>
    1eba:	86 95       	lsr	r24
    1ebc:	77 95       	ror	r23
    1ebe:	67 95       	ror	r22
    1ec0:	b7 95       	ror	r27
    1ec2:	f7 95       	ror	r31
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
    1ec6:	c9 f7       	brne	.-14     	; 0x1eba <__divsf3_pse+0x78>
    1ec8:	88 0f       	add	r24, r24
    1eca:	91 1d       	adc	r25, r1
    1ecc:	96 95       	lsr	r25
    1ece:	87 95       	ror	r24
    1ed0:	97 f9       	bld	r25, 7
    1ed2:	08 95       	ret
    1ed4:	e1 e0       	ldi	r30, 0x01	; 1
    1ed6:	66 0f       	add	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	bb 1f       	adc	r27, r27
    1ede:	62 17       	cp	r22, r18
    1ee0:	73 07       	cpc	r23, r19
    1ee2:	84 07       	cpc	r24, r20
    1ee4:	ba 07       	cpc	r27, r26
    1ee6:	20 f0       	brcs	.+8      	; 0x1ef0 <__divsf3_pse+0xae>
    1ee8:	62 1b       	sub	r22, r18
    1eea:	73 0b       	sbc	r23, r19
    1eec:	84 0b       	sbc	r24, r20
    1eee:	ba 0b       	sbc	r27, r26
    1ef0:	ee 1f       	adc	r30, r30
    1ef2:	88 f7       	brcc	.-30     	; 0x1ed6 <__divsf3_pse+0x94>
    1ef4:	e0 95       	com	r30
    1ef6:	08 95       	ret

00001ef8 <__fixunssfsi>:
    1ef8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__fp_splitA>
    1efc:	88 f0       	brcs	.+34     	; 0x1f20 <__fixunssfsi+0x28>
    1efe:	9f 57       	subi	r25, 0x7F	; 127
    1f00:	98 f0       	brcs	.+38     	; 0x1f28 <__fixunssfsi+0x30>
    1f02:	b9 2f       	mov	r27, r25
    1f04:	99 27       	eor	r25, r25
    1f06:	b7 51       	subi	r27, 0x17	; 23
    1f08:	b0 f0       	brcs	.+44     	; 0x1f36 <__fixunssfsi+0x3e>
    1f0a:	e1 f0       	breq	.+56     	; 0x1f44 <__fixunssfsi+0x4c>
    1f0c:	66 0f       	add	r22, r22
    1f0e:	77 1f       	adc	r23, r23
    1f10:	88 1f       	adc	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	1a f0       	brmi	.+6      	; 0x1f1c <__fixunssfsi+0x24>
    1f16:	ba 95       	dec	r27
__fixunssfsi():
    1f18:	c9 f7       	brne	.-14     	; 0x1f0c <__fixunssfsi+0x14>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <__fixunssfsi+0x4c>
    1f1c:	b1 30       	cpi	r27, 0x01	; 1
    1f1e:	91 f0       	breq	.+36     	; 0x1f44 <__fixunssfsi+0x4c>
    1f20:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__fp_zero>
    1f24:	b1 e0       	ldi	r27, 0x01	; 1
    1f26:	08 95       	ret
    1f28:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_zero>
    1f2c:	67 2f       	mov	r22, r23
    1f2e:	78 2f       	mov	r23, r24
    1f30:	88 27       	eor	r24, r24
    1f32:	b8 5f       	subi	r27, 0xF8	; 248
    1f34:	39 f0       	breq	.+14     	; 0x1f44 <__fixunssfsi+0x4c>
    1f36:	b9 3f       	cpi	r27, 0xF9	; 249
    1f38:	cc f3       	brlt	.-14     	; 0x1f2c <__fixunssfsi+0x34>
    1f3a:	86 95       	lsr	r24
    1f3c:	77 95       	ror	r23
    1f3e:	67 95       	ror	r22
    1f40:	b3 95       	inc	r27
    1f42:	d9 f7       	brne	.-10     	; 0x1f3a <__fixunssfsi+0x42>
    1f44:	3e f4       	brtc	.+14     	; 0x1f54 <__fixunssfsi+0x5c>
    1f46:	90 95       	com	r25
    1f48:	80 95       	com	r24
    1f4a:	70 95       	com	r23
    1f4c:	61 95       	neg	r22
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	8f 4f       	sbci	r24, 0xFF	; 255
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	08 95       	ret

00001f56 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1f56:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1f58:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1f5a:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1f5c:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1f5e:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1f60:	0d c0       	rjmp	.+26     	; 0x1f7c <__udivmodsi4_ep>

00001f62 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1f62:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1f64:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1f66:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1f68:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1f6a:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1f6c:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1f6e:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1f70:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1f72:	20 f0       	brcs	.+8      	; 0x1f7c <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1f74:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1f76:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1f78:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1f7a:	f5 0b       	sbc	r31, r21

00001f7c <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1f7c:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1f7e:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1f80:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1f82:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1f84:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1f86:	69 f7       	brne	.-38     	; 0x1f62 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1f88:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1f8a:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1f8c:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1f8e:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1f90:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1f92:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1f94:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1f96:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1f98:	08 95       	ret

00001f9a <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1f9a:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1f9c:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    1f9e:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    1fa0:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    1fa2:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    1fa4:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    1fa6:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    1fa8:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    1faa:	09 94       	ijmp

00001fac <__subdi3>:
__subdi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2080
    1fac:	2a 19       	sub	r18, r10
    1fae:	3b 09       	sbc	r19, r11
    1fb0:	4c 09       	sbc	r20, r12
    1fb2:	5d 09       	sbc	r21, r13
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2081
    1fb4:	6e 09       	sbc	r22, r14
    1fb6:	7f 09       	sbc	r23, r15
    1fb8:	80 0b       	sbc	r24, r16
    1fba:	91 0b       	sbc	r25, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2082
    1fbc:	08 95       	ret

00001fbe <malloc>:
malloc():
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	91 05       	cpc	r25, r1
    1fca:	10 f4       	brcc	.+4      	; 0x1fd0 <malloc+0x12>
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <__flp>
    1fd4:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <__flp+0x1>
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	30 97       	sbiw	r30, 0x00	; 0
    1fe2:	99 f4       	brne	.+38     	; 0x200a <malloc+0x4c>
    1fe4:	21 15       	cp	r18, r1
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <malloc+0x2e>
    1fea:	4a c0       	rjmp	.+148    	; 0x2080 <malloc+0xc2>
    1fec:	28 1b       	sub	r18, r24
    1fee:	39 0b       	sbc	r19, r25
    1ff0:	24 30       	cpi	r18, 0x04	; 4
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	d8 f5       	brcc	.+118    	; 0x206c <malloc+0xae>
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffa:	61 15       	cp	r22, r1
    1ffc:	71 05       	cpc	r23, r1
    1ffe:	89 f1       	breq	.+98     	; 0x2062 <malloc+0xa4>
    2000:	fb 01       	movw	r30, r22
    2002:	93 83       	std	Z+3, r25	; 0x03
    2004:	82 83       	std	Z+2, r24	; 0x02
    2006:	fe 01       	movw	r30, r28
    2008:	11 c0       	rjmp	.+34     	; 0x202c <malloc+0x6e>
    200a:	40 81       	ld	r20, Z
    200c:	51 81       	ldd	r21, Z+1	; 0x01
    200e:	02 81       	ldd	r16, Z+2	; 0x02
    2010:	13 81       	ldd	r17, Z+3	; 0x03
    2012:	48 17       	cp	r20, r24
    2014:	59 07       	cpc	r21, r25
    2016:	e0 f0       	brcs	.+56     	; 0x2050 <malloc+0x92>
    2018:	48 17       	cp	r20, r24
    201a:	59 07       	cpc	r21, r25
    201c:	99 f4       	brne	.+38     	; 0x2044 <malloc+0x86>
    201e:	10 97       	sbiw	r26, 0x00	; 0
    2020:	61 f0       	breq	.+24     	; 0x203a <malloc+0x7c>
    2022:	12 96       	adiw	r26, 0x02	; 2
    2024:	0c 93       	st	X, r16
    2026:	12 97       	sbiw	r26, 0x02	; 2
    2028:	13 96       	adiw	r26, 0x03	; 3
    202a:	1c 93       	st	X, r17
    202c:	32 96       	adiw	r30, 0x02	; 2
    202e:	cf 01       	movw	r24, r30
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	08 95       	ret
    203a:	00 93 4d 03 	sts	0x034D, r16	; 0x80034d <__flp>
    203e:	10 93 4e 03 	sts	0x034E, r17	; 0x80034e <__flp+0x1>
    2042:	f4 cf       	rjmp	.-24     	; 0x202c <malloc+0x6e>
    2044:	21 15       	cp	r18, r1
    2046:	31 05       	cpc	r19, r1
    2048:	51 f0       	breq	.+20     	; 0x205e <malloc+0xa0>
    204a:	42 17       	cp	r20, r18
    204c:	53 07       	cpc	r21, r19
    204e:	38 f0       	brcs	.+14     	; 0x205e <malloc+0xa0>
    2050:	a9 01       	movw	r20, r18
    2052:	db 01       	movw	r26, r22
    2054:	9a 01       	movw	r18, r20
    2056:	bd 01       	movw	r22, r26
    2058:	df 01       	movw	r26, r30
    205a:	f8 01       	movw	r30, r16
    205c:	c1 cf       	rjmp	.-126    	; 0x1fe0 <malloc+0x22>
    205e:	ef 01       	movw	r28, r30
    2060:	f9 cf       	rjmp	.-14     	; 0x2054 <malloc+0x96>
    2062:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <__flp+0x1>
    2066:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <__flp>
    206a:	cd cf       	rjmp	.-102    	; 0x2006 <malloc+0x48>
    206c:	fe 01       	movw	r30, r28
    206e:	e2 0f       	add	r30, r18
    2070:	f3 1f       	adc	r31, r19
    2072:	81 93       	st	Z+, r24
    2074:	91 93       	st	Z+, r25
    2076:	22 50       	subi	r18, 0x02	; 2
    2078:	31 09       	sbc	r19, r1
    207a:	39 83       	std	Y+1, r19	; 0x01
    207c:	28 83       	st	Y, r18
    207e:	d7 cf       	rjmp	.-82     	; 0x202e <malloc+0x70>
    2080:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    2084:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    2088:	23 2b       	or	r18, r19
    208a:	41 f4       	brne	.+16     	; 0x209c <malloc+0xde>
    208c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2090:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2094:	30 93 4c 03 	sts	0x034C, r19	; 0x80034c <__brkval+0x1>
    2098:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <__brkval>
    209c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20a4:	21 15       	cp	r18, r1
    20a6:	31 05       	cpc	r19, r1
    20a8:	41 f4       	brne	.+16     	; 0x20ba <malloc+0xfc>
    20aa:	2d b7       	in	r18, 0x3d	; 61
    20ac:	3e b7       	in	r19, 0x3e	; 62
    20ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    20b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    20b6:	24 1b       	sub	r18, r20
    20b8:	35 0b       	sbc	r19, r21
    20ba:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <__brkval>
    20be:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <__brkval+0x1>
    20c2:	e2 17       	cp	r30, r18
    20c4:	f3 07       	cpc	r31, r19
    20c6:	a0 f4       	brcc	.+40     	; 0x20f0 <malloc+0x132>
    20c8:	2e 1b       	sub	r18, r30
    20ca:	3f 0b       	sbc	r19, r31
    20cc:	28 17       	cp	r18, r24
    20ce:	39 07       	cpc	r19, r25
    20d0:	78 f0       	brcs	.+30     	; 0x20f0 <malloc+0x132>
    20d2:	ac 01       	movw	r20, r24
    20d4:	4e 5f       	subi	r20, 0xFE	; 254
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	24 17       	cp	r18, r20
    20da:	35 07       	cpc	r19, r21
    20dc:	48 f0       	brcs	.+18     	; 0x20f0 <malloc+0x132>
    20de:	4e 0f       	add	r20, r30
    20e0:	5f 1f       	adc	r21, r31
    20e2:	50 93 4c 03 	sts	0x034C, r21	; 0x80034c <__brkval+0x1>
    20e6:	40 93 4b 03 	sts	0x034B, r20	; 0x80034b <__brkval>
    20ea:	81 93       	st	Z+, r24
    20ec:	91 93       	st	Z+, r25
    20ee:	9f cf       	rjmp	.-194    	; 0x202e <malloc+0x70>
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	e0 e0       	ldi	r30, 0x00	; 0
    20f4:	9c cf       	rjmp	.-200    	; 0x202e <malloc+0x70>

000020f6 <free>:
free():
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	e9 f0       	breq	.+58     	; 0x2138 <free+0x42>
    20fe:	fc 01       	movw	r30, r24
    2100:	32 97       	sbiw	r30, 0x02	; 2
    2102:	13 82       	std	Z+3, r1	; 0x03
    2104:	12 82       	std	Z+2, r1	; 0x02
    2106:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <__flp>
    210a:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <__flp+0x1>
    210e:	ed 01       	movw	r28, r26
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	10 97       	sbiw	r26, 0x00	; 0
    2116:	a1 f4       	brne	.+40     	; 0x2140 <free+0x4a>
    2118:	20 81       	ld	r18, Z
    211a:	31 81       	ldd	r19, Z+1	; 0x01
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    2124:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    2128:	28 17       	cp	r18, r24
    212a:	39 07       	cpc	r19, r25
    212c:	09 f0       	breq	.+2      	; 0x2130 <free+0x3a>
    212e:	61 c0       	rjmp	.+194    	; 0x21f2 <free+0xfc>
    2130:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <__brkval+0x1>
    2134:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <__brkval>
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret
    213e:	ea 01       	movw	r28, r20
    2140:	ce 17       	cp	r28, r30
    2142:	df 07       	cpc	r29, r31
    2144:	e8 f5       	brcc	.+122    	; 0x21c0 <free+0xca>
    2146:	4a 81       	ldd	r20, Y+2	; 0x02
    2148:	5b 81       	ldd	r21, Y+3	; 0x03
    214a:	9e 01       	movw	r18, r28
    214c:	41 15       	cp	r20, r1
    214e:	51 05       	cpc	r21, r1
    2150:	b1 f7       	brne	.-20     	; 0x213e <free+0x48>
    2152:	e9 01       	movw	r28, r18
    2154:	fb 83       	std	Y+3, r31	; 0x03
    2156:	ea 83       	std	Y+2, r30	; 0x02
    2158:	49 91       	ld	r20, Y+
    215a:	59 91       	ld	r21, Y+
    215c:	c4 0f       	add	r28, r20
    215e:	d5 1f       	adc	r29, r21
    2160:	ec 17       	cp	r30, r28
    2162:	fd 07       	cpc	r31, r29
    2164:	61 f4       	brne	.+24     	; 0x217e <free+0x88>
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	02 96       	adiw	r24, 0x02	; 2
    216c:	84 0f       	add	r24, r20
    216e:	95 1f       	adc	r25, r21
    2170:	e9 01       	movw	r28, r18
    2172:	99 83       	std	Y+1, r25	; 0x01
    2174:	88 83       	st	Y, r24
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	9b 83       	std	Y+3, r25	; 0x03
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	e0 e0       	ldi	r30, 0x00	; 0
    2182:	12 96       	adiw	r26, 0x02	; 2
    2184:	8d 91       	ld	r24, X+
    2186:	9c 91       	ld	r25, X
    2188:	13 97       	sbiw	r26, 0x03	; 3
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	b9 f5       	brne	.+110    	; 0x21fc <free+0x106>
    218e:	2d 91       	ld	r18, X+
    2190:	3c 91       	ld	r19, X
    2192:	11 97       	sbiw	r26, 0x01	; 1
    2194:	cd 01       	movw	r24, r26
    2196:	02 96       	adiw	r24, 0x02	; 2
    2198:	82 0f       	add	r24, r18
    219a:	93 1f       	adc	r25, r19
    219c:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    21a0:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    21a4:	28 17       	cp	r18, r24
    21a6:	39 07       	cpc	r19, r25
    21a8:	39 f6       	brne	.-114    	; 0x2138 <free+0x42>
    21aa:	30 97       	sbiw	r30, 0x00	; 0
    21ac:	51 f5       	brne	.+84     	; 0x2202 <free+0x10c>
    21ae:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <__flp+0x1>
    21b2:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__flp>
    21b6:	b0 93 4c 03 	sts	0x034C, r27	; 0x80034c <__brkval+0x1>
    21ba:	a0 93 4b 03 	sts	0x034B, r26	; 0x80034b <__brkval>
    21be:	bc cf       	rjmp	.-136    	; 0x2138 <free+0x42>
    21c0:	d3 83       	std	Z+3, r29	; 0x03
    21c2:	c2 83       	std	Z+2, r28	; 0x02
    21c4:	40 81       	ld	r20, Z
    21c6:	51 81       	ldd	r21, Z+1	; 0x01
    21c8:	84 0f       	add	r24, r20
    21ca:	95 1f       	adc	r25, r21
    21cc:	c8 17       	cp	r28, r24
    21ce:	d9 07       	cpc	r29, r25
    21d0:	61 f4       	brne	.+24     	; 0x21ea <free+0xf4>
    21d2:	4e 5f       	subi	r20, 0xFE	; 254
    21d4:	5f 4f       	sbci	r21, 0xFF	; 255
    21d6:	88 81       	ld	r24, Y
    21d8:	99 81       	ldd	r25, Y+1	; 0x01
    21da:	48 0f       	add	r20, r24
    21dc:	59 1f       	adc	r21, r25
    21de:	51 83       	std	Z+1, r21	; 0x01
    21e0:	40 83       	st	Z, r20
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	93 83       	std	Z+3, r25	; 0x03
    21e8:	82 83       	std	Z+2, r24	; 0x02
    21ea:	21 15       	cp	r18, r1
    21ec:	31 05       	cpc	r19, r1
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <free+0xfc>
    21f0:	b0 cf       	rjmp	.-160    	; 0x2152 <free+0x5c>
    21f2:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <__flp+0x1>
    21f6:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <__flp>
    21fa:	9e cf       	rjmp	.-196    	; 0x2138 <free+0x42>
    21fc:	fd 01       	movw	r30, r26
    21fe:	dc 01       	movw	r26, r24
    2200:	c0 cf       	rjmp	.-128    	; 0x2182 <free+0x8c>
    2202:	13 82       	std	Z+3, r1	; 0x03
    2204:	12 82       	std	Z+2, r1	; 0x02
    2206:	d7 cf       	rjmp	.-82     	; 0x21b6 <free+0xc0>

00002208 <realloc>:
realloc():
    2208:	4f 92       	push	r4
    220a:	5f 92       	push	r5
    220c:	6f 92       	push	r6
    220e:	7f 92       	push	r7
    2210:	8f 92       	push	r8
    2212:	9f 92       	push	r9
    2214:	af 92       	push	r10
    2216:	bf 92       	push	r11
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	8c 01       	movw	r16, r24
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	99 f4       	brne	.+38     	; 0x2254 <realloc+0x4c>
    222e:	cb 01       	movw	r24, r22
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	bf 90       	pop	r11
    2242:	af 90       	pop	r10
    2244:	9f 90       	pop	r9
    2246:	8f 90       	pop	r8
    2248:	7f 90       	pop	r7
    224a:	6f 90       	pop	r6
    224c:	5f 90       	pop	r5
    224e:	4f 90       	pop	r4
    2250:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <malloc>
    2254:	fc 01       	movw	r30, r24
    2256:	e6 0f       	add	r30, r22
    2258:	f7 1f       	adc	r31, r23
    225a:	9c 01       	movw	r18, r24
    225c:	22 50       	subi	r18, 0x02	; 2
    225e:	31 09       	sbc	r19, r1
    2260:	e2 17       	cp	r30, r18
    2262:	f3 07       	cpc	r31, r19
    2264:	08 f4       	brcc	.+2      	; 0x2268 <realloc+0x60>
    2266:	ae c0       	rjmp	.+348    	; 0x23c4 <realloc+0x1bc>
    2268:	d9 01       	movw	r26, r18
    226a:	cd 91       	ld	r28, X+
    226c:	dc 91       	ld	r29, X
    226e:	11 97       	sbiw	r26, 0x01	; 1
    2270:	c6 17       	cp	r28, r22
    2272:	d7 07       	cpc	r29, r23
    2274:	20 f1       	brcs	.+72     	; 0x22be <realloc+0xb6>
    2276:	c5 30       	cpi	r28, 0x05	; 5
    2278:	d1 05       	cpc	r29, r1
    227a:	78 f0       	brcs	.+30     	; 0x229a <realloc+0x92>
    227c:	ce 01       	movw	r24, r28
    227e:	04 97       	sbiw	r24, 0x04	; 4
    2280:	86 17       	cp	r24, r22
    2282:	97 07       	cpc	r25, r23
    2284:	50 f0       	brcs	.+20     	; 0x229a <realloc+0x92>
    2286:	c6 1b       	sub	r28, r22
    2288:	d7 0b       	sbc	r29, r23
    228a:	22 97       	sbiw	r28, 0x02	; 2
    228c:	c1 93       	st	Z+, r28
    228e:	d1 93       	st	Z+, r29
    2290:	6d 93       	st	X+, r22
    2292:	7c 93       	st	X, r23
    2294:	cf 01       	movw	r24, r30
    2296:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <free>
    229a:	c8 01       	movw	r24, r16
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	df 90       	pop	r13
    22aa:	cf 90       	pop	r12
    22ac:	bf 90       	pop	r11
    22ae:	af 90       	pop	r10
    22b0:	9f 90       	pop	r9
    22b2:	8f 90       	pop	r8
    22b4:	7f 90       	pop	r7
    22b6:	6f 90       	pop	r6
    22b8:	5f 90       	pop	r5
    22ba:	4f 90       	pop	r4
    22bc:	08 95       	ret
    22be:	5b 01       	movw	r10, r22
    22c0:	ac 1a       	sub	r10, r28
    22c2:	bd 0a       	sbc	r11, r29
    22c4:	4c 01       	movw	r8, r24
    22c6:	8c 0e       	add	r8, r28
    22c8:	9d 1e       	adc	r9, r29
    22ca:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <__flp>
    22ce:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <__flp+0x1>
    22d2:	51 2c       	mov	r5, r1
    22d4:	41 2c       	mov	r4, r1
    22d6:	f1 2c       	mov	r15, r1
    22d8:	e1 2c       	mov	r14, r1
    22da:	10 97       	sbiw	r26, 0x00	; 0
    22dc:	31 f5       	brne	.+76     	; 0x232a <realloc+0x122>
    22de:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <__brkval>
    22e2:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <__brkval+0x1>
    22e6:	88 15       	cp	r24, r8
    22e8:	99 05       	cpc	r25, r9
    22ea:	09 f0       	breq	.+2      	; 0x22ee <realloc+0xe6>
    22ec:	5c c0       	rjmp	.+184    	; 0x23a6 <realloc+0x19e>
    22ee:	46 16       	cp	r4, r22
    22f0:	57 06       	cpc	r5, r23
    22f2:	08 f0       	brcs	.+2      	; 0x22f6 <realloc+0xee>
    22f4:	58 c0       	rjmp	.+176    	; 0x23a6 <realloc+0x19e>
    22f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    22fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	41 f4       	brne	.+16     	; 0x2312 <realloc+0x10a>
    2302:	8d b7       	in	r24, 0x3d	; 61
    2304:	9e b7       	in	r25, 0x3e	; 62
    2306:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    230a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    230e:	84 1b       	sub	r24, r20
    2310:	95 0b       	sbc	r25, r21
    2312:	e8 17       	cp	r30, r24
    2314:	f9 07       	cpc	r31, r25
    2316:	08 f0       	brcs	.+2      	; 0x231a <realloc+0x112>
    2318:	55 c0       	rjmp	.+170    	; 0x23c4 <realloc+0x1bc>
    231a:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <__brkval+0x1>
    231e:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <__brkval>
    2322:	f9 01       	movw	r30, r18
    2324:	71 83       	std	Z+1, r23	; 0x01
    2326:	60 83       	st	Z, r22
    2328:	b8 cf       	rjmp	.-144    	; 0x229a <realloc+0x92>
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	11 97       	sbiw	r26, 0x01	; 1
    2330:	12 96       	adiw	r26, 0x02	; 2
    2332:	6c 90       	ld	r6, X
    2334:	12 97       	sbiw	r26, 0x02	; 2
    2336:	13 96       	adiw	r26, 0x03	; 3
    2338:	7c 90       	ld	r7, X
    233a:	13 97       	sbiw	r26, 0x03	; 3
    233c:	a8 15       	cp	r26, r8
    233e:	b9 05       	cpc	r27, r9
    2340:	59 f5       	brne	.+86     	; 0x2398 <realloc+0x190>
    2342:	6c 01       	movw	r12, r24
    2344:	42 e0       	ldi	r20, 0x02	; 2
    2346:	c4 0e       	add	r12, r20
    2348:	d1 1c       	adc	r13, r1
    234a:	ca 14       	cp	r12, r10
    234c:	db 04       	cpc	r13, r11
    234e:	20 f1       	brcs	.+72     	; 0x2398 <realloc+0x190>
    2350:	ac 01       	movw	r20, r24
    2352:	4a 19       	sub	r20, r10
    2354:	5b 09       	sbc	r21, r11
    2356:	da 01       	movw	r26, r20
    2358:	12 96       	adiw	r26, 0x02	; 2
    235a:	15 97       	sbiw	r26, 0x05	; 5
    235c:	80 f0       	brcs	.+32     	; 0x237e <realloc+0x176>
    235e:	62 82       	std	Z+2, r6	; 0x02
    2360:	73 82       	std	Z+3, r7	; 0x03
    2362:	51 83       	std	Z+1, r21	; 0x01
    2364:	40 83       	st	Z, r20
    2366:	d9 01       	movw	r26, r18
    2368:	6d 93       	st	X+, r22
    236a:	7c 93       	st	X, r23
    236c:	e1 14       	cp	r14, r1
    236e:	f1 04       	cpc	r15, r1
    2370:	71 f0       	breq	.+28     	; 0x238e <realloc+0x186>
    2372:	d7 01       	movw	r26, r14
    2374:	13 96       	adiw	r26, 0x03	; 3
    2376:	fc 93       	st	X, r31
    2378:	ee 93       	st	-X, r30
    237a:	12 97       	sbiw	r26, 0x02	; 2
    237c:	8e cf       	rjmp	.-228    	; 0x229a <realloc+0x92>
    237e:	22 96       	adiw	r28, 0x02	; 2
    2380:	8c 0f       	add	r24, r28
    2382:	9d 1f       	adc	r25, r29
    2384:	f9 01       	movw	r30, r18
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    238a:	f3 01       	movw	r30, r6
    238c:	ef cf       	rjmp	.-34     	; 0x236c <realloc+0x164>
    238e:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <__flp+0x1>
    2392:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <__flp>
    2396:	81 cf       	rjmp	.-254    	; 0x229a <realloc+0x92>
    2398:	48 16       	cp	r4, r24
    239a:	59 06       	cpc	r5, r25
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <realloc+0x198>
    239e:	2c 01       	movw	r4, r24
    23a0:	7d 01       	movw	r14, r26
    23a2:	d3 01       	movw	r26, r6
    23a4:	9a cf       	rjmp	.-204    	; 0x22da <realloc+0xd2>
    23a6:	cb 01       	movw	r24, r22
    23a8:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <malloc>
    23ac:	7c 01       	movw	r14, r24
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	49 f0       	breq	.+18     	; 0x23c4 <realloc+0x1bc>
    23b2:	ae 01       	movw	r20, r28
    23b4:	b8 01       	movw	r22, r16
    23b6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <memcpy>
    23ba:	c8 01       	movw	r24, r16
    23bc:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <free>
    23c0:	87 01       	movw	r16, r14
    23c2:	6b cf       	rjmp	.-298    	; 0x229a <realloc+0x92>
    23c4:	10 e0       	ldi	r17, 0x00	; 0
    23c6:	00 e0       	ldi	r16, 0x00	; 0
    23c8:	68 cf       	rjmp	.-304    	; 0x229a <realloc+0x92>

000023ca <memcpy>:
memcpy():
    23ca:	fb 01       	movw	r30, r22
    23cc:	dc 01       	movw	r26, r24
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <memcpy+0xa>
    23d0:	01 90       	ld	r0, Z+
    23d2:	0d 92       	st	X+, r0
    23d4:	41 50       	subi	r20, 0x01	; 1
    23d6:	50 40       	sbci	r21, 0x00	; 0
    23d8:	d8 f7       	brcc	.-10     	; 0x23d0 <memcpy+0x6>
    23da:	08 95       	ret

000023dc <strcmp>:
strcmp():
    23dc:	fb 01       	movw	r30, r22
    23de:	dc 01       	movw	r26, r24
    23e0:	8d 91       	ld	r24, X+
    23e2:	01 90       	ld	r0, Z+
    23e4:	80 19       	sub	r24, r0
    23e6:	01 10       	cpse	r0, r1
    23e8:	d9 f3       	breq	.-10     	; 0x23e0 <strcmp+0x4>
    23ea:	99 0b       	sbc	r25, r25
    23ec:	08 95       	ret

000023ee <strcpy>:
strcpy():
    23ee:	fb 01       	movw	r30, r22
    23f0:	dc 01       	movw	r26, r24
    23f2:	01 90       	ld	r0, Z+
    23f4:	0d 92       	st	X+, r0
    23f6:	00 20       	and	r0, r0
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <strcpy+0x4>
    23fa:	08 95       	ret

000023fc <strncmp>:
strncmp():
    23fc:	fb 01       	movw	r30, r22
    23fe:	dc 01       	movw	r26, r24
    2400:	41 50       	subi	r20, 0x01	; 1
    2402:	50 40       	sbci	r21, 0x00	; 0
    2404:	30 f0       	brcs	.+12     	; 0x2412 <strncmp+0x16>
    2406:	8d 91       	ld	r24, X+
    2408:	01 90       	ld	r0, Z+
    240a:	80 19       	sub	r24, r0
    240c:	19 f4       	brne	.+6      	; 0x2414 <strncmp+0x18>
    240e:	00 20       	and	r0, r0
    2410:	b9 f7       	brne	.-18     	; 0x2400 <strncmp+0x4>
    2412:	88 1b       	sub	r24, r24
    2414:	99 0b       	sbc	r25, r25
    2416:	08 95       	ret

00002418 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    2418:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    241a:	cf ea       	ldi	r28, 0xAF	; 175
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    241c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2420:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    2422:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    2426:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    2428:	c0 3b       	cpi	r28, 0xB0	; 176
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    242a:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    242c:	c9 f7       	brne	.-14     	; 0x2420 <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    242e:	f8 94       	cli

00002430 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2430:	ff cf       	rjmp	.-2      	; 0x2430 <__stop_program>
